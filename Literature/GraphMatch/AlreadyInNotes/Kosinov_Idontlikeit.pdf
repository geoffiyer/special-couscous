%!PS-Adobe-2.0
%%Creator: dvipsk 5.86 p1.5d Copyright 1996-2001 ASCII Corp.(www-ptex@ascii.co.jp)
%%based on dvipsk 5.86 Copyright 1999 Radical Eye Software (www.radicaleye.com)
%%Title: SSPR2002.dvi
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica Helvetica-Bold Helvetica-Oblique
%%+ Helvetica-BoldOblique Times-Roman Times-Bold Times-Italic
%%+ Times-BoldItalic Courier Courier-Bold Courier-Oblique
%%+ Courier-BoldOblique Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips SSPR2002
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.01.11:2033
%%BeginProcSet: texc.pro%!PS-Adobe
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: texnansi.enc
% @psencodingfile{
%   author = "Y&Y, Inc.",
%   version = "1.1",
%   date = "1 December 1996",
%   filename = "texnansi.enc",
%   email = "help@YandY.com",
%   address = "45 Walden Street // Concord, MA 01742, USA",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for fonts in Adobe Type 1 format for use with TeX."
% }
%
% The idea is to have all 228 characters normally included in Type 1 text
% fonts (plus a few more) available for typesetting.  This is effectively
% the character set in Adobe Standard Encoding, ISO Latin 1, plus a few more.
%
% Character code assignments were made as follows:
%
% (1) The character layout largely matches `ASCII' in the 32 -- 126 range,
% except for `circumflex' in 94 and `tilde' in 126, to match `TeX text'
% (`asciicircumflex' and `asciitilde' appear in 158 and 142 instead).
%
% (2) The character layout matches `Windows ANSI' in almost all places,
% except for `quoteright' in 39 and `quoteleft' in 96 to match ASCII
% (`quotesingle' and `grave' appear in 129 and 18 instead).
%
% (3) The character layout matches `TeX typewriter' used by CM text fonts
% in most places (except for discordant positions such as hungarumlaut
% (instead of braceright), dotaccent (instead of underscore) etc.
%
% (4) Remaining characters are assigned arbitrarily to the `control character'
% range (0 -- 31), avoiding 0, 9, 10 and 13 in case we meet dumb software
% - similarly one should really avoid 127 and 128 if possible.
% In addition, the 8 open slots in Windows ANSI between 128 and 159 are used.
%
% (5) Y&Y Lucida Bright includes some extra ligatures and such; ff, ffi, ffl,
% and `dotlessj,' these are included 11 -- 15, and 17.
%
% (6) Hyphen appears both at 45 and 173 for compatibility with both ASCII
% and Windows ANSI.
%
% (7) It doesn't really matter where ligatures appear (both real, such as ffi,
% and pseudo such as ---) since these should not be accessed directly, only
% via ligature information in the TFM file.
%
% SAMPLE USAGE (in `psfonts.map' file for DVIPS):
% 
% lbr LucidaBright "TeXnANSIEncoding ReEncodeFont" <texnansi.enc <lbr.pfb
%
% This tells DVIPS that the font called `lbr' in TeX has PostScript 
% FontName `LucidaBright.'  It also asks DVIPS to expand the file `lbr.pfb'
% into PFA form, to include the attached `texnansi.enc' encoding vector,
% and to then actually reencode the font based on that encoding vector.
%
% Revised 1996 June 1 by adding second position for `fl' to avoid Acrobat bug.
% Revised 1996 June 1 by adding second position for `fraction' for same reason.
%
/TeXnANSIEncoding [
/.notdef /uni20AC /.notdef /.notdef % 0, 1, 2, 3
/fraction %	4
/dotaccent %	5
/hungarumlaut %	6
/ogonek	%	7
/fl	%	8
/.notdef % /fraction %	9	not used (see 4), backward compatability only
/cwm	%	10	not used, except boundary char internally maybe
/ff    %	11
/fi    %	12
/.notdef % /fl    %	13	not used (see 8), backward compatability only
/ffi   %	14
/ffl   %	15
/dotlessi %	16
/dotlessj %	17
/grave %	18
/acute %	19
/caron %	20
/breve %	21
/macron %	22
/ring  %	23
/cedilla %	24
/germandbls %	25
/ae    %	26
/oe    %	27
/oslash %	28
/AE    %	29
/OE    %	30
/Oslash %	31
/space %	32	% /suppress in TeX text
/exclam %	33
/quotedbl %	34	% /quotedblright in TeX text
/numbersign %	35
/dollar %	36
/percent %	37
/ampersand %	38
/quoteright %	39	% /quotesingle in ANSI
/parenleft %	40
/parenright %	41
/asterisk %	42
/plus  %	43
/comma %	44
/hyphen %	45
/period %	46
/slash %	47
/zero  %	48
/one   %	49
/two   %	50
/three %	51
/four  %	52
/five  %	53
/six   %	54
/seven %	55
/eight %	56
/nine  %	57
/colon %	58
/semicolon %	59
/less  %	60	% /exclamdown in Tex text
/equal %	61
/greater %	62	% /questiondown in TeX text
/question %	63
/at %	64
/A %	65
/B %	66
/C %	67
/D %	68
/E %	69
/F %	70
/G %	71
/H %	72
/I %	73
/J %	74
/K %	75
/L %	76
/M %	77
/N %	78
/O %	79
/P %	80
/Q %	81
/R %	82
/S %	83
/T %	84
/U %	85
/V %	86
/W %	87
/X %	88
/Y %	89
/Z %	90
/bracketleft %	91
/backslash %	92	% /quotedblleft in TeX text
/bracketright %	93
/circumflex %	94	% /asciicircum in ASCII
/underscore %	95	% /dotaccent in TeX text
/quoteleft %	96	% /grave accent in ANSI
/a %	97
/b %	98
/c %	99
/d %	100
/e %	101
/f %	102
/g %	103
/h %	104
/i %	105
/j %	106
/k %	107
/l %	108
/m %	109
/n %	110
/o %	111
/p %	112
/q %	113
/r %	114
/s %	115
/t %	116
/u %	117
/v %	118
/w %	119
/x %	120
/y %	121
/z %	122
/braceleft %	123	% /endash in TeX text
/bar   %	124	% /emdash in TeX test
/braceright %	125	% /hungarumlaut in TeX text
/tilde %	126	% /asciitilde in ASCII
/dieresis %	127	not used (see 168), use higher up instead
/Lslash	%	128	this position is unfortunate, but now too late to fix
/quotesingle %	129
/quotesinglbase %	130
/florin %	131
/quotedblbase %	132
/ellipsis %	133
/dagger %	134
/daggerdbl %	135
/circumflex %	136
/perthousand %	137
/Scaron %	138
/guilsinglleft %	139
/OE    %	140
/Zcaron %	141
/asciicircum %	142
/minus %	143
/lslash %	144
/quoteleft %	145
/quoteright %	146
/quotedblleft %	147
/quotedblright %	148
/bullet %	149
/endash %	150
/emdash %	151
/tilde %	152
/trademark %	153
/scaron %	154
/guilsinglright %	155
/oe    %	156
/zcaron %	157
/asciitilde %	158
/Ydieresis %	159
/nbspace %	160	% /space (no break space)
/exclamdown %	161
/cent  %	162
/sterling %	163
/currency %	164
/yen   %	165
/brokenbar %	166
/section %	167
/dieresis %	168
/copyright %	169
/ordfeminine %	170
/guillemotleft %	171
/logicalnot %	172
/sfthyphen %	173 % /hyphen (hanging hyphen)
/registered %	174
/macron %	175
/degree %	176
/plusminus %	177
/twosuperior %	178
/threesuperior %	179
/acute %	180
/mu    %	181
/paragraph %	182
/periodcentered %	183
/cedilla %	184
/onesuperior %	185
/ordmasculine %	186
/guillemotright %	187
/onequarter %	188
/onehalf %	189
/threequarters %	190
/questiondown %	191
/Agrave %	192
/Aacute %	193
/Acircumflex %	194
/Atilde %	195
/Adieresis %	196
/Aring %	197
/AE    %	198
/Ccedilla %	199
/Egrave %	200
/Eacute %	201
/Ecircumflex %	202
/Edieresis %	203
/Igrave %	204
/Iacute %	205
/Icircumflex %	206
/Idieresis %	207
/Eth   %	208
/Ntilde %	209
/Ograve %	210
/Oacute %	211
/Ocircumflex %	212
/Otilde %	213
/Odieresis %	214
/multiply %	215	% OE in T1
/Oslash %	216
/Ugrave %	217
/Uacute %	218
/Ucircumflex %	219
/Udieresis %	220
/Yacute %	221
/Thorn %	222
/germandbls %	223 % SS in T1
/agrave %	224
/aacute %	225
/acircumflex %	226
/atilde %	227
/adieresis %	228
/aring %	229
/ae    %	230
/ccedilla %	231
/egrave %	232
/eacute %	233
/ecircumflex %	234
/edieresis %	235
/igrave %	236
/iacute %	237
/icircumflex %	238
/idieresis %	239
/eth   %	240
/ntilde %	241
/ograve %	242
/oacute %	243
/ocircumflex %	244
/otilde %	245
/odieresis %	246
/divide %	247	% oe in T1
/oslash %	248
/ugrave %	249
/uacute %	250
/ucircumflex %	251
/udieresis %	252
/yacute %	253
/thorn %	254
/ydieresis %	255	% germandbls in T1
] def

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (SSPR2002.dvi)
@start
%DVIPSBitmapFont: Fa cmti9 9 47
/Fa 47 122 df<3803800E390FE03F80001F137FA53807601D00001301EBE00301C01300
A200015BEB80060003130E48485A00061318000E1338485B485B48485A48485A00C090C7
FC191773B327> 34 D<EA0380EA0FE0121FA5EA0760120013E013C0A2120113801203EA
07001206120E5A5A5A5A5A0B177A8718> 44 D<121C127F12FFA412FE12380808778718>
46 D<17E0EE01F0A2EE03E0A2EE07C0160F1780EE1F00A2163EA25EA25E15015E4B5AA2
4B5AA24B5A151F93C7FC153EA25DA25DA24A5A14035D4A5AA24A5AA24AC8FCA2143E147E
147C5CA2495AA2495A13075C495AA249C9FCA2133EA25B13FC5B485AA2485AA2485AA248
5A121F90CAFC123EA25AA25AA25A5A2C4B7EB727> I<150E151FA2153F153EA3157E157C
A215FC15F8A2140115F0A2EC03E0A3EC07C0A2EC0F80A2EC1F00A2143EA25C147814F85C
1301903803E0E0ECC1F0EB0781EB0F83EC03E0131E133CEB7C0701F813C0EA01F0EA03E0
3807C00FD80F801380EA1FFC383FFFCF48EBFF82D8F00313FF3860003FC7EA1FF8EC3F00
143EA3147E147CA314FC5CA4146020417DB127> 52 D<1370EA01FC1203A413F8EA00E0
1300B0121C127F5AA45A12380E20779F18> 58 D<EB03F0EB0FFCEB3C0EEBF0073901E0
0380EA03C090388001C0EA0700120E121E121C003C130300381480127800701307EC0F00
00F85B6C133E147E5C48485A387007E0C6485A495A49C7FC13FC485A485A485AEA0F8090
C8FC381E0780A2001C90C7FC5B131E6C5AEA0FF8EA03E0C9FCA7120EEA3F80127FA490C8
FC121C1A3671B527> 63 D<161C163CA2167C16FCA21501821503A2ED077E150F150E15
1CA21538A2157015F015E0EC01C0A2913803807F82EC0700A2140E141E141C5CA25CA25C
49B6FCA25B913880003F49C7EA1F80A2130E131E131C133C13385B13F05B12011203D80F
F0EC3FC0D8FFFE903807FFFEA32F367BB539> 65 D<DB1FF013C09238FFFC010203EBFF
03913A0FF00F878091393F8003CF9139FE0001EF4948EB00FFD903F01500D90FE080495A
49488091C8123E137E13FE485A4848153CA2485AA248481538A2485A94C7FC123F5BA312
7F90CBFCA412FEA2EE03C0A25F127E160794C7FC5E160E007F151E6C5D5E6C6C147016F0
6C6C495A6C6CEB07C06C6C49C8FC6C6C133E6CB413FC90387FFFF0011F13C0D903FEC9FC
323775B437> 67 D<0107B712F05B18E0903A003F80001F1707170392C7FC17015C18C0
147EA214FEA24A130EA20101EC1E03041C13804A91C7FC163C13035E9138F001F891B5FC
5B5EECE0011500130F5E5C1707011F01015BEEC00E0280141E92C7121C133F173C91C812
381778495DA2017E14014C5A01FE14074C5A49141F00014AB45A007FB7FCB8FC94C7FC34
337CB234> 69 D<0107B712E05B18C0903A003F80003F170F170792C7FC17035C188014
7EA214FEA25C161C0101EC3C07043813004A91C7FCA20103147816704A13F0150349B5FC
A25EECE003130F6F5A14C0A2011F13035E1480A2013F90C9FCA291CAFCA25BA2137EA213
FEA25B1201387FFFFCB5FCA233337CB232> I<0107B548B512C0495CA2903C003FC0000F
F0004B5CA292C75BA24A141F60147EA202FE143F95C7FC5CA201015D177E5CA2010315FE
5F5C91B6FC5B5F9138E00001A2010F14035F5CA2011F14075F5CA2013F140F5F91C7FCA2
49141F5F137EA201FE143F94C8FC5B00015D3B7FFFF01FFFFCB55BA23A337BB239> 72
D<010FB51280A216009038003FC05DA292C7FCA25CA2147EA214FEA25CA21301A25CA213
03A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA25BA2137EA213FEA25B12
01B512F8A25C21337BB21E> I<91381FFFFE5C16FC9138003F80A31600A25D157EA315FE
5DA314015DA314035DA314075DA3140F5DA3141F5DA3143F92C7FCA2121C007E5B00FE13
7EA214FE485BEAF80100E05B495A387007E038780FC06C48C8FCEA1FFCEA07F0273579B2
28> I<0107B512C05BA29026003FC0C7FC5DA292C8FCA25CA2147EA214FEA25CA21301A2
5CA21303A25CA21307A25CA2130FA25C17E0011F140117C05C1603013F1580160791C7FC
EE0F005B5E017E143EA201FE5CED01FC4913030001EC1FF8007FB6FCB7FC5E2B337CB230
> 76 D<902607FFC0ED7FFC4917FF81D9003F4B1300611803023BED077CA2027BED0EFC
610273151C1838DAF1F01439F071F014E118E10101ED01C36102C1EC0383EF0703010316
07050E5BEC80F8171C0107ED380F6102001470A249EDE01FDC01C090C7FC130EEE038001
1E017C5C933807003E011C140EA2013C4A137E187C01385C5E017816FC6F485B1370ED3F
C001F0EC80016000011500D807F81503277FFF803E90B512C0B5EB3C01151C46337BB245
> I<902607FF8090383FFFC0496D5BA2D9001F913803F8004A6C6D5A6060EC3BF0027B14
0360EC71F8A202F11407DAF0FC91C7FC14E0A20101017E5B170E14C0810103151EEE801C
EC801FA20107ECC03C030F1338140016E049010713781770010E14F01503011E15F0705A
011C1301A2013C14FD03005B133816FF0178147F5F0170143FA213F070C8FC1201EA07F8
267FFF807FB5140EA23A337BB239> I<0107B612C04915F883903A003F8001FEEE003FEF
1F8092C713C0170F5C18E0147EA214FEEF1FC05CA201011680173F4A1500177E010315FE
5F4AEB03F8EE07E00107EC3FC091B6C7FC16F802E0C9FC130FA25CA2131FA25CA2133FA2
91CAFCA25BA2137EA213FEA25B1201387FFFF0B5FCA233337CB234> 80
D<0107B512FE49ECFFC017F0903A003F8007F8EE01FCEE007E92C7127F835C1880147EA2
14FEEF7F005CA2010115FE5F4A13015F01034A5AEE0FC04A495A04FEC7FC49B512F016C0
9138E003E0ED01F8010F6D7E167C4A137EA2131FA25CA2013F14FEA291C7FCA24913015E
137EEF01C001FE150318805B00011607277FFFF0001400B5ECFE0EEE7E1CC9EA1FF8EE07
E032357BB238> 82 D<913901FC018091380FFF03023F13C791387E07EF903A01F801FF
0049487E4A7F495A4948133E131F91C7FC5B013E143CA3137E1638A293C7FC137FA26D7E
14E014FE90381FFFC06D13F86D7F01017F6D6C7E020F7F1400153F6F7E150FA4120EA200
1E5D121CA2151F003C92C7FCA2003E143E5D127E007F5C6D485A9038C007E039F3F80FC0
00F0B5C8FC38E03FFC38C00FF029377AB42B> I<0003B812C05A1880903AF800FC003F26
0FC001141F0180150F01005B001EEE07001403121C003C4A5BA200380107140E12780070
5CA2020F141E00F0161CC74990C7FCA2141FA25DA2143FA292C9FCA25CA2147EA214FEA2
5CA21301A25CA21303A25CA21307A25C497E001FB512F05AA2323374B237> I<3B3FFFF8
01FFFE485CA2D801FEC7EA1FC049EC0F80170049140EA2161E120349141CA2163C120749
1438A21678120F491470A216F0121F495CA21501123F90C75BA215035A007E5DA2150712
FE4892C7FCA25D150E48141E151C153C153815786C5C5D007C1301007E495A003EEB0F80
6C011EC8FC380FC0FC6CB45A000113E06C6CC9FC2F3570B239> I<B500C090383FFF80A3
D807F8C73807F80049EC03E05F00034B5A94C7FC5E160E5EA25E167816705E7F00014A5A
15035E4BC8FCA2150E151E151C5D7F5D000014F05D4A5AA24A5AA24AC9FC140EA26D5A13
7E5C147814705CA2EB7FC0A25C91CAFCA2133EA2133C1338313570B239> I<B53CC03FFF
F003FFF8601480280FF00001FCC7EA7F806C484AEC3E00193CA219386115036115074E5A
030F140361031D4AC7FCA2DB38FC130EA203705C15F06C6C01E05C140103C05CDA038014
F060DA0700130160020E4A5AA24A4AC8FCA24A140E147802705C5C5FD9F1C014781770D9
F3805CA201F7C7EA7FC0A201FE5DA26C4892C9FCA249147E5B167C5B1678491470453570
B24D> I<013013C0EBF0033901C007003803800E48485A00061318000E1338485B001813
60003813E000305BEA700100605BA2EAE00300DE137800FF13FCA500FE5B383800E01A17
6CB327> 92 D<EB03F0EB0FF890383E1C6090387C0FF0EBF807EA01F0EA03E00007EB03
E0EA0FC0A2381F800715C0EA3F00A2140F481480127EA2141F00FE14005A1506EC3F07EC
3E0F150E147E007C141EECFE1CEB01FCD83C03133C393E07BE38391F0E1E783907FC0FF0
3901F003C0202278A027> 97 D<137EEA0FFE121F5B1200A35BA21201A25BA21203A25B
A21207A2EBC3E0EBCFF8380FDC3EEBF81F497E01E01380EA1FC0138015C013005AA2123E
A2007E131F1580127CA2143F00FC14005AA2147EA25CA2387801F85C495A6C485A495A6C
48C7FCEA0FFCEA03F01A3578B323> I<14FCEB07FF90381F078090383E03C0EBFC013801
F8033803F0073807E00F13C0120F391F80070091C7FC48C8FCA35A127EA312FE5AA4007C
14C0EC01E0A2EC03C06CEB0F80EC1F006C137C380F81F03803FFC0C648C7FC1B2278A023
> I<ED0FC0EC03FFA21680EC001FA31600A25DA2153EA2157EA2157CA215FCA2903803F0
F8EB0FF8EB3E1DEB7C0F496C5AEA01F0EA03E000071303D80FC05BA2381F8007A2D83F00
5BA2140F5A007E5CA2141F12FE4891C7FC1506EC3F075DEC3E0E147E007C141EECFE1CEB
01FCD83C03133C393E07BE38391F0E1E783907FC0FF03901F003C0223578B327> I<EB03
F8EB0FFEEB3E0F9038F807803801F003EA03E0EA07C0120FEA1F801407D83F0013005C00
7E133EEB03F8387FFFE04848C7FC00FCC8FCA45AA4EC0180EC03C0A2007CEB0780EC1F00
003C133E6C13F8380F03E03807FF80D801FCC7FC1A2277A023> I<151FED7FC0EDF0E002
0113F0EC03E3A2EC07C316E0EDC1C091380FC0005DA4141F92C7FCA45C143E90381FFFFE
A3D9007EC7FC147CA414FC5CA513015CA413035CA413075CA3130FA25CA3131F91C8FCA3
5B133E1238EA7E3CA2EAFE7812FC485AEA78E0EA3FC0000FC9FC244582B418> I<143FEC
FF80903803E1E6903807C0FF90380F807FEB1F00133E017E133F49133EA24848137EA248
48137CA215FC12074913F8A21401A2D80FC013F0A21403120715E01407140F141F3903E0
3FC00001137FEBF0FF38007FCF90381F0F801300141FA21500A25C143E1238007E137E5C
00FE5B48485A387803E0387C0F80D81FFFC7FCEA07F820317CA023> I<EB0FC0EA03FFA2
5CEA001FA391C8FCA25BA2133EA2137EA2137CA213FCA29038F83F80ECFFE03901FBE0F0
9038FF80F8EC007849137C485A5B5BA2484813FC5D5BA2000F13015D1380A2001F13035D
EB0007EDC0C048ECC1E0020F13C0003E1481A2007E1483ED0380007C1407160000FC140E
151E48EB07F80070EB01F023357BB327> I<EB0180EB07E0A2130FEB07C0EB038090C7FC
ABEA01F0EA03FCEA0F1E120E121C123C1238EA783E1270A2137EEAF07CEA60FCC65AA212
015BA212035BA2000713C0EBC1E0000F13C01381A21383EB038013071400130E131EEA07
F8EA01F013337AB118> I<1538157C15FCA315701500AB143EECFF80903801E3C0903803
83E0EB0701130FEB0E03131C133C133814071378013013C01300140FA21580A2141FA215
00A25CA2143EA2147EA2147CA214FCA25CA21301A25CA213035C1238387E07C0A238FE0F
804848C7FCEAF83EEA787CEA3FF0EA0F801E4283B118> I<133FEA07FF5A13FEEA007EA3
137CA213FCA213F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380A2121FA2
1300A25AA2123EA2127EA2127C1318EAFC1C133CEAF838A21378137012F013F0EAF8E012
79EA3FC0EA0F00103579B314> 108 D<2703C003F8137F3C0FF00FFE01FFC03C1E783C1F
07C1E03C1C7CF00F8F01F03B3C3DE0079E0026383FC001FC7FD97F805B007001005B5E13
7ED8F0FC90380FC00100E05FD860F8148012000001021F130360491400A200034A130760
49013E130FF081800007027EEC83C0051F138049017C1403A2000F02FC1407053E130049
495CEF1E0E001F01015D183C010049EB0FF0000E6D48EB03E03A227AA03F> I<3903C007
F0390FF01FFC391E787C1E391C7CF01F393C3DE00F26383FC01380EB7F8000781300EA70
7EA2D8F0FC131F00E01500EA60F8120000015C153E5BA20003147E157C4913FCEDF81800
07153C0201133801C013F0A2000F1578EDE070018014F016E0001FECE1C015E390C7EAFF
00000E143E26227AA02B> I<14FCEB07FF90381F07C090383E03E09038FC01F0EA01F839
03F000F8485A5B120F484813FCA248C7FCA214014814F8127EA2140300FE14F05AA2EC07
E0A2007CEB0FC01580141FEC3F006C137E5C381F01F0380F83E03803FF80D800FCC7FC1E
2278A027> I<011E137C90387F81FF9039F3C387C09039E3EF03E03901E1FE01D9C1FC13
F0EBC3F8000313F0018314F814E0EA07871307000313C01200010F130316F01480A2011F
130716E01400A249EB0FC0A2013EEB1F80A2017EEB3F00017F133E5D5D9038FF81F09038
FDC3E09038F8FF80027EC7FC000190C8FCA25BA21203A25BA21207A25BB5FCA325307FA0
27> I<903803F01890380FF83890383E1C7890387C0EF89038F807F0EA01F0EA03E00007
1303D80FC013E0A2EA1F801407D83F0013C0A348130F007E1480A300FE131F481400A35C
143E147E127C14FE495AEA3C03EA3E07EA1F0E3807FCF8EA01F0C7FC13015CA313035CA2
1307A25C48B5FCA25C1D3078A023> I<3903C00FC0390FF03FF0391E78F078391C7DE03C
393C3FC0FC00381380EB7F00007814F8D8707E13701500EAF0FC12E0EA60F812001201A2
5BA21203A25BA21207A25BA2120FA25BA2121FA290C8FC120E1E227AA020> I<EB03F0EB
1FFCEB3C1EEB780FEBF007EA01E0140F0003131F13C0A2EBE00414007FEBFF8014E06C13
F06C13F8EB7FFC1307EB00FE147E143E123800FC133CA3147C00F013784813F0EAF00138
7803E0383C0F80381FFE00EA03F818227AA01F> I<1303EB0F80A3131FA21400A25BA213
3EA2137EA2137C387FFFF8A2B5FC3800F800A21201A25BA21203A25BA21207A25BA2120F
A25B1460001F13F014E01300130114C01303001E1380EB07005BEA0F1EEA07F8EA01E015
307AAE19> I<EA01F0D803FC1307D80F1E5B000E5C121C123C00385CD8783E133E1270A2
017E137ED8F07C137CEA60FCC65A15FC00015C5BA2140100035C13E0166002031370EDE0
F0D807C014E0A20003EB07E116C09038E00FC1EC1FC3000190383FE3809038F071E73A00
7FE0FF0090381F803C24227AA029> I<01F01338D803FC13FCEA0F1E120E121C123C0038
147CEA783E0070143CA2137ED8F07C1338EA60FCC65A1578000114705BA215F0000314E0
5BA2EC01C0A2EBC003158014071500EBE00EA26C6C5A3800F878EB7FE0EB1F801E227AA0
23> I<13F0D803FC1307D80F1E130F000E141F121C123C0038143FD8783E133E1270A201
7E137ED8F07C137CEA60FCC65A15FC000114F85BA21401000314F013E0A2140315E0EA07
C0A20003130715C0EBE00F141F0001133F9038F07F8038007FEFEB1F8FEB001F1500A25C
003E133E007E137E147C5C007C5BEA7001495A38380780D83C1FC7FCEA0FFCEA07F02031
7AA025> 121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi9 9 1
/Fb 1 59 df<123C127E12FFA4127E123C08087A8715> 58 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr6 6 4
/Fc 4 53 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E> 49
D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013
FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600
185A5A383FFFF85AB512F0A216217CA01E> I<13FF000313C0380F03E0381C00F014F800
3E13FC147CA2001E13FC120CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00
F01478147C143E143F1230127812FCA2143E48137E0060137C003813F8381E03F0380FFF
C00001130018227DA01E> I<14E01301A213031307A2130D131D13391331136113E113C1
EA01811203EA07011206120C121C12181230127012E0B6FCA2380001E0A6EB03F0EB3FFF
A218227DA11E> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr5 5 2
/Fd 2 51 df<1360EA01E0120F12FF12F11201B3A3387FFF80A2111C7B9B1C> 49
D<EA03FCEA0FFF383C0FC0387003E0387801F0EAFC0014F8A214781278C712F814F0A2EB
01E0EB03C0EB0780EB0F00131C5B13E03801C018EA0380EA0600481338383FFFF05AB5FC
A2151C7D9B1C> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmr7 7 4
/Fe 4 53 df<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521> 49
D<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15
005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA018039030003
0012065A001FB5FC5A485BB5FCA219267DA521> I<13FF000313E0380F01F8381C007C00
30137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC3800
01E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F01
F03807FFC0C690C7FC19277DA521> I<1438A2147814F81301A2130313071306130C131C
131813301370136013C012011380EA03005A120E120C121C5A12305A12E0B612E0A2C7EA
F800A7497E90383FFFE0A21B277EA621> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmsy7 7 1
/Ff 1 1 df<B712FEA327037A8F34> 0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmmi7 7 9
/Fg 9 115 df<4AB41308020FEBE01891397F80F038903A01F8001870D903E0EB0CF0D9
0F80130749C71203013E15E05B491401485A484815C0485A120F5B001F168090C8FC4892
C7FCA2127EA4127C00FC91387FFFE0A2923800FE00127C5EA21501007E5D123EA27E6C6C
495A6C6C13076C6C130FD801F8131CD800FEEBF06090393FFFC020D907FEC8FC2D2A7DA8
34> 71 D<000FB712E05A9039800FE007D81E009038C001C05A0038011F130012300070
5C00601501023F148012E0481400A2C74890C7FCA2147EA214FEA25CA21301A25CA21303
A25CA21307A25CA2130FA25CA2131F001FB57EA22B287DA727> 84
D<EB1F80EB7FC0EBF0E73803C03FEA078048487EA2121E003E133E123C127CA2485BA448
5B1530A3903801F060A2EA7803010E13C0393C1CF980381FF07F3907C01E001C1B7C9924
> 97 D<133EEA07FEA2EA007CA213FCA25BA21201A25BA2120314FCEBE3FF9038EF0780
D807FC13C0EBF00313E0A2EA0FC014071380A2121FEC0F801300A248EB1F00A2003E1406
143E127EEC7C0C127C151800FCEB3C30157048EB1FE00070EB0F801F297CA727> 104
D<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212605B12C0A2EA
01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F06C5A11287DA6
17> I<1407EC0F80141FA21500140E91C7FCA7EB03E0EB07F8EB0C3C1318EB303E136013
C0A248485AA2C7FCA25CA4495AA4495AA4495AA4495AA21238D87C1FC7FC12FC133E485A
EA70F8EA7FE0EA1F80193380A61B> I<133EEA07FEA2EA007CA213FCA25BA21201A25BA2
1203EC07809038E01FC0EC38600007EB61E014C3EBC187EBC307D80FC613C09038CC0380
01B8C7FC13E0487E13FEEB3F80EB0FC0486C7E1303003E1460A2127EECC0C0127CECC180
12FC903801E30038F800FE0070137C1B297CA723> I<9038F007C03901FC1FF039031E78
780006EBE03C90381FC01C000CEB801E14005B0018141F133E1200137E153E137CA213FC
157C5B1578000114F0A2EC01E0EC03C03903FC07809038FE1F00EBE7FCEBE1F0D807E0C7
FCA25BA2120FA25B121FEAFFF8A22025809922> 112 D<3807803E390FE0FF803818F3C1
3930F703C0EBFE073860FC0F13F8158039C1F0070091C7FC1201A2485AA4485AA4485AA4
48C8FCA2120E1A1B7D991F> 114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi10 10 21
/Fh 21 121 df<4C7E8316031607A2160FA2161FA2163F167FA216DF83ED019FA2ED031F
1507ED060F150CA21518A215301570156015C0A2DA01807FA2EC03005C14064A1307A25C
A25C147014605CA2494880A249C7FC5B1306491403A25BA25B13705BA2D803F081486C14
0FB5D88003B512F0A21400343C7DBB3A> 3 D<0103B812F8A34AC8127F010116076EED01
F0A26D160081027F167081143F81021F1660A281140F8114076F1500140381A214018180
82157FA36FC9FC153E15385D5D4A5A4A5A4AC8120C021E151C023815185C4A1538494815
304948157049C9FC010E5E013C150101704B5A4915074848150F48484B5A48C9127F000E
ED0FFF003FB8C7FC5AB9FC5F3D397BB841> 6 D<133F14C0EB07F06D7E801301A26D7EA3
147FA36E7EA36E7EA36E7EA36E7EA36E7EA36E7EA26E7EA214014A7E5C4A7E91381E3F80
143C14784A6C7E1301EB03E049486C7EEB0F80EB1F00496D7E137E5B48486D7E485A485A
000F6E7E485A485A48C87E12FE167F4816800070151F293B7CB930> 21
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817> 59 D<1760177017F01601A21603A21607160FA24C7EA21633167316
6316C3A2ED0183A2ED0303150683150C160115181530A21560A215C014011580DA03007F
A202061300140E140C5C021FB5FC5CA20260C7FC5C83495A8349C8FC1306A25BA25B1338
5B01F01680487E000716FFB56C013F13FF5EA2383C7DBB3E> 65
D<0103B7FC4916E018F8903B0007F80007FE4BEB00FFF03F80020FED1FC0180F4B15E0F0
07F0021F1503A24B15F81801143F19FC5DA2147FA292C8FCA25C18035CA2130119F84A15
07A2130319F04A150FA2010717E0181F4A16C0A2010FEE3F80A24AED7F00187E011F16FE
4D5A4A5D4D5A013F4B5A4D5A4A4A5A057FC7FC017F15FEEE03FC91C7EA0FF049EC7FC0B8
C8FC16FC16C03E397DB845> 68 D<0103B7FC4916E018F8903B0007F80007FC4BEB00FE
187F020FED3F80F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED7F80A292C81300
18FE4A4A5A604AEC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903FCCAFCA25CA213
07A25CA2130FA25CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FCA33B397DB835>
80 D<0003B812FEA25A903AF8003FC00101C0913880007E4848163C90C7007F141C121E
001C92C7FCA2485CA200305C007017180060130112E0485CA21403C716005DA21407A25D
A2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25C
EB0FFC003FB6FC5AA237397EB831> 84 D<003FB56C48B51280485DA226007F80C7381F
F00091C8EA07C0604993C7FCA2491506A20001160E170C5BA20003161C17185BA2000716
3817305BA2000F167017605BA2001F16E05F5BA2003F15015F5BA2007F150394C8FC90C8
FCA25E4815065A160E160C161C161816385E127E5E4B5A6C4A5A4BC9FC6C6C131E6C6C5B
6C6C13F83903F807E06CB55A6C6C48CAFCEB0FF0393B7BB839> I<267FFFFC91383FFFC0
B55DA2000390C83807FC006C48ED03E06060000094C7FC5F17065FA25F6D5DA26D5D17E0
5F4C5AA24CC8FC6E1306A2013F5C161C16185EA25E6E5BA2011F495A150393C9FC1506A2
5D6E5AA2010F5B157015605DA2ECE18002E3CAFC14F3EB07F614FE5C5CA25C5CA26D5AA2
5C91CBFC3A3B7CB830> I<49B500F890387FFFF095B5FC1AE0D90003018090380FFC004B
C713E00201ED07804EC7FC6E6C140E606F5C705B606F6C485A4D5A031F91C8FCEEE0065F
6F6C5A5F03075B705A16F96FB45A94C9FC6F5AA36F7EA34B7FED037F9238063FC0150E4B
6C7E1538ED700F03E07F15C04A486C7EEC0300020613034A805C4A6D7E14704A13004948
80495A49C86C7E130E011E153F017E4B7ED803FF4B7E007F01E0011FEBFFC0B5FC614439
7EB845> 88 D<B500FC91383FFFE0A3000390C83807FC006CEE03E06C5F4D5A95C7FC6D
6C140E5F5F6D6C14305F5F6D6C495A4CC8FC010F5C6E130E160C01075C6E5B5E6D6C5B15
014B5AD901FE90C9FC15065D6D6C5A5D15706E5A5D5D6ECAFC5CA3147E14FEA35C1301A3
5C1303A35C1307A2130F000FB512F0A25D3B397DB830> I<91B712FCA25B9239E00007F8
4AC7EA0FF0D903F8EC1FE04AEC3FC04AEC7F804A150049485C91C7485A4C5A010E4A5A4C
5A010C4A5A011C4A5A01185D167F4CC7FC90C7485A4B5A4B5A4B5A5E151F4B5A4B5A4BC8
FC4A5A4A5A4A5A5D140F4A5A4A5A4A48130C4AC7FC495A4A141C01031518495A49481438
4948143049481470495A49C812F0495D000115014848140348484A5A4848140F4848141F
4848EC7F804848EB07FF90B7FCB8FC94C7FC36397BB839> I<147E903803FF8090390FC1
C38090391F00EFC0017E137F49133F485A4848EB1F8012075B000F143F48481400A2485A
5D007F147E90C7FCA215FE485C5AA214015D48150CA21403EDF01C16181407007C153800
7E010F1330003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F00
26267DA42C> 97 D<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F00
0E1380121C121812381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B
12035BA20007131813E01438000F133013C01470EB806014E014C01381EB838038078700
EA03FEEA00F815397EB71D> 105 D<150FED3F80A2157FA31600151C92C7FCABEC0F80EC
3FE0ECF0F0903801C0F849487E14005B130E130C131CEB1801133801305BA2EB0003A25D
A21407A25DA2140FA25DA2141FA25DA2143FA292C7FCA25CA2147EA214FEA25CA2130100
1E5B123F387F83F0A238FF87E0495A00FE5BD87C1FC8FCEA707EEA3FF8EA0FC0214981B7
22> I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED
1FF0ED783801FEEBE0F89039FC01C1FCEC0383EC07070001130ED9F81C13F891383803F0
91387001E0000349C7FCEBF1C0EBF38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC0
7F6E7E141F001F80D9800F1330A21670003F011F136001001380A216E04815C0007E1481
020F1380158300FE903807870048EB03FE0038EB00F8263B7CB92B> I<D803E0017F14FE
3D07F801FFE003FFC03D0E3C0781F00F03E03D1C3E1E00F83C01F026383F38D9FC707F00
304914E04A90387DC000007049EB7F8000604991C7FCA200E090C700FE1301485A017E5C
A200000201140301FE5F495CA203031407000160495C180F03075D1203494A011F136019
80030F023F13E00007F000C0495C1901031F023E1380000F1803494A150061033F150E00
1FEF1E1C4991C7EA0FF80007C7000EEC03E043267EA449> 109 D<D803E0137F3A07F801
FFE03A0E3C0781F03A1C3E1E00F826383F387F00305B4A137C00705B00605BA200E090C7
12FC485A137EA20000140101FE5C5BA2150300015D5B15075E120349010F133016C0031F
13700007ED80605B17E0EE00C0000F15014915801603EE0700001FEC0F0E49EB07FC0007
C7EA01F02C267EA432> I<3903E001F83907F807FE390E3C1E07391C3E381F3A183F703F
800038EBE07F0030EBC0FF00705B00601500EC007E153CD8E07F90C7FCEAC07EA2120013
FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC21267EA425> 114
D<903907E001F090391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A0380
0FF07F0100EBE0FF5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8
FCA25CA2147EA214FEA24A130CA20101141C001E1518003F5BD87F81143801835C00FF15
60010714E03AFE0E7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267E
A42F> 120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi6 6 1
/Fi 1 64 df<1308A4131CA500C0EB0180397FBEFF00381FFFFC000713F0000113C06C6C
C7FCA2497E13F73801E3C013C1380380E0EB006000067F00041310487F19197D9820> 63
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmti10 10 18
/Fj 18 119 df<387FFFF8A2B5FCA214F0150579941E> 45 D<14F8EB07FE90381F871C
90383E03FE137CEBF801120148486C5A485A120FEBC001001F5CA2EA3F801403007F5C13
00A21407485C5AA2140F5D48ECC1C0A2141F15831680143F1587007C017F1300ECFF076C
485B9038038F8E391F0F079E3907FE03FC3901F000F0222677A42A> 97
D<147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F0031207
13E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0
007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426> 99
D<ED01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F813
00EB07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F
5DEA3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F15
87007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77
B92A> I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913
F8001F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530
007C14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690
C7FC1D2677A426> I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00FEB0F
80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480A2153F12074914
00A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF39038
0FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F8387C07
E0381FFF80D803FEC8FC24367CA426> 103 D<EB03F0EA01FFA3EA00075CA3130F5CA313
1F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F140048
5A16C05B49EB1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD98001131C
15F8163C003F01031338010013F0A216704814E0007E15F016E0EDE1C000FE903801E380
48903800FF000038143C263B7BB92A> I<EB01C0EB07E014F0130F14E01307EB038090C7
FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B
1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5A
EA07F8EA01E0143879B619> I<EB0FC0EA07FFA3EA001F1480A2133FA21400A25BA2137E
A213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7
FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7CE0121FEA0F8012
3B79B915> 108 D<D801E001FEEB07F03C07F803FF801FFC3C0E3C0F07C0783E3C1E3E3C
03E1E01F261C1F78D9F3C013803C383FF001F7800F02E01400007801C013FE007018C002
805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700495CA2030F5C0001177E
495C18FE031F5C120349DA8001131C18F8033F153C00070403133849020013F0A24B1570
000F17E049017E15F019E003FEECE1C0001FEE01E34949903800FF000007C70038143C3E
2679A444> I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C03E0261C1F787F3938
3FF00114E0007813C000708114804A485AEAF07FEAE07EA20000140701FE5C5BA2150F00
015D5B151F5E12034990383F8380160316070007027F130049137EA2160E000F147C4914
1E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F> I<147F903803FFC090380F
C1F090381F00F8017E137C5B4848137E4848133E0007143F5B120F485AA2485A157F127F
90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0140F007C14C0007EEB1F80
003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A42A> I<9039078007C090
391FE03FF090393CF0787C903938F8E03E9038787FC00170497EECFF00D9F0FE148013E0
5CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A2010F5C5E5C4B5A131F5EEC
80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3FF0EC0F8001FEC9FCA25B
A21201A25BA21203A25B1207B512C0A3293580A42A> I<3903C003F0390FF01FFC391E78
3C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7FCEA
E0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E212679
A423> 114 D<14FE903807FF8090380F83C090383E00E04913F00178137001F813F00001
130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C01300
143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB45A
D801FEC7FC1C267AA422> I<EB0380EB07C0130FA4131F1480A3133F1400A35B137E007F
B5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3121FEB801CA2143C003F
1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F0183579B31C
> I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C0038140F131F007815C012
70013F131F00F0130000E015805BD8007E133FA201FE14005B5D120149137EA215FE1203
49EBFC0EA20201131E161C15F813E0163CD9F003133814070001ECF07091381EF8F03A00
F83C78E090393FF03FC090390FC00F00272679A42D> I<01F0130ED803FC133FD8071EEB
7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E140000E08013FEC6485B15
0E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A140300035C6D48C7FC0001
130E3800F83CEB7FF8EB0FC0212679A426> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmbx12 12 27
/Fk 27 118 df<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5
264177C038> 49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0F
E0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C
5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7
FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8
FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038> I<ECFFF00107
13FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F
16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7
FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0F
C0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D8
0FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038> I<163FA25E
5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C14
F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC123E
5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038> I<EE1F80A24C7EA24C7E
A34C7EA24B7FA34B7FA24B7FA34B7F169F031F80161F82033F80ED3E07037E80157C8203
FC804B7E02018115F0820203814B137F0207815D173F020F814B7F021F8292C77EA24A82
023E80027E82027FB7FCA291B87EA2498302F0C8FCA20103834A157F0107834A153FA249
488284011F8491C97E4984133E017E82B6020FB612F0A54C457CC455> 65
D<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF0F4949
C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F4849163F484916
1F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12FFAE127F7F1AF0A2
123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C
167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001FF80023F90B6C7
FC020715FC020115F0DA001F1480030001F8C8FC44467AC451> 67
D<BA12F8A485D8001F90C71201EF003F180F180318011800A2197E193EA3191EA21778A2
85A405F890C7FCA316011603161F92B5FCA5ED001F160316011600A2F101E01778A2F103
C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807181F4DB5FCBBFC61A443
447DC34A> 69 D<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B5
39E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F
4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C8FC12FF
AD057FB612F0127F7FA3003FDC0001EBF000A27F7EA26C7FA26C7F807E6C7F6C7F6D7E6D
6C5D6D6C7E6D6D5C6D01F05C010101FE143F6D903AFFF001FF9F023F90B6120F0207EDFC
030201EDF000DA001F02C01330030001FCC9FC4C467AC458> 71
D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A> 73
D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E727EA286
84A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC18F818E0
18F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73131F72141E
B700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC354> 82
D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7E
A26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC0100
0313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013E
EBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36> 97
D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813
805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0
A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F
14C0010391C7FC9038003FF82A2F7CAD32> 99 D<EE03FEED07FFA5ED001F160FB1EC3F
E0903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F
4848141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F00
07157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F8902600
7FC0EBF80036467CC43E> I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC0
07FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F
12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB
07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFE
C7FC2C2F7DAD33> I<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE9038
1FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3
B0007FEBFFE0A527467DC522> I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C0
48D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7
FCA2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A16
80D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16
FC7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177FA46D15FF007F
17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC
010F14F8D9007F90C8FC32427DAC38> I<EB7FC0B5FCA512037EB1ED07FE92383FFF8092
B512E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D7E5CA25CA35C
B3A7B60083B512FEA537457CC43E> I<137C48B4FC4813804813C0A24813E0A56C13C0A2
6C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520> I<EB
7FC0B5FCA512037EB3B3B3A3B61280A519457CC420> 108 D<90277F8007FEEC0FFCB590
263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC0
0FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A
5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E> I<90397F8007FEB590383FFF
8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D
7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E> I<EC1FFC49B512C0010714F0011F14
FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F001F82
A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C
6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C0902600
1FFCC8FC312F7DAD38> I<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC91
39FF001FFE000301FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFC
ACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02
CFB512F002C314C002C091C7FCED1FF092C9FCADB67EA536407DAC3E> I<90387F807FB5
3881FFE0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC91
38E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E> 114 D<90391FFC038090B512
87000314FF120F381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E0
90C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F
020313E0140000F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F0090
38F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C> I<EB01E0A51303A413
07A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9
150302F013C0137F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE0
23407EBE2C> I<D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E49
1380017FD901F713FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E
7CAC3E> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmbx10 10 35
/Fl 35 123 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B
> 46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>
49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C0
5AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C0
4A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A01
3EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630> I<EB03FF
011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F012
1F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15
F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E48
7EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6120000
0114FC6C6C13F0010790C7FC27387CB630> I<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0
A2EA3FE0EA0F80C7FCABEA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D25
79A41B> 58 D<DB3FFCEB01C00203B5EAC003021FECF00791B6EAFC0F01039039FC00FF
3F4901C0EB1FFFD91FFEC77E49481403D97FF080494880485B48177F4849153F4890C9FC
181F485A180F123F5B1807127FA24993C7FC12FFAD127F7FF003C0123FA27F001F1707A2
6C6C1780180F6C6D16006C6D5D6C173E6C6D157ED97FF85D6D6C4A5A6DB44A5A010701C0
EB0FE06D01FCEBFF80010090B548C7FC021F14F8020314E09126003FFEC8FC3A3B7BB945
> 67 D<B912F0A426007FF8C7FCEF1FF8170717031701A21700A21878A3043C137C183C
A41800167CA216FC150391B5FCA4ECF8031500167CA2163C180FA3181EA293C7FCA2183E
A2183C187CA218FCA2EF01F81703170F173FEE01FFB9FC18F0A338397DB83F> 69
D<DB3FFCEB01C00203B5EAC003021FECF00791B6EAFC0F01039039FC00FF3F4901C0EB1F
FFD91FFEC77E49481403D97FF080494880485B48177F4849153F4890C9FC181F485A180F
123F5B1807127FA24993C8FC12FFAB043FB61280A2127F7FDC0003EBC000123FA27F121F
A26C7EA26C7F6C7F6C7F7ED97FF85C6D7E6DB45C010701C05B6D01FCEBFF3F010090B5EA
FE0F021FECF8030203ECE0009126003FFEC9FC413B7BB94B> 71
D<B600FC0103B512C0A426007FF8C8381FE00019804EC7FC18FEEF01F84D5A4D5A4D5AEF
3F80057EC8FC5F4C5A4C5AEE0FE0EE1F804CC9FC167E5EED03F84B7E4B7E4B7E4B7F5D02
F9B57EDAFBF77FDAFFE37F15C103807F4A487F4A6D7E4A133F707E707F8482707F707F84
82717E717E8483717F717F858385B600FC017FEBFFE0A443397DB84B> 75
D<B500FC0203B512F0A28080C66C6D90390003F0006F6E5A81017B7F13798101787F6E7E
6E7E6E7F6E7FA26E7F6E7F6E7F6E7F6F7E153F826F13806F13C06F13E06F13F06F13F881
17FCEE7FFEEE3FFF7013817013C17013E18218F17013F97013FDEF7FFF8383A283838383
83187FA2183F181F01FC160FB500FC150718031801A244397DB84B> 78
D<B8FC17F017FEEFFF8028007FF8000F13C0040113E07013F0EF7FF8EF3FFCA2EF1FFEA2
18FFA818FEA2EF3FFCA2EF7FF8EFFFF04C13E0040F13C091B7120017FC17E002F8C9FCB3
A4B612FCA438397DB841> 80 D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF
6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F000713
80380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390F
FFFE1F0003EBF80F39003FE0032A257DA42E> 97 D<13FFB5FCA412077EAF4AB47E020F
13F0023F13FC9138FE03FFDAF00013804AEB7FC00280EB3FE091C713F0EE1FF8A217FC16
0FA217FEAA17FCA3EE1FF8A217F06E133F6EEB7FE06E14C0903AFDF001FF80903AF8FC07
FE009039F03FFFF8D9E00F13E0D9C00390C7FC2F3A7EB935> I<903801FFC0010F13FC01
7F13FFD9FF8013802603FE0013C048485AEA0FF8121F13F0123F6E13804848EB7F00151C
92C7FC12FFA9127FA27F123FED01E06C7E15036C6CEB07C06C6C14806C6C131FC69038C0
7E006DB45A010F13F00101138023257DA42A> I<EE7F80ED7FFFA4150381AF903801FF81
010F13F1013F13FD9038FFC07F0003EB001FD807FC1307000F8048487F5B123FA2485AA3
12FFAA127FA27F123FA26C6C5B000F5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9
011F13E1010313012F3A7DB935> I<903803FF80011F13F0017F13FC3901FF83FE3A03FE
007F804848133F484814C0001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA3
01E0C8FCA4127FA36C7E1678121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07F
C06DB51200010F13FC010113E025257DA42C> I<EC1FF0903801FFFC010713FF90391FF8
7F8090383FE0FFD9FFC113C0A2481381A24813016E1380A2ED3E0092C7FCA8B6FCA40003
90C8FCB3ABB512FEA4223A7DB91D> I<161FD907FEEBFFC090387FFFE348B6EAEFE02607
FE07138F260FF801131F48486C138F003F15CF4990387FC7C0EEC000007F81A6003F5DA2
6D13FF001F5D6C6C4890C7FC3907FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E
123F7F6C7E90B512F8EDFF8016E06C15F86C816C815A001F81393FC0000F48C813804815
7F5A163FA36C157F6C16006D5C6C6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C
91C7FC010713F02B377DA530> I<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91
381F03FFDA3C01138014784A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB9
35> I<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9
B512F8A4153B7DBA1B> I<141FEC7FC0ECFFE0A24913F0A56D13E0A2EC7FC0EC1F0091C7
FCA9EC0FF0EB0FFFA4EB007F143FB3B0121FEA3F80EA7FC0EAFFE0EC7FE0A215C014FF6C
481380903883FE006CB45A000F13F0000113801C4B86BA1D> I<13FFB5FCA412077EB3B3
ACB512FCA4163A7DB91B> 108 D<01FED97FE0EB0FFC00FF902601FFFC90383FFF800207
01FF90B512E0DA1F81903983F03FF0DA3C00903887801F000749DACF007F00034914DE6D
48D97FFC6D7E4A5CA24A5CA291C75BB3A3B5D8FC1FB50083B512F0A44C257DA451> I<01
FEEB7FC000FF903803FFF8020F13FE91381F03FFDA3C011380000713780003497E6D4814
C05CA25CA291C7FCB3A3B5D8FC3F13FFA430257DA435> I<903801FFC0010F13F8017F13
FFD9FF807F3A03FE003FE048486D7E48486D7E48486D7EA2003F81491303007F81A300FF
1680A9007F1600A3003F5D6D1307001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C
6CB5C7FC011F13FC010113C029257DA430> I<9039FF01FF80B5000F13F0023F13FC9138
FE07FFDAF00113800007496C13C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA
17FC161FA217F8163F17F06E137F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFF
F8020F13E0020390C7FC91C9FCACB512FCA42F357EA435> I<9038FE03F000FFEB0FFEEC
3FFF91387C7F809138F8FFC000075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FC
B3A2B512FEA422257EA427> 114 D<90383FF0383903FFFEF8000F13FF381FC00F383F00
03007E1301007C130012FC15787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C
14F81203C614FC131F9038007FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80
019038F007F090B512C000F8140038E01FF81F257DA426> I<130FA55BA45BA25B5BA25A
1207001FEBFFE0B6FCA3000390C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC0
6D1380903803FE001D357EB425> I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25D
A26C5C6E4813E06CD9C03E13FF90387FFFFC011F13F00103138030257DA435> I<B539F0
01FFF8A4000390C7EA3F00161E6E133E6C153C6E137C6C15786E13F8017F5CECF001013F
5C14F8011F495AA2ECFC07010F5CECFE0F010791C7FC6E5A6D131E15BE6D13BC15FC6D5B
A36E5AA26E5AA26E5AA26E5AA22D257EA432> I<B500F1B538803FFFA43D07FE000FF800
03E06C6C010715C082028015076C6E6C148015076C01C0ED0F00826E485C017FED801E5D
90273FF01E7F5B17C0DAF83E147C011F90393C3FE078037C14F8903B0FFC781FF0F0A291
39FEF00FF10107EDF9E002FF14FB6D496CB45AA24B7E6D5EA26D496C90C7FCA292C7FC6E
5CA2023E147C023C143C40257EA445> I<B539F01FFFF0A4000390398003F8006C01C013
E06C1407D97FE05B6D6C485A6E48C7FC90381FFC3E010F5B903807FEFC6D6C5A5D6D5B6D
5B6E7E6E7E814A7EA24A7E903801F3FFD903E37FD907C17FEB0FC049486C7E4A6C7E013E
80496D7E49130F00016E7EB590383FFFF8A42D257EA432> I<B539F001FFF8A4000390C7
EA3F00161E6E133E6C153C6E137C6C15786E13F8017F5CECF001013F5C14F8011F495AA2
ECFC07010F5CECFE0F010791C7FC6E5A6D131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E
5AA26E5AA292C8FCA25C141E003F133E387F803C38FFC07C147814F8EBC1F0EBC3E06C48
5A387D1F80D83FFFC9FCEA1FFCEA07F02D357EA432> I<003FB612C0A3D9F0031380EB80
0749481300003E5C003C495A007C133F5D0078495A14FF5D495B5BC6485B92C7FC495A13
1F5C495A017FEB03C0EBFFF014E04813C05AEC80074813005A49EB0F80485A003F141F48
48133F9038F001FFB7FCA322257DA42A> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmbx9 9 28
/Fm 28 117 df<B512FCA816087F931D> 45 D<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA
3FC0EA0F000C0C7A8B19> I<EB03FE90383FFFE090B512F848EB07FC3903FC01FE48486C
7E4848EB7F8049133F001F15C0A2003F15E049131F007F15F0A500FF15F8B1007F15F0A4
003F15E06D133FA2001F15C0A26C6CEB7F806C6CEBFF006C6C485A3901FF07FC6CEBFFF8
013F13E0D903FEC7FC25327DB02C> 48 D<147814F81303131FEA03FFB5FCA3EAFC1F12
00B3B2007FB512FEA41F317AB02C> I<EB1FFC90B57E000314E0000F14F8391FE03FFC39
3F800FFF48487E6D6C1380D8FFC014C06D7E16E080A36C5A6C5A6CC7FCC8FC16C05C1680
5C16004A5A4A5A5D4A5AEC3FC04A5A02FEC7FC495A495A903907E001E0EB0FC0EB1F8090
383E00034914C05B4848130748B6FC5A5A5A5A5AB71280A423317CB02C> I<EB0FFC9038
7FFF8048B512F03903F01FF83907C00FFE380F8007486C6C7E01F01480123F13F8A5D81F
F014006C485AD803805BC7FC4A5A4A5A4A5AECFFC0013F90C7FC14FCECFFC09038001FF0
EC0FFC6E7E6E7E16806E13C0A2000F15E0EA3FC0EA7FE0EAFFF0A416C0A2495AD87FC014
8049481300003F5B391FF01FFE6CB512F8000314E0C61480D91FFCC7FC23327CB02C> I<
151F5D5DA25D5C5C5C5CA25C143D147D14F9EB01F114E1EB03C1EB0781130FEB1F01133E
133C137813F01201EA03E0EA07C01380EA0F00121E123E5A5AB712FEA4C700031300A801
03B512FEA427317EB02C> I<000C140ED80FE013FE90B5FC5D5D5D5D5D92C7FC14FC14F0
91C8FC1380A6EB87FE9038BFFFC090B512F09038FC0FF89038E003FE01C07F497E010014
80000E6D13C0C8FCA216E0A3121FEA7F807F487EA316C05B5CD87F801480D87C0014006C
5B393F8007FE391FE01FFC0007B512F06C14C0C691C7FCEB1FF823327CB02C> I<EC7FC0
903803FFF0010F13FC90383FE07E90387F801F4848485A4848EBFF8048485A13F8120FEA
1FF0A2123F6E13004848133C92C7FCA2142039FFE1FF8001E713E001EF13F89038FE03FC
496C7E01F87F6E13805B16C0A24914E0A5127FA5123F16C0121F6D1480000F5B01F81400
6C6C485A6C6C485A6CB55A6C6C5B011F13C0D907FEC7FC23327CB02C> I<123C123F90B6
12F8A44815F016E016C0168016005D007CC7127E00785C4A5A00F8495A48495A4A5A4A5A
C7FC4AC7FC147E14FE5C13015C1303A2495AA2130FA2131FA25C133FA4137FA96D5AA201
0FC8FC25337BB12C> I<EB07FE90383FFFC090B512F03903F807FC3907C000FE4848137F
8148C71380151F5A7FA27F7F01F8133F01FE14006D6C5A6CEBE0FEECF1FC6CEBFFF815E0
6C5C6C14F06C806C6C7F48B57E4880D80FF31480D81FE014C0383FC03FEB800F48486C13
E0140148EB007F48143F151FA2150FA216C07E6C141F6D14806C6C133F6DEB7F00391FF8
03FE0007B512F86C5CC66C13C0D90FFCC7FC23327CB02C> I<ED1F80A24B7EA24B7EA34B
7EA24A7FA34A7FA24A7F15CFA2020F7F1587021F801503023F80EC3E01A2027E80EC7C00
02FC804A137FA20101814A133F0103814A131FA249B67EA24981A290271F8000077F91C7
7EA24982013E80017E82017C80A201FC8249157FB500F0013FB512F0A43C347DB343> 65
D<B812FCA4C69038E0001FEE03FE16011600177E173EA2171EA3923803C01F170FA40307
1300A2150F153F91B5FCA4ECE03F150F1507A21503A592C8FCABB612F8A430337DB238>
70 D<B6D8E01FB512FCA4C601E0C7381FFC00B291B7FCA402E0C7121FB3A3B6D8E01FB5
12FCA43E337DB245> 72 D<B712F8EEFF8017E017F8C69039E0007FFCEE0FFE707E7013
80A27013C0A218E0A718C0A24C1380A24C13004C5AEE7FFC91B612F017C04CC7FC02E0C9
FCB3B612E0A433337DB23C> 80 D<003FB812F8A4D9F003EB801FD87F80ED03FC010015
01007E1600007C177CA20078173CA400F8173E48171EA4C71600B3A9011FB612F0A43732
7DB13E> 84 D<EB7FFE0003B512E04814F8390FF00FFC391FF803FF806E138016C0157F
6C5A6C5AEA0180C8FCEC7FFF010FB5FC90B6FC0003EBF07F000F1300EA1FF8485A485A48
5A5BA315FF7F007F5B6D4813E03A3FF80FBFFF000FB5121F0003EBFC0F39007FE0072821
7EA02B> 97 D<EA01FC12FFA4120F1207ADEC07FC91387FFF8001FDB512E09039FFF00F
F89138C007FC91380003FE496D7E496D1380A217C0167FA217E0A917C0A216FF1780A26D
4913006D495A9138C007FC9039F3F01FF801E1B512E0D9C07F13809026800FF8C7FC2B34
7EB331> I<903807FF80013F13F090B512FC3903FE01FE4848487EEA0FF8EA1FF0EA3FE0
A2007F6D5A496C5A153000FF91C7FCA9127F7FA2003FEC07807F6C6C130F000FEC1F00D8
07FE133E3903FF80FCC6EBFFF8013F13E0010790C7FC21217DA027> I<ED01FC15FFA415
0F1507ADEB07FE90383FFFC790B512F70003EB01FF3907FC003F4848131F4848130F4848
1307A2127F5BA212FFA9127FA27F123F150F6C6C131F6C6C133F6C6C497E2603FE03B512
E0C6B512E7013F1387903807FC072B347DB331> I<903803FF80013F13F090B512FC48EB
03FE3907FC007F4848EB3F804848EB1FC05B003FEC0FE0127F5B16F012FF150790B6FCA3
01C0C8FCA4127F7F123F16F06C7E000F14016C6CEB03E0D803FEEB0FC03A01FF807F806C
6CB51200011F13FC010313E024217EA029> I<16F890390FFC07FE90387FFF9F48B6127F
3907FC0FFC380FF003001F14FED9E001133E003FECFF1C1600A6001F5CEBF003000F5C39
07FC0FF890B512E0486C1380D90FFCC7FC48C9FCA37F7F90B512F015FE6CECFF8016E06C
15F06C15F84815FC121F393F80001F48C7EA03FE481401481400A46C14016C6CEB03FC6C
6CEB07F86C6CEB0FF0D80FFCEB7FE00003B61280C6ECFE00010F13E028327EA12C> 103
D<EA03F0487E487E487EA66C5A6C5A6C5AC8FCA8EA01FC12FFA4120F1207B3A5B512C0A4
12357DB418> 105 D<EA01FC12FFA4120F1207B3B3A6B512E0A413347DB318> 108
D<3901F803FF00FF010F13C0023F13F09138FC0FF89039F9E007FC380FFBC06CB4486C7E
1400A25BA25BB2B539E07FFFF0A42C217DA031> 110 D<3901F81F8000FFEB7FF0ECFFF8
9038F9E3FC9038FBC7FE380FFF876C1307A213FEEC03FCEC01F8EC0060491300B1B512F0
A41F217EA024> 114 D<9038FFE1C0000713FF5A383F803F387E000F14075A14037EA26C
6CC7FC13FCEBFFE06C13FC806CEBFF80000F14C06C14E0C6FC010F13F0EB007F140F00F0
130714037EA26C14E06C13076CEB0FC09038C01F8090B5120000F913FC38E03FE01C217D
A023> I<133CA5137CA313FCA21201A212031207001FB51280B6FCA3D807FCC7FCB0EC03
C0A79038FE078012033901FF0F006C13FEEB3FFCEB0FF01A2F7EAE22> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr9 9 74
/Fn 74 124 df<91393FE00FE0903A01FFF83FF8903A07E01EF83C903A1F800FF07E903A
3F001FE0FE017E133F4914C0485A1738484890381F8000ACB812C0A33B03F0001F8000B3
A7486C497EB50083B5FCA32F357FB42D> 11 D<EC1FE0ECFFFC903803F01E90390FC007
80EB1F8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F
150FB3A6486CEB1FE0267FFFC1B5FCA328357FB42B> I<DA1FE013FF9126FFFC0713E090
3B03F01E1F80F0903B0FC0077E003CD91F805B90273F001FF8137E017E4A13FE495CA248
485C030F147C95C7FCA9187EB912FEA33B01F8000FC000187EB3A6486C496C13FF297FFF
C1FFFE0F13F8A33D357FB440> 14 D<003C13F0387E01F838FF03FCA2EB83FEA2EA7F81
383D80F600011306A40003130EEB000CA248131C00061318000E1338000C1330001C1370
4813E0387001C00060138017177EB326> 34 D<14C01301EB0380EB0F00130E5B133C5B
5BA2485A485AA212075B120F90C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123E
A3121E121FA27E7F12077F1203A26C7E6C7EA213787F131C7F130FEB0380EB01C0130012
4A79B71E> 40 D<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C13
3C133EA2131E131FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C1378
13F85BA2485A485AA2485A48C7FC120E5A123C12705A5A124A7CB71E> I<123C127EB4FC
A21380A2127F123D1201A412031300A25A1206120E120C121C5A5A126009177A8715> 44
D<B512F0A514057F921A> I<123C127E12FFA4127E123C08087A8715> I<EB0FE0EB7FFC
EBF83E3903E00F803907C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E
14FCA500FE14FEB2007E14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E0
0F803900F83E00EB7FFCEB0FE01F347DB126> 48 D<13075B5B137FEA07FFB5FC13BFEA
F83F1200B3B3A2497E007FB51280A319327AB126> I<EB3FC0EBFFF0000313FC380F80FF
391E007F80001CEB3FC048EB1FE048130F15F00060130712FC6C14F87E1403A3007E1307
123CC7FC15F0A2140F15E0EC1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC13
3E133C4913185B485A48481330485A48C7FC001C1470001FB512F05A5AB612E0A31D327C
B126> I<EB1FE0EBFFFC4813FF3907E03F80390F001FC0001EEB0FE0001CEB07F0123F01
8013F8140313C01380A2381F0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB
7FE014FCEB003FEC1FC0EC0FE0EC07F015F8140315FC140115FEA3127EB4FCA415FC4813
0312780070EB07F86C14F0003C130F001FEB1FE0390FE03F800003B51200C613FCEB1FE0
1F347DB126> I<EC01C0A214031407A2140F141FA2143F147F146F14CF1301EB038F140F
1307130E130C131C13381330137013E013C0EA0180120313001206120E120C5A12381230
5A12E0B71280A3C7380FC000A94A7E0107B51280A321337EB226> I<000C14C0380FC00F
90B5128015005C5C14F014C0D80C18C7FC90C8FCA9EB0FC0EB7FF8EBF07C380FC03F9038
001F80EC0FC0120E000CEB07E0A2C713F01403A215F8A41218127E12FEA315F0140712F8
006014E01270EC0FC06C131F003C14806CEB7F00380F80FE3807FFF8000113E038003F80
1D347CB126> I<14FE903807FF80011F13E090383F00F0017C13703901F801F8EBF003EA
03E01207EA0FC0EC01F04848C7FCA248C8FCA35A127EEB07F0EB1FFC38FE381F9038700F
809038E007C039FFC003E0018013F0EC01F8130015FC1400A24814FEA5127EA4127F6C14
FCA26C1301018013F8000F14F0EBC0030007EB07E03903E00FC03901F81F806CB51200EB
3FFCEB0FE01F347DB126> I<1230123C003FB6FCA34814FEA215FC0070C7123800601430
157015E04814C01401EC0380C7EA07001406140E5C141814385CA25CA2495A1303A3495A
A2130FA3131F91C7FCA25BA55BA9131C20347CB126> I<EB0FE0EB7FFC90B5FC3903F01F
803907C007C0390F0003E0000EEB01F0001E1300001C14F8003C1478A3123EA2003F14F8
6D13F0EBC001D81FF013E09038F803C0390FFE07803907FF0F006C13DE6C13F87EEB3FFE
8001F713C0D803E313E0D8078013F0390F007FF8001E131F003EEB07FC003C1303481301
EC007E12F848143EA2151EA37E153C1278007C14787E6C14F0390F8003E03907F01FC000
01B5120038007FFCEB1FE01F347DB126> I<EB0FE0EB7FF8EBFFFE3803F83F3907E00F80
390FC007C0D81F8013E0EC03F0EA3F0048EB01F8127EA200FE14FC1400A415FEA5007E13
01A2127F7E1403EA1F80000F13073807C00E3803E01C3801F03838007FF090381FC0FC90
C7FC1401A215F8A215F01403001F14E0383F800715C0140FEC1F809038003F00001C137E
381F01FC380FFFF0000313C0C690C7FC1F347DB126> I<123C127E12FFA4127E123C1200
B0123C127E12FFA4127E123C08207A9F15> I<15E0A34A7EA24A7EA34A7EA3EC0DFE140C
A2EC187FA34A6C7EA202707FEC601FA202E07FECC00FA2D901807F1507A249486C7EA301
066D7EA2010E80010FB5FCA249800118C77EA24981163FA2496E7EA3496E7EA200018216
07487ED81FF04A7ED8FFFE49B512E0A333367DB53A> 65 D<B7FC16E016F83A03FC0003
FE0001EC00FFEE7F80EE3FC0161F17E0160F17F0A617E0161F17C0EE3F80EE7F0016FEED
03FC90B612F05E9039FC0007FCED00FEEE3F80EE1FC0EE0FE017F0160717F8160317FCA6
17F81607A2EE0FF0EE1FE0163FEE7FC00003913803FF00B75A16F816C02E337DB236> I<
DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF0003C7CD91FC0EB0EFCD9
7F80130701FEC7120348481401000315005B4848157C485A173C485A171C123F5B007F16
0CA390C9FC481600AB7E6D150CA3123F7F001F161C17186C7E17386C6C15306C6C15706D
15E012016C6CEC01C0D97F80EB0380D91FC0EB0F00D90FF0131ED903FE13FC0100B512F0
023F13C0DA03FEC7FC2E377CB437> I<B77E16F016FE3A01FE0001FF00009138003FC0EE
0FE0707E707E707E707E177E177FEF3F80A2EF1FC0A3EF0FE0A418F0AA18E0A3171F18C0
A21880173F18005F17FE5F4C5AEE07F04C5AEE3FC000014AB45AB748C7FC16F816803433
7EB23B> I<B812C0A3D803FCC7127F0001150FEE03E01601A21600A21760A403061330A4
1700150EA2151E157E90B512FEA39038FC007E151E150EA21506170CA3171892C7FCA417
38A21770A217F01601160316070003157FB812E0A32E337DB234> I<B81280A3D803FCC7
FC0001151FEE07C01603A21601A21600A41760150CA31700A2151CA2153C15FC90B5FCA3
EBFC00153C151CA2150CA592C8FCAB487EB512FEA32B337DB232> I<DA03FE130C91393F
FF801C91B512E0903A03FE01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC712
0348481401000315005B4848157C485A173C485A171C123F5B007F160CA390C9FC4893C7
FCAA0303B512E07E7F92390003FE00705A123F7F121FA26C7E7F12076C7E7F6C6C14036C
7E6D6C1307D91FC0EB0E7CD90FF0EB1C3CD903FEEBF81C0100B5EAF00C023F01C0C7FCDA
03FEC8FC33377CB43C> I<B5D8FE03B512F8A3000190C73807FC006C486E5AB390B7FCA3
49C71203B3A3486C4A7EB5D8FE03B512F8A335337EB23A> I<B512FEA3000113006C5AB3
B3A7487EB512FEA317337EB21C> I<017FB5FCA39038003FE0EC1FC0B3B1127EB4FCA4EC
3F805A0060140000705B6C13FE6C485A380F03F03803FFC0C690C7FC20357DB227> I<B5
00FE903807FFF8A3000190C7000113006C48EC00FC17F04C5A4C5A4CC7FC160E5E5E5E5E
4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC0EFF5C4A6C7E4A6C7EECE01FD9FFC07F
4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E707E160F83707E707EA283486C913807FF
80B500FE013F13FCA336337EB23C> I<B512FEA3D803FEC9FC6C5AB3A9EE0180A4160317
00A45EA25E5E5E5E16FE00031407B7FCA329337DB230> I<D8FFFC923801FFF86D5DA200
03EFFE00D801BFED06FCA3D99F80140CA2D98FC01418A3D987E01430A2D983F01460A3D9
81F814C0A3D980FCEB0180A2027EEB0300A36E1306A26E6C5AA36E6C5AA36E6C5AA26E6C
5AA36E6C5AA3913800FD80A2037FC7FCA3486C133ED80FF04B7EB5011C90387FFFF8A33D
337CB246> I<D8FFFE91381FFFF87F80C6030013006E143CD9DFE01418EBCFF0A2EBC7F8
EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0
ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FFA2EE7F98EE3FD8A2EE1FF8160F1607A2
16031601A2486C1400D807F81578B500C01438A2171835337EB23A> I<EC07FC91387FFF
C0903901FC07F0903907E000FCD90F80133E013FC76C7E017E6E7E496E7E48486E7E4848
6E7EA248486E7E000F8249157E001F167FA24848ED3F80A2007F17C0A290C9121FA24817
E0AB6C17C06D153FA3003F17806D157FA2001F17006D5D000F5E6C6C4A5AA26C6C4A5A00
015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FCD907E013FC903901FC07F09039007FFF
C0DA07FCC8FC33377CB43C> I<B612FEEDFFC016F03A03FC0007FC0001EC00FE167FEE3F
80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE3F80EE7F0016FEED07F890B65A168001
FCC9FCB3A2487EB512F8A32C337DB234> I<EC07FC91387FFFC0903901FC07F0903907E0
00FC4948137E013FC7EA1F80017E6E7E496E7E48486E7E00038249140148486E7E000F82
49157E001F167FA24848ED3F80A2007F17C0A390C9121F4817E0AB6C17C0A26D153FA200
3F1780A26D157F001F1700A2270FE001F013FE0007D907FC5B9039F00E0E013B03F80C07
03F8000190391C0383F03B00FC180187E0017EECCFC0013FECDF8090271F9C00FFC7FCD9
07EC13FC902701FE07F013609038007FFF913807FC7091C7007813E0A2EE7C01EE7E0393
387F07C0EE3FFFA21880821800705A705AEE01F033447CB43C> I<B612FCEDFF8016F03A
01FE0007FC0000EC01FEED007F707E707E83160F83A65FA24C5AA24C5A047EC7FC4B5AED
0FF090B612C093C8FC9039FE001FC0ED07F06F7E6F7E150082167E167FA583A5180C17C0
A2043F131C486C1618B500FEEB1FE0040F1338933807F070C93801FFE09338003F803635
7EB239> I<90381FE00390387FFC0748B5FC3907F01FCF390F8003FF48C7FC003E808148
80A200788000F880A46C80A27E92C7FC127F13C0EA3FF013FF6C13F06C13FF6C14C06C14
F0C680013F7F01037F9038003FFF140302001380157F153FED1FC0150F12C0A21507A37E
A26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03F800E0B512E0011F138026C0
03FEC7FC22377CB42B> I<007FB712FEA390398007F001D87C00EC003E0078161E007016
0EA20060160600E01607A3481603A6C71500B3AB4A7E011FB512FCA330337DB237> I<B5
00FE90381FFFF8A3000190C813006C48153C1718B3AF1738017F1530A217706D6C146001
1F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC91383FFFF0020F13
C0020190C8FC35357EB23A> I<267FFFFC90B512C0A3000101E090381FF80026007F80EB
0FC0013F6E5A6E91C7FC6D6C130E010F140C6E5B6D6C133801035C6E13606D6C13E06D6C
485A5EDA7F83C8FCEC3FC715C6EC1FECEC0FFC5D14076E7EA26E7E815C6F7E9138063FC0
140E4A6C7E9138180FF0EC380702707F91386003FCECC0010101804A6C7E49C77E498101
0E6E7E010C6E7E131C496E7E01786E7E13FCD807FEEC1FFEB56C90B512F8A335337EB23A
> 88 D<B500F8ECFFFEA300030180EC3FE06C90C8EA1F806CEE0E006D6C5C6D6C141817
386D6C14305F6D6C14E06D6C5C16016D6C5C6D6C49C7FC5E6D6C13065E91387F801C9138
3FC018163891381FE0306E6C5A16E06E6C5AEDF980EC03FF6E90C8FC5D1400B14A7E91B5
12FCA337337FB23A> I<003FB612FCA39039F80007F813C090C7EA0FF0003EEC1FE0123C
0038EC3FC00078EC7F801270EDFF004A5AA20060495AA24A5A4A5AC7FC4A5A4A5AA24A5A
4AC7FCA2495A495AA2495A495AA24948130C495AA2495A49C7FCA24848141CA2485A485A
1638485A4848147816F84848130148481307153FB7FCA326337CB22F> I<EAFFF0A4EAF0
00B3B3B3ADEAFFF0A40C4B79B715> I<0003130C48131C000E1338481370001813600038
13E0003013C0EA700100601380A2EAE00300C01300A400DE137800FF13FCEB83FEA2EA7F
81A2383F00FC001E1378171774B326> I<EAFFF0A41200B3B3B3AD12FFA40C4B7FB715>
I<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01
FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C13
3B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126> 97
D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F8049
EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F0001
CF137C90388381F8903801FFE0C76CC7FC25357EB32B> I<EB07F8EB3FFF9038FC07C039
01F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FEAA12
7FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383FFE00
EB07F01D237EA122> I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF39
07E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C6C
4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B> I<EB0FE0EB7FFCEB
F83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212FE
A2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F003
C03900FC0F00EB3FFEEB07F01D237EA122> I<EB01FCEB07FF90381F078090383E0FC0EB
7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A31A
357FB417> I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F8380
9039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380E
FFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F000100
3EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0C6
B51280D91FFCC7FC22337EA126> I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0
FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B
> I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0
B5FCA310337EB215> I<EB03C0EB07E0EB0FF0A4EB07E0EB03C090C7FCAAEB03F013FFA3
13071303B3B01238127C00FE13E0130714C0130F007C138038381F00EA1FFCEA07F01443
84B217> I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC01E05D4A5A020F
C7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E8114076E7E8114
016E7E81486CEBFF80B500C313F0A324347EB329> I<EA07E012FFA3120F1207B3B3A7EA
0FF0B5FCA310347EB315> I<2703F01FE013FF00FF90267FF80313C0903BF1E07C0F03E0
903BF3803E1C01F02807F7003F387FD803FE1470496D486C7EA2495CA2495CB3486C496C
487EB53BC7FFFE3FFFF0A33C217EA041> I<3903F01FC000FFEB7FF09038F1E0FC9038F3
807C3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538C7FFFCA326217EA02B> I<EB
07F0EB3FFE9038FC1F803901F007C03903C001E000078048486C7E48C7127CA248147E00
3E143E007E143FA300FE1580A8007E1500A36C147EA26C147C6D13FC6C6C485A00075C39
03F007E03900FC1F80D93FFEC7FCEB07F021237EA126> I<3903F03F8000FFEBFFE09038
F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16E0ED07F0A3ED03F8A9150716
F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F381F89038F1FFE0D9F07FC7FC
91C8FCAA487EB512C0A325307EA02B> I<903807F00390383FFC07EBFC0F3901F8038F38
07E001000F14DF48486CB4FC497F123F90C77E5AA25A5AA9127FA36C6C5B121F6D5B000F
5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE090C7FCAAED7F8091380FFFFCA32630
7DA029> I<3803E07C38FFE1FF9038E38F809038E71FC0EA07EEEA03ECA29038FC0F8049
C7FCA35BB2487EB512E0A31A217FA01E> I<EBFF06000713CE381F00FE003C133E48131E
140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFFC014F0000F7F6C7FC67FEB0FFF1300
EC3F8000C0131F140F6C1307A37E15006C5B6C130E6C5B38F7807838E1FFE038C07F8019
237EA11E> I<1330A51370A313F0A21201A212031207381FFFFEB5FCA23803F000AF1403
A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0182F7FAD1E> I<D803F0133F00FFEB
0FFFA30007EB007F000380B35DA35D12016D4813800000903803BFFC90387E073FEB1FFE
D907F8130026227EA02B> I<B5EBFFF0A3D80FF0EB3F800007EC1F000003140E150C6D13
1C00011418A26C6C5BA26D1370017E1360137F6D5BA290381F8180A214C3010F90C7FCA2
EB07E6A214FE6D5AA26D5AA36D5AA2146024217E9F29> I<B53A1FFF81FFF0A33C07F801
FC003F8001F049EB1E0000030100141C816C6C017C1318A26D017E1338000002FE1330A2
90267E01FF5B159F168090263F030F5BA216C0903A1F8607C180A202C613E390260FCC03
90C7FCA2D907FC13F6ECF80116FE6D486C5AA36D481378A36D48133034217F9F37> I<B5
3801FFF8A32603FE0013806C48EB7C0000001478017E1370017F5B90383F81C090381F83
80D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B9038039F809038071FC09038060FE0EB
0C0790381C03F0496C7E01707FEBF000000180000FECFF8026FFFC0313FCA326207F9F29
> I<3A7FFF807FF8A33A07F8001FC00003EC0F800001EC070015066C6C5BA26D131C017E
1318A26D5BA2EC8070011F1360ECC0E0010F5BA2903807E180A214F3010390C7FC14FBEB
01FEA26D5AA31478A21430A25CA214E05CA2495A1278D8FC03C8FCA21306130EEA701CEA
7838EA1FF0EA0FC025307F9F29> I<003FB512F0A2EB000F003C14E00038EB1FC00030EB
3F800070137F1500006013FE495A13035CC6485A495AA2495A495A49C7FC153013FE485A
12035B48481370485A001F14604913E0485A387F000348130F90B5FCA21C207E9F22> I<
B712F8A22502809426> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmr10 10 75
/Fo 75 123 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F
8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A328
01F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30> 11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E> I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F
00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B
7FBA2E> I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C
1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203
C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500
C1B51280A3413B7FBA45> I<001C131C007F137F39FF80FF80A26D13C0A3007F137F001C
131C00001300A40001130101801380A20003130301001300485B00061306000E130E485B
485B485B006013601A197DB92A> 34 D<121C127FEAFF80A213C0A3127F121C1200A412
011380A2120313005A1206120E5A5A5A12600A1979B917> 39 D<146014E0EB01C0EB03
80EB0700130E131E5B5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA6
5AB2127CA67EA3121EA2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB03
80EB01C0EB00E01460135278BD20> I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA2
1378A2137C133C133E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A314
00A25B131EA2133E133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A1352
7CBD20> I<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A120612
0E5A5A5A12600A19798817> 44 D<B512FCA516057F941C> I<121C127FEAFF80A5EA7F
00121C0909798817> I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403
A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C13
03A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203
A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD
2A> I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA2
48C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D
5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7D
B72A> I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879
B72A> I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E123000
706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A
5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A
485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A> I<EB07F8EB3FFF4913C03901F8
0FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D4A
5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A216
C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C495A
121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A> I<1538A215
7815F8A2140114031407A2140F141F141B14331473146314C313011483EB030313071306
130C131C131813301370136013C01201EA038013005A120E120C5A123812305A12E0B712
F8A3C73803F800AB4A7E0103B512F8A325397EB82A> I<0006140CD80780133C9038F003
F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007
E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12
E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC3800
7FFCEB1FE0213A7CB72A> I<EC3FC0903801FFF0010713FC90380FE03E90383F80079038
7E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F90
C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA2491480
16C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C
6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A> I<12301238123E003FB6
12E0A316C05A168016000070C712060060140E5D151800E01438485C5D5DC712014A5A92
C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA5137F
A96DC8FC131E233B7BB82A> I<EB03F8EB1FFF017F13C09038FC07F03901E001F848486C
7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01FC133C
6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F07F3903
E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F0078EC0FE000
F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C131ED807E0137C
3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A> I<EB03F8EB1FFF017F13C09038
FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090C7FCA248EC1F
C0A616E0A56C143FA27F123F001F147FA26C6C13FF3907E001DF0003149F3801F0033900
FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C5BA24A5A4A5A
49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC0233A7DB72A> I<
121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317> I<
121C127FEAFF80A5EA7F00121CC7FCB2121C127F5A1380A4127F121D1201A412031300A2
5A1206A2120E5A121812385A1260093479A317> I<007FB812F8B912FCA26C17F8CCFCAE
007FB812F8B912FCA26C17F836167B9F41> 61 D<EB3FE03801FFFE3907C03F80390E00
0FC0003CEB07F000301303007014F8007C130100FE14FC7EA4127E003CEB03F8C7FCEC07
F0A2EC0FE0EC1F80EC3F00147E147C5C495A5C495A5CA249C7FCA31306AA90C8FCA8130E
EB3F80497EA56D5A010EC7FC1E3B7CBA27> 63 D<1538A3157CA315FEA34A7EA34A6C7E
A202077FEC063FA2020E7FEC0C1FA2021C7FEC180FA202387FEC3007A202707FEC6003A2
02C07F1501A2D901807F81A249C77F167FA20106810107B6FCA24981010CC7121FA2496E
7EA3496E7EA3496E7EA213E0707E1201486C81D80FFC02071380B56C90B512FEA3373C7D
BB3E> 65 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707E
A283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0
707E707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0
B812C094C7FC16F832397DB83B> I<913A01FF800180020FEBE003027F13F8903A01FF80
7E07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F1201
4848151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6D
ED0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D
6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F002
011380313D7BBA3C> I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0FF0EE03
F8707E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A2
18E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F8
16C036397DB83F> I<B812FCA30001903880000F6C90C71201EE007E173E171E170EA317
06A317078316C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A21500A21860
A318E093C712C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9FCA33339
7DB839> I<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170CA4170E
1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692C8FCAD
4813C0B612C0A32F397DB836> I<B648B512FEA30001902680000313006C90C76C5AB3A4
91B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E> 72
D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E> I<B649B5FCA300010180
9038007FF06C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5A
ED0780030EC9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E
14804A6C7E6F7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497F
B6011FEBFF80A339397DB841> 75 D<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517
381730A31770A317F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834> I<B59338
07FFF86E5DA20001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3
A2D9C1FCEC0183A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E
6C1360A26E6C13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED
0FF0A3486C6D5A487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C> I<B5
913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEB
C1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0
ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603
A216011600A2177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E> I<EC03
FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E
01FE6E7E48486E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F
17F0A3007F17F8491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C
6CED3FC0000717806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495A
D907E0EB1F80D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41> I<
B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601
A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FC
B3A5487FB6FCA330397DB839> I<D90FF813C090383FFE0190B512813903F807E33907E0
00F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A36C1400A3
7E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714
C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA216F07E15
036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13
E0D8C00190C7FC253D7CBA2E> 83 D<003FB812E0A3D9C003EB001F273E0001FE130348
EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF8001
1FB612E0A335397DB83C> I<B6903807FFFEA3000101809038007FE06C90C8EA1F80EF0F
001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB
07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80373B7DB83E> I<B500FC
91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E1403017F93C7FCA280
013F1506A26E140E011F150C80010F5DA28001075DA26E147001031560A26D6C5CA2806D
4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C020F1318A26E6C5AA2
15FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E> I<B5D8
FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED03
C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067FA2
6D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE6007
A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0CA2
03E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA20201
5E4B1407A2020093C8FC4B80503B7EB855> I<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D
5378BD17> 91 D<3901800180000313033907000700000E130E485B0018131800381338
003013300070137000601360A200E013E0485BA400CE13CE39FF80FF806D13C0A3007F13
7FA2393F803F80390E000E001A1974B92A> I<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D
537FBD17> I<13101338137C13FE487E3803C780380783C0380F01E0381E00F048137800
70131C48130E00401304170D77B92A> I<EB1FE0EBFFFC3803E03F3907000F80390F8007
E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0
EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18383FC01E3A
0FE0781FF03A03FFF00FE03A007F8007C026277DA52A> 97 D<EA03F012FFA3120F1203
B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001FEEB07E049EB03F049EB01
F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001
C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC0283B7EB92E> I<EB03FC9038
1FFF8090387E03E03901F80070484813F83907E001FC380FC003A2EA1F80123F90380001
F848EB00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C000F141C6C6C13
386C6C13706C6C13E039007C07C090381FFF00EB07F81F277DA525> I<ED0FC0EC03FFA3
EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F4848133F4848131FA2
4848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F
6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B7DB92E> I<EB07F8
EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380FC0004848137CA248C7127E
153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F001F14076C6C130600
07140E6D131CD801F013386C6C137090387E03E090381FFF80903803FC0020277EA525>
I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCAD
B512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19> I<ED03F090390FF00FF89039
3FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A248486C7E
A86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA2
13C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E1403481401
16F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC
01FC39007FFFF0010790C7FC26387EA52A> I<EA03F012FFA3120F1203B0EC0FF0EC3FFC
ECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1
B51280A3293A7EB92E> I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA31207
1203B3AA487EB512C0A312387EB717> I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FC
AAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F
00EA0FFEEA03F8154984B719> I<EA03F012FFA3120F1203B1913801FFFCA39138007FC0
1600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F
496C7E8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A
7EB92C> I<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917> I<2703F00FF0
EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F8026
03F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B500
83B5FCA340257EA445> I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC0
3803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E> I<EB03FE
90380FFF8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090C7
12074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC000
0F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC2527
7EA52A> I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB
07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D
13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB5
12C0A328357EA42E> I<D903F813C090381FFE0190387E07819038FC01C33903F000E300
0714774848133749133F001F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D13
3F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE0
0203B5FCA328357DA42C> I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA
03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421> I<EBFF
03000313E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF
6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303A37E15
806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521> I<1318A51338A3
1378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03
017E13006D5AEB0FFEEB01F81A347FB220> I<D803F0EB07E000FFEB01FFA3000FEB001F
00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF
87903A03FC07E00029267EA42E> I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03
C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5A
A214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>
I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E018C00003023EEB0180A26C
6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF0
38D91F831430150102C3EBF87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F
804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37257EA33C> I<B538807FFF
A33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5A
ECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7E090380383F090380703F8
EB0601496C7E011C137E49137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329
247FA32C> I<B538803FFEA33A0FF8000FF06C48EB07C00003EC03806C7E16007F000014
06A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FB
C7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100FE5B130391C8FC13
06EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C> I<003FB512FCA2EB8003D83E0013F8
003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F150014FE495AA2C6485A495A
A2495A495A495AA290387F000613FEA2485A485A0007140E5B4848130C4848131CA24848
133C48C7127C48EB03FC90B5FCA21F247EA325> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmmib10 10 1
/Fp 1 64 df<14035CA34A7EA54A7EA60070496C1370D8FFF0EC7FF890B7FC003F16E06C
16C000071600000115FC6C6C14F0011F14C0010791C7FC010113FCA2497FA3497F14FDD9
0FF87FECF07F49486C7EECC01F49486C7EEC0007017E6D7E017C130101F0EB0078491438
014014102D2B7FA930> 63 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmbx12 14.4 23
/Fq 23 121 df<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92
B8EA803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC49
4848C9FC4901F8824949824949824949824949824990CA7E494883A2484983485B1B7F48
5B481A3FA24849181FA3485B1B0FA25AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7F
A21B0F6C6D1980A26C1A1F6C7F1C006C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D
4C5A6D6D4C5A6D01FC4C5A6D6DEE7F806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF8
0203903AFFE001FFF0020091B612C0033F93C8FC030715FCDB007F14E0040101FCC9FC52
5479D261> 67 D<BC1280A5D8000701F8C7000114C0F0001F19071901851A7F1A3F1A1F
A2F20FE0A21A07A31A03A318F81BF01A01A497C7FC1701A317031707170F177F92B6FCA5
9238F8007F170F170717031701A317001B3EA31B7CA395C8FCA21BFCA21BF8A21A01A31A
031BF01A071A0FA21A1F1A3FF27FE0F101FF1907191F0603B5FCBCFCA21BC0A34F517CD0
58> 69 D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA
803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848
C9FC4901F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B48
1A3FA24849181FA3485B1B0FA25AA298C8FC5CA2B5FCAE6C057FB712E0A280A36C94C700
3FEBC000A36C7FA36C7FA27E6C7FA26C7F6C7FA26D7E6D7F6D7F6D6D5E6D7F6D01FC93B5
FC6D13FF6D6C6D5C6E01F0EC07FB020F01FEEC1FF10203903AFFF001FFE0020091B6EAC0
7F033FEE001F030703FC1307DB007F02E01301040149CAFC5B5479D26A> 71
D<B812C0A5D8000701F8C7FCB3B3B3B2B812C0A52A527CD132> 73
D<B600FC073FB512FE6F61A26F96B6FCA2D80007F5C00070EF01EFA202EF6DEF03CFA202
E76DEF078FA202E36DEF0F0FA202E16D171EA302E06D173CA26F6C1778A26F6C17F0A26F
6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F00A26F6D151EA26F6D5DA3706C5DA2
706C5DA2706D495AA2706D495AA2706D495AA3706D49C7FCA2706D131EA2706D5BA2716C
5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A27101FFC8FCA3715BA2715BA2725AA2
725AA2D93FFC6F5AB74DB712FEA2725AA2725A77527CD180> 77
D<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB3FFC
48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC0107
1487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA45EA2
6D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC014F0
6C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641> 97
D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEBFFC092B612F002F301017F
913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A824A6E7FA2727EA285A285
84A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B6F495BDACFC04990C7FCDA
87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01FCC8FC90C7000313C04154
7BD24B> I<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001
FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A48
92C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC
3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC
020113E033387CB63C> I<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91
B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980
485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C
6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9
003F13F8020301C049C7FC41547CD24B> I<913803FFC0023F13FC49B6FC010715C04901
817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191
C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01
F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE
903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D> I<DA3FFF14
FF0103B5D8F00713C0010FDAFC1F13E0013FECFF7F90267FFC0F9038FF9FF09026FFE001
EBF83F48496C13E0484990387FF01F4890C7D83FF813E0489338FC0FC0F0078048486E6C
C7FCA2003F82A9001F5EA26C6C4A5AA26C5E6C6D495A6C6D495A6C6D485BDAFC0F5B4890
B6C8FCD803EF14FC01C314F02607C03F90C9FC91CBFCA2120FA37FA213F813FE90B7FC6C
16F817FF18C06C836C836C836D828448B9FC12074848C700031480D81FF8EC003F484815
0748486F13C083485A83A56D5D007F18806D5D003F18006C6C4B5AD80FFEED1FFC6C6C6C
EC7FF86C01E049485A6C01FE011F5B6C6CB71280010F03FCC7FC010115E0D9000F01FCC8
FC3C4F7CB543> 103 D<EB3FF0B5FCA51203C6FCB3A4EE1FFC93B512C0030314F0030F80
92391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA2
5CA45CB3ACB6D8F807B612C0A542537BD24B> I<137F497E000313E0487FA2487FA76C5B
A26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3A6B612E0A51B547BD325> I<
EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225> 108 D<D93FF0D91FFCEDFFE0B5
91B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A3F00
1FFE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3C015
9EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03FB512
FEA567367BB570> I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE07FFC92393F
001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6
D8F807B612C0A542367BB54B> I<913801FFE0021F13FE91B612C0010315F0010F903880
7FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48834890C86C
7EA24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5DA26C5FA26C
5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF807F
FC6D90B55A010015C0023F91C8FC020113E03A387CB643> I<903A3FF001FFE0B5010F13
FE033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D7F92
C76C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FFA2615F616E
4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F1480
031F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B> I<90397FE003FEB590380FFF
80033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3E013FEC6ECC07FECE78014EF15
0014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB537> 114
D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF81307D81FE0130148487F4980
127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13FF15F86C14FF16C06C15F06C
816C816C81C681013F1580010F15C01300020714E0EC003F030713F015010078EC007F00
F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01FE9039FF
C00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C387CB635> I<143EA6147EA414
FEA21301A313031307A2130F131F133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3A9EE
07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B0203
13802A4D7ECB34> I<D93FF8913801FFC0B50207B5FCA50003ED001FC61607B3AE5FA35F
A2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EBFFC0903A0FFFC03F836D90B512
03010114FE6D6C13F8020701E091C7FC42377BB54B> I<007FB500F090387FFFFEA5C66C
48C7000F90C7FC6D6CEC07F86D6D5C6D6D495A6D4B5A6F495A6D6D91C8FC6D6D137E6D6D
5B91387FFE014C5A6E6C485A6EEB8FE06EEBCFC06EEBFF806E91C9FCA26E5B6E5B6F7E6F
7EA26F7F834B7F4B7F92B5FCDA01FD7F03F87F4A486C7E4A486C7E020F7FDA1FC0804A48
6C7F4A486C7F02FE6D7F4A6D7F495A49486D7F01076F7E49486E7E49486E7FEBFFF0B500
FE49B612C0A542357EB447> 120 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop Fq 611 540 a(Inexact) 46 b(Multisubgraph) e(matc) l(hing) i
(using) f(Graph) 902 689 y(Eigenspace) h(and) e(Clustering) i(Mo) t
(dels) p Fp 2974 646 a(?) p Fo 1379 979 a(Serhiy) 27
b(Kosino) n(v) f(and) h(T) -7 b(erry) 27 b(Caelli) p
Fn 641 1153 a(Departmen) n(t) d(of) j(Computing) e(Science,) h(Researc)
n(h) g(Institute) f(for) h(Multimedia) g(Systems) 675
1244 y(\(RIMS\),The) g(Univ) n(ersit) n(y) e(of) j(Alb) r(erta,) f
(Edmon) n(ton,) f(Alb) r(erta,) h(CANAD) n(A) e(T6G) i(2H1) p
Fm 759 1593 a(Abstract.) p Fn 43 w(In) e(this) h(pap) r(er) g(w) n(e) g
(sho) n(w) h(ho) n(w) f(inexact) g(m) n(ultisubgraph) e(matc) n(hing)
759 1685 y(can) 31 b(b) r(e) g(solv) n(ed) g(using) g(metho) r(ds) e
(based) i(on) g(the) f(pro) t(jections) j(of) e(v) n(ertices) g(\(and)
759 1776 y(their) e(connections\)) g(in) n(to) g(the) g(eigenspaces) h
(of) g(graphs) f(-) f(and) h(asso) r(ciated) i(clus-) 759
1867 y(tering) 22 b(metho) r(ds.) e(Our) h(analysis) h(p) r(oin) n(ts) f
(to) h(de\014ciencies) f(of) h(recen) n(t) f(eigensp) r(ectra) 759
1958 y(metho) r(ds) e(though) g(demonstrates) g(just) h(ho) n(w) g(p) r
(o) n(w) n(erful) g(full) h(eigenspace) g(metho) r(ds) 759
2050 y(can) 31 b(b) r(e) g(for) h(pro) n(viding) f(\014lters) g(for) h
(suc) n(h) e(computationally) h(in) n(tense) g(problems.) 759
2141 y(Also) f(presen) n(ted) e(are) i(some) f(applications) h(of) g
(the) f(prop) r(osed) g(metho) r(d) f(to) h(shap) r(e) 759
2232 y(matc) n(hing,) d(information) g(retriev) l(al) g(and) f(natural)
h(language) h(pro) r(cessing.) p Fl 523 2502 a(Keyw) m(ords:) p
Fo 27 w(Multisubgraph) g(matc) n(hing,) g(eigenspaces,) g(clustering.) p
Fk 523 2774 a(1) 112 b(In) m(tro) s(duction) p Fo 523
2978 a(Inexact) 20 b(graph) f(matc) n(hing) h(is) h(a) f(fundamen) n
(tal) g(task) g(in) h(a) f(v) -5 b(ariet) n(y) 19 b(of) i(application) f
(domains) 523 3078 y(including) 29 b(shap) r(e) g(matc) n(hing,) f
(handwritten) h(c) n(haracter) e(recognition,) h(natural) g(language)
523 3178 y(pro) r(cessing,) 36 b(to) g(name) h(a) f(few.) i(Naturally)
-7 b(,) 36 b(there) h(exist) f(n) n(umerous) g(b) r(oth) i(general) d
(and) 523 3277 y(application-sp) r(eci\014c) 26 b(approac) n(hes) f
(for) h(solving) g(the) i(problem) e(of) h(inexact) g(graph) f(matc) n
(h-) 523 3377 y(ing.) 35 b(Ho) n(w) n(ev) n(er,) f(the) i(task) e
(still) i(presen) n(ts) f(a) g(substan) n(tial) g(c) n(hallenge,) f
(and) h(there) g(still) h(is) 523 3477 y(ro) r(om) 30
b(for) g(impro) n(v) n(emen) n(t) f(in) i(some) f(of) g(the) h
(existing) f(metho) r(ds.) h(Our) f(w) n(ork) f(attempts) i(to) 523
3576 y(demonstrate) 38 b(the) g(p) r(o) n(w) n(er) g(of) g(com) n
(bining) g(eigenspace) f(graph) g(decomp) r(osition) h(mo) r(dels) 523
3676 y(with) 24 b(clustering) f(tec) n(hniques) g(to) h(solv) n(e) e
(this) i(problem.) f(But) h(b) r(efore) g(pro) n(viding) e(a) h
(detailed) 523 3776 y(description) 28 b(of) g(the) g(prop) r(osed) f
(metho) r(d,) i(it) f(is) g(b) r(ene\014cial) g(to) g(put) h(our) e(w) n
(ork) g(brie\015y) g(in) n(to) 523 3875 y(the) h(con) n(text) f(of) h
(previously) e(dev) n(elop) r(ed) h(solutions.) 648 3976
y(A) 33 b(rather) g(generalized) f(view) h(p) r(oin) n(t) g(adopted) h
(b) n(y) f(Bunk) n(e[1]) f(p) r(oses) h(the) h(task) f(of) g(in-) 523
4076 y(exact) k(graph) f(matc) n(hing) h(as) g(a) f(problem) h(of) h
(structural) e(pattern) h(recognition.) f(In) i(this) 523
4175 y(w) n(ork,) 23 b(the) h(author) f(has) g(studied) h
(error-toleran) n(t) d(graph) h(matc) n(hing) i(using) p
Fj 23 w(gr) l(aph) k(e) l(dit) e(dis-) 523 4275 y(tanc) l(e) p
Fo(,) 34 b(a) f(concept) g(that) h(pro) n(vides) e(a) i(measure) e(of) i
(dissimilarit) n(y) f(of) g(t) n(w) n(o) g(giv) n(en) g(en) n(tities)
523 4374 y(and) 28 b(has) g(its) g(origins) f(in) i(the) g(domain) f
(of) g(strings.) f(Here,) h(a) g(pair) g(of) g(graphs) f(is) h
(compared) 523 4474 y(b) n(y) f(\014nding) g(a) g(sequence) f(of) h
(edit) h(op) r(erations,) d(suc) n(h) i(as) f(edge/v) n(ertex) f
(deletion,) j(insertion) 523 4574 y(or) j(substitution,) i(that) f
(transforms) f(one) h(graph) f(in) n(to) h(the) g(other,) g(whereas) f
(the) h(dissim-) 523 4673 y(ilarit) n(y) -7 b(,) 32 b(or) g(distance,) g
(of) h(the) g(t) n(w) n(o) f(graphs) f(is) i(said) f(to) h(b) r(e) g
(the) g(minim) n(um) g(p) r(ossible) f(cost) 523 4773
y(of) c(suc) n(h) g(a) g(transformation.) f(Other) g(imp) r(ortan) n(t)
h(notions) g(dev) n(elop) r(ed) g(b) n(y) g(Bunk) n(e) f(are) h(the) 523
4873 y(w) n(eigh) n(ted) 38 b(mean) g(and) h(generalized) e(median) h
(of) h(a) f(pair) g(of) h(graphs[5],) d(whic) n(h) j(allo) n(w) e(a) p
523 4930 473 4 v Fi 544 4984 a(?) p Fn 606 5016 a(This) 26
b(pro) t(ject) h(w) n(as) g(funded) d(b) n(y) h(a) h(gran) n(t) g(from)
f(the) h(NSER) n(C) f(Canada.) p 90 rotate dyy eop
%%Page: 2 2
2 1 bop Fo 523 540 a(range) 24 b(of) h(w) n(ell-established) f(tec) n
(hniques) g(from) h(statistical) g(pattern) f(recognition,) g(suc) n(h)
h(as) 523 639 y(clustering) e(with) i(self-organizing) d(maps,) i(to) g
(b) r(e) g(applied) g(in) h(the) f(domain) g(of) g(graphs.) f(In) h(a)
523 739 y(w) n(a) n(y) i(similar) g(to) g(the) i(w) n(ork) d(of) i
(Bunk) n(e) f(is) h(the) g(e\013ort) g(of) f(Tirthapura) g(et) h
(al.[14],) f(who) g(suc-) 523 839 y(cessfully) 32 b(deplo) n(y) n(ed) f
(the) h(classical) f(Lev) n(ensh) n(tein) g(distance) h(in) h(matc) n
(hing) e(sho) r(c) n(k) g(graphs) 523 938 y(that) d(represen) n(t) e
(2D) i(shap) r(es.) 648 1038 y(Another) 18 b(elegan) n(t) f(and) h
(theoretically) g(w) n(ell-grounded) f(approac) n(h) f(to) i(subgraph) f
(matc) n(h-) 523 1137 y(ing) i(is) f(that) h(dev) n(elop) r(ed) f(b) n
(y) h(Hanco) r(c) n(k) f(et) h(al.[6],) f(who,) g(instead) h(of) f
(going) g(further) g(with) i(goal-) 523 1237 y(directed) 28
b(searc) n(h,) e(adopt) i(a) f(probabilistic) h(framew) n(ork) e(and) h
(use) h(optimization) g(metho) r(ds) 523 1337 y(to) e(solv) n(e) f(the)
i(graph) e(matc) n(hing) h(problem.) g(That) g(is,) g(b) n(y) g(mo) r
(delling) g(the) h(corresp) r(ondence) 523 1436 y(errors) k(encoun) n
(tered) h(during) h(graph) f(matc) n(hing) g(with) i(the) f(aid) g(of) g
(the) h(Bernoulli) e(prob-) 523 1536 y(abilit) n(y) e(distribution,) g
(the) g(authors) e(are) h(able) h(to) g(devise) f(a) g(graph) g(matc) n
(hing) g(lik) n(eliho) r(o) r(d) 523 1636 y(function) 22
b(that) f(allo) n(ws) f(one) g(to) h(estimate) g(the) h(conditional) e
(lik) n(eliho) r(o) r(d) h(of) g(one) g(graph) f(giv) n(en) 523
1735 y(the) 27 b(other) g(and) f(reco) n(v) n(er) f(the) i(b) r(est) g
(p) r(ossible) g(graph) e(no) r(de) i(corresp) r(ondence) e(b) n(y) i
(means) f(of) 523 1835 y(Exp) r(ectation-Maximization) g(\(EM\)) i(and)
f(Singular) g(V) -7 b(alue) 27 b(Decomp) r(osition) h(\(SVD\).) 648
1934 y(There) 38 b(also) g(exists) h(a) g(whole) g(family) g(of) h
(graph) e(matc) n(hing) g(tec) n(hniques,) i(generally) 523
2034 y(kno) n(wn) c(as) g(sp) r(ectral) g(metho) r(ds,) h(that) g(seek)
f(to) h(represen) n(t) f(and) g(distinguish) h(structural) 523
2134 y(prop) r(erties) 27 b(of) h(graphs) f(using) h(eigen) n(v) -5
b(alues) 27 b(and) h(eigen) n(v) n(ectors) d(of) j(graph) f(adjacency) h
(ma-) 523 2233 y(trices.) j(The) g(most) g(v) -5 b(aluable) 31
b(c) n(haracteristics) e(of) j(suc) n(h) e(metho) r(ds) i(include) g(b)
r(eing) f(in) n(v) -5 b(ari-) 523 2333 y(an) n(t) 32
b(to) h(edge/v) n(ertex) d(reordering,) h(abilit) n(y) h(to) g(map) h
(a) f(graph's) f(structural) h(information) 523 2433
y(in) n(to) e(lo) n(w) n(er-dimensional) e(spaces) h(and) h(stabilit) n
(y) g(under) g(minor) g(p) r(erturbations.) f(On) h(top) 523
2532 y(of) i(that,) h(the) g(eigendecomp) r(osition) e(tec) n(hnique) h
(itself) h(is) f(far) g(less) g(computationally) g(ex-) 523
2632 y(p) r(ensiv) n(e) e(as) g(compared) f(to) h(the) g(adv) -5
b(anced) 30 b(com) n(binatorial) f(searc) n(h) f(pro) r(cedures.) h
(Among) 523 2731 y(recen) n(t) i(dev) n(elopmen) n(ts) g(in) h(this) h
(\014eld) f(are) f(the) h(Umey) n(ama's[15]) e(form) n(ulation) h(for) g
(same-) 523 2831 y(size) 20 b(graph) g(matc) n(hing) g(that) h(deriv) n
(es) e(the) i(minim) n(um) h(di\013erence) e(p) r(erm) n(utation) g
(matrix) h(via) 523 2931 y(eigendecomp) r(osition) 28
b(tec) n(hniques,) h(Shapiro) g(and) g(Brady's[10]) e(metho) r(d) j
(for) e(comparing) 523 3030 y(graphs) h(according) g(to) i(the) g
(corresp) r(onding) d(v) -5 b(alues) 30 b(of) h(the) g(rearranged) d
(eigen) n(v) n(ectors) g(of) 523 3130 y(graph) h(adjacency) h
(matrices,) g(and) g(the) h(w) n(ork) f(of) g(Dic) n(kinson) g(et) h
(al.[11]) e(on) i(indexing) f(hi-) 523 3230 y(erarc) n(hical) c
(structures) h(with) h(top) r(ological) e(signature) h(v) n(ectors) f
(obtained) i(from) f(the) h(sums) 523 3329 y(of) g(adjacency) e(matrix)
h(eigen) n(v) -5 b(alues.) 648 3429 y(Similarly) 31 b(to) h(the) g(ab) r
(o) n(v) n(e) e(con) n(tributions,) h(our) g(w) n(ork) g(b) r(orro) n
(ws) f(hea) n(vily) h(from) g(graph) 523 3528 y(eigendecomp) r
(ositions.) f(The) g(prop) r(osed) g(mo) r(del) h(is) g(based) f(up) r
(on) h(the) g(fundamen) n(tal) g(idea) 523 3628 y(that) j(graph) e
(matc) n(hing) h(need) h(not) f(b) r(e) h(p) r(osed) f(as) g(a) g(com) n
(binatorial) f(matc) n(hing) h(problem) 523 3728 y(but,) 19
b(rather,) f(as) g(one) g(of) p Fj 18 w(clustering) k(c) l(ommon) g(lo)
l(c) l(al) g(r) l(elational) h(structur) l(es) p Fo 17
w(b) r(et) n(w) n(een) 18 b(di\013er-) 523 3827 y(en) n(t) 25
b(graphs.) f(This) h(results) f(in) h(a) g(natural) f(grouping) f(b) r
(et) n(w) n(een) i(v) n(ertices) f(of) h(quite) g(di\013eren) n(t) 523
3927 y(graphs) i(whic) n(h) i(share) f(similar) f(relational) h(prop) r
(erties.) g(W) -7 b(e) 29 b(sho) n(w) e(ho) n(w) h(to) h(do) f(this) h
(using) 523 4027 y(pro) 5 b(jection) 25 b(principles) i(as) e(used) i
(in) f(SVD) i(where) e(v) n(ertex) f(v) n(ectors) g(from) h(di\013eren)
n(t) g(graphs) 523 4126 y(can) h(b) r(e) h(pro) 5 b(jected) 27
b(in) n(to) h(common) f(eigen) n(v) n(ector) e(subspaces.) p
Fk 523 4378 a(2) 112 b(Graph) 38 b(Eigenspace) g(metho) s(ds) p
Fl 523 4564 a(2.1) 95 b(Eigensp) s(ectra) 31 b(and) h(eigen) m(v) m
(ectors) g(of) f(graphs) p Fo 523 4717 a(As) j(men) n(tioned) g(ab) r
(o) n(v) n(e,) f(the) h(basic) g(tec) n(hnique) g(deplo) n(y) n(ed) f
(in) h(the) h(ma) 5 b(jorit) n(y) 33 b(of) h(sp) r(ectral) 523
4816 y(metho) r(ds) 23 b(is) g(eigendecomp) r(osition.) g(In) g
(general,) f(for) g(undirected) i(graphs,) e(it) h(is) g(expressed) 523
4916 y(as) k(follo) n(ws:) p Fh 1749 5016 a(A) p Fo 23
w(=) p Fh 23 w(V) 19 b(D) r(V) p Fg 2127 4981 a(T) p
Fo 3299 5016 a(\(1\)) p 90 rotate dyy eop
%%Page: 3 3
3 2 bop Fo 523 540 a(where) p Fh 29 w(A) p Fo 29 w(is) 29
b(the) h(square) e(symmetric) h(adjacency) f(matrix) h(of) g(a) f
(graph,) h(whose) f(en) n(try) p Fh 29 w(a) p Fg 3347
552 a(ij) p Fo 523 639 a(at) 36 b(the) g(place) f(\() p
Fh(i) p Fo(,) p Fh(j) p Fo 5 w(\)) h(is) g(equal) f(to) h(one) f(if) i
(there) e(exists) h(an) f(edge) h(that) g(connects) f(v) n(ertex) p
Fh 523 739 a(i) p Fo 31 w(with) d(v) n(ertex) p Fh 30
w(j) p Fo 5 w(,) f(and) g(zero) f(otherwise;) p Fh 30
w(V) p Fo 50 w(is) h(an) g(orthogonal) e(matrix) i(whose) f(columns) 523
839 y(are) 36 b(normalized) g(eigen) n(v) n(ectors) f(of) p
Fh 37 w(A) p Fo(,) i(and) p Fh 37 w(D) p Fo 39 w(is) g(a) g(diagonal) e
(matrix) i(con) n(taining) f(the) 523 938 y(eigen) n(v) -5
b(alues) p Fh 35 w(\025) p Fg 1009 950 a(i) p Fo 1073
938 a(of) 36 b(matrix) p Fh 35 w(A) p Fo(.) g(The) g(set) g(of) g(the) h
(eigen) n(v) -5 b(alues) 34 b(found) j(on) e(the) i(diagonal) 523
1038 y(of) 31 b(matrix) p Fh 31 w(D) p Fo 33 w(is) h(called) f(the) g
(sp) r(ectrum) h(of) p Fh 31 w(A) p Fo(,) g(and) f(hence) g(the) h
(common) f(name) g(for) g(the) 523 1137 y(family) d(of) f(metho) r(ds.)
648 1246 y(One) k(of) h(the) g(most) f(w) n(ell-kno) n(wn) g(prop) r
(erties) f(of) i(eigendecomp) r(osition,) f(and) g(the) h(one) 523
1345 y(that) 22 b(has) g(attracted) f(researc) n(hers') e(atten) n
(tion) j(for) f(the) h(purp) r(ose) g(of) g(solving) f(inexact) g
(graph) 523 1445 y(matc) n(hing) 32 b(task) g(in) h(the) f(\014rst) h
(place,) f(is) g(that) h(an) f(eigen) n(v) -5 b(alue) 31
b(sp) r(ectrum) i(of) f(a) g(matrix) g(is) 523 1544 y(in) n(v) -5
b(arian) n(t) 38 b(with) h(resp) r(ect) g(to) f(similarit) n(y) g
(transformations,) f(i.e.) i(for) g(an) n(y) f(non-singular) 523
1644 y(matrix) p Fh 26 w(P) p Fo 12 w(,) 27 b(the) f(pro) r(duct) h
(matrix) p Fh 26 w(P) 12 b(AP) p Ff 1820 1614 a(\000) p
Fe(1) p Fo 1936 1644 a(has) 26 b(the) g(same) g(eigen) n(v) -5
b(alues) 26 b(as) p Fh 26 w(A) p Fo(.) h(F) -7 b(rom) 26
b(the) 523 1744 y(view) 21 b(p) r(oin) n(t) h(of) g(the) g(graph) e
(matc) n(hing) h(problem,) g(this) h(means) f(that) h(the) g(deriv) n
(ed) f(sp) r(ectrum) 523 1843 y(of) 29 b(a) g(graph) f(represen) n(ted)
g(b) n(y) h(its) h(adjacency) e(matrix) h(is) g(not) g(a\013ected) h(b)
n(y) f(an) n(y) f(arbitrary) 523 1943 y(v) n(ertex) 22
b(reorderings,) f(whose) i(in\015uence,) h(or) e(rather) g(lac) n(k) h
(thereof,) g(is) g(in) h(essence) e(captured) 523 2043
y(b) n(y) 27 b(the) h(ab) r(o) n(v) n(e) f(v) n(ertex) f(p) r(erm) n
(utation) h(matrix) p Fh 28 w(P) p Fo 12 w(.) 648 2151
y(Still,) h(regardless) d(of) j(ho) n(w) n(ev) n(er) d(elegan) n(t) i
(the) h(p) r(ossible) f(graph) g(matc) n(hing) g(problem) g(so-) 523
2250 y(lutions) 35 b(seemed) f(at) g(\014rst) g(in) h(terms) f(of) h
(graph) e(eigensp) r(ectra,) h(it) h(w) n(as) e(pro) n(v) n(en) g
(early) g(on) 523 2350 y(that) 28 b(the) g(sp) r(ectra) g(of) g(graphs)
e(are) h(not) h(unique.) g(An) g(ob) n(vious) f(example) g(that) h
(dates) g(bac) n(k) 523 2450 y(to) i(as) g(far) g(as) g(1957) e(w) n
(as) i(disco) n(v) n(ered) e(b) n(y) i(Collatz) g(and) h(Sinogo) n
(witz[2],) d(and) j(is) f(sho) n(wn) g(in) 523 2549 y(Figure) d(1.) 783
3126 y @beginspecial 0 @llx 0 @lly 593 @urx 135 @ury
2834 @rwi 425 @rhi @setspecial
%%BeginDocument: cospectral.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: cospec-new.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Fri Jan 11 20:21:58 2002
%%For: serhiy@eva143a (Serhiy M Kosinov)
%%BoundingBox: 0 0 593 135
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 135 moveto 0 0 lineto 593 0 lineto 593 135 lineto closepath clip newpath
-2.0 133.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06299 0.06299 sc
%
% Fig objects follow
%
15.000 slw
% Ellipse
n 252 213 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 264 1040 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 1117 1049 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 2205 1035 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 3107 1837 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 3075 192 194 194 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 270 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 1125 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3195 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3105 1845 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 3060 180 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 5265 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 4455 225 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 4410 1845 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6075 225 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 259 214 178 178 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 2205 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 270 1890 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6075 1845 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6547 1012 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 7762 1012 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 9225 1035 194 194 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Polyline
n 2340 1080 m
 2340 1080 l  cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 405 360 m
 990 945 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 450 1035 m
 945 1035 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 450 1800 m
 990 1170 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 1305 1035 m
 2025 1035 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 2340 900 m
 2925 315 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 2385 1035 m
 3015 1035 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 2340 1170 m
 2925 1755 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 4545 1710 m
 5130 1125 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 4590 360 m
 5130 900 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 5940 360 m
 5400 900 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 5940 1710 m
 5400 1170 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 5445 1035 m
 6390 1035 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 6750 1035 m
 7605 1035 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 7965 1035 m
 9045 1035 l gs 0.00 setgray ef gr gs col0 s gr 
$F2psEnd
rs

%%EndDocument
@endspecial Fm 1039 3300 a(Fig.) 14 b(1.) p Fn 26 w(t) n(w) n(o) 26
b(di\013eren) n(t) f(graphs) h(with) g(iden) n(tical) g(eigensp) r
(ectra) p Fo 648 3612 a(The) 19 b(ab) r(o) n(v) n(e) g(\014gure) g
(depicts) h(t) n(w) n(o) f(non-isomorphic) f(graphs,) g(that) i(are) f
(nev) n(ertheless) g(co-) 523 3712 y(sp) r(ectral,) k(i.e.) g(the) g
(sets) g(of) g(eigen) n(v) -5 b(alues) 22 b(of) h(their) g(adjacency) f
(matrices) g(are) g(iden) n(tical,) h(and) 523 3812 y(therefore) i(the)
i(t) n(w) n(o) e(graphs) g(cannot) h(b) r(e) g(distinguished) h(b) n(y)
f(relying) f(exclusiv) n(ely) g(on) h(their) 523 3911
y(sp) r(ectra.) k(F) -7 b(urthermore,) 29 b(Sc) n(h) n(w) n(enk[9]) g
(demonstrated) h(that) g(as) g(the) h(n) n(um) n(b) r(er) f(of) g(v) n
(ertices) 523 4011 y(gets) 18 b(large,) g(the) h(probabilit) n(y) f(of)
h(o) r(ccurrence) e(of) i(a) g(non-isomorphic) e(co-sp) r(ectral) g
(subgraph) 523 4111 y(pair) 32 b(in) h(an) n(y) e(t) n(w) n(o) h
(graphs) f(b) r(eing) i(compared) e(asymptotically) h(approac) n(hes) e
(unit) n(y) -7 b(.) 33 b(This) 523 4210 y(means) 27 b(that) g(pure) g
(sp) r(ectral) g(metho) r(ds) g(based) g(solely) f(on) h(eigen) n(v) -5
b(alues) 26 b(are) g(generally) g(not) 523 4310 y(ric) n(h) h(enough) g
(to) g(fully) i(represen) n(t) d(graph) g(structure) h(v) -5
b(ariabilit) n(y) e(.) 648 4418 y(Naturally) g(,) 35
b(the) h(ab) r(o) n(v) n(e) f(argumen) n(ts) g(do) g(not) h(add) g
(supp) r(ort) g(for) f(sp) r(ectral) h(metho) r(ds.) 523
4518 y(Ho) n(w) n(ev) n(er,) 31 b(it) i(is) g(not) f(so) g(di\016cult) i
(to) e(see) h(that) g(this) g(lac) n(k) e(of) i(uniqueness) f(can) h(b)
r(e) g(easily) 523 4617 y(o) n(v) n(ercome) 18 b(b) n(y) j(using) f
(graph) g(sp) r(ectra) g(together) f(with) j(the) f(set) f(of) h(asso) r
(ciated) e(eigen) n(v) n(ectors,) 523 4717 y(or) 34 b(ev) n(en) f(b) n
(y) h(relying) g(on) g(the) h(eigen) n(v) n(ectors) d(alone) h(\(see) i
(Equation) e(1\).) h(Another) g(dra) n(w-) 523 4816 y(bac) n(k) 27
b(usually) h(attributed) h(to) f(the) h(sp) r(ectral) e(metho) r(ds) i
(is) f(that) h(they) f(are) f(not) i(extendible) 523
4916 y(to) 37 b(matc) n(hing) f(graphs) f(of) i(di\013eren) n(t) f
(sizes.) h(F) -7 b(or) 36 b(example,) g(the) h(metho) r(d) g(dev) n
(elop) r(ed) f(b) n(y) 523 5016 y(Umey) n(ama[15]) 22
b(applies) h(only) g(for) g(graphs) f(of) i(the) g(same) f(size.) g
(Nev) n(ertheless,) f(these) i(short-) p 90 rotate dyy
eop
%%Page: 4 4
4 3 bop Fo 523 540 a(comings) 24 b(can) h(b) r(e) h(eliminated) g(b) n
(y) f(applying) f(normalization) g(and) h(pro) 5 b(jection) 24
b(op) r(erations) 523 639 y(-) j(the) h(topic) g(of) f(the) h(follo) n
(wing) f(section.) p Fl 523 892 a(2.2) 95 b(Normalizations) 29
b(and) j(Pro) 5 b(jections) p Fo 523 1062 a(Subspace) 35
b(pro) 5 b(jection) 34 b(metho) r(ds,) i(in) g(the) f(principal) g
(comp) r(onen) n(t) g(analysis) f(\(PCA\)) i(lit-) 523
1162 y(erature,) 41 b(are) f(con) n(v) n(en) n(tionally) g(used) h(to) h
(reduce) f(the) h(dimensionalit) n(y) f(of) h(data,) f(while) 523
1261 y(minimizing) e(the) g(information) f(loss) f(due) i(to) f(the) h
(decreased) f(n) n(um) n(b) r(er) g(of) g(dimensions.) 523
1361 y(It) c(is) g(p) r(erformed) f(in) h(the) g(follo) n(wing) e(w) n
(a) n(y) -7 b(.) 33 b(The) h(dataset) f(co) n(v) -5 b(ariance) 31
b(matrix) p Fh 33 w(\006) p Fo 39 w(is) i(\014rst) 523
1461 y(decomp) r(osed) 23 b(in) n(to) g(the) h(familiar) e(eigen) n(v)
-5 b(alue/eigen) n(v) n(ector) 20 b(matrix) j(pro) r(duct) g(\(see) g
(Eq.) g(1\):) p Fh 1753 1645 a(\006) p Fo 28 w(=) p Fh
22 w(U) 9 b(\003U) p Fg 2123 1611 a(T) p Fo 3299 1645
a(\(2\)) 523 1829 y(where) p Fh 30 w(U) p Fo 39 w(is) 30
b(a) g(matrix) g(of) g(eigen) n(v) n(ectors) e(\(\\principal) i(comp) r
(onen) n(ts") f(of) h(the) h(data\),) f(and) p Fh 523
1929 a(\003) p Fo 30 w(is) g(a) g(diagonal) f(matrix) h(of) g(eigen) n
(v) -5 b(alues.) 30 b(The) g(original) f(data) h(is) g(then) h(pro) 5
b(jected) 30 b(on) n(to) 523 2028 y(a) d(smaller) f(n) n(um) n(b) r(er)
h(of) g(the) g(most) g(imp) r(ortan) n(t) g(\(i.e.,) g(asso) r(ciated) f
(with) i(the) f(largest) f(eigen-) 523 2128 y(v) -5 b(alues\)) 31
b(principal) f(comp) r(onen) n(ts) g(as) g(sp) r(eci\014ed) h(in) g
(the) g(b) r(elo) n(w) f(equation) g(\(and) h(th) n(us,) g(the) 523
2228 y(data's) c(dimensionalit) n(y) g(is) g(reduced\):) 1807
2412 y(^) p Fh -47 w(x) p Fo 24 w(=) p Fh 22 w(U) p Fg
2026 2378 a(T) 2017 2432 y(k) p Fh 2078 2412 a(x) p Fo
1174 w(\(3\)) 523 2596 y(Here,) k(^) p Fh -48 w(x) p
Fo 27 w(is) 25 b(the) h(computed) g(pro) 5 b(jection,) p
Fh 25 w(U) p Fg 1899 2566 a(T) 1890 2620 y(k) p Fo 1976
2596 a(is) 26 b(the) g(matrix) f(of) p Fh 26 w(k) p Fo
28 w(principal) h(comp) r(onen) n(ts) 523 2696 y(in) i(a) f(transp) r
(osed) g(form,) g(and) p Fh 27 w(x) p Fo 29 w(is) g(an) g(item) h(from)
g(the) g(original) e(data.) 648 2796 y(T) -7 b(aking) 39
b(the) i(v) n(ery) e(same) h(approac) n(h,) e(w) n(e) i(can) g(pro) 5
b(ject) 39 b(v) n(ertex) h(connectivit) n(y) f(data) 523
2896 y(from) 30 b(a) g(graph) g(adjacency) f(matrix) h(on) n(to) g(a) g
(smaller) g(set) g(of) h(its) f(most) h(imp) r(ortan) n(t) f(eigen-) 523
2995 y(v) n(ectors.) g(The) i(pro) 5 b(jection) 30 b(co) r(ordinates) h
(obtained) g(in) h(this) g(w) n(a) n(y) e(w) n(ould) h(then) h
(represen) n(t) 523 3095 y(the) 24 b(relational) e(prop) r(erties) g
(of) h(individual) g(v) n(ertices) g(relativ) n(e) f(to) h(the) g
(others) g(in) g(the) h(lo) n(w) n(er-) 523 3195 y(dimensional) 38
b(eigenspace) e(of) i(a) g(giv) n(en) f(graph.) g(In) h(this) g(eigen) n
(v) n(ector) e(subspace,) i(struc-) 523 3294 y(turally) 33
b(similar) g(v) n(ertices) g(or) g(v) n(ertex) g(groups) f(w) n(ould) h
(b) r(e) h(lo) r(cated) g(close) f(to) h(eac) n(h) f(other,) 523
3394 y(whic) n(h) 28 b(can) f(b) r(e) h(utilized) g(for) f(appro) n
(ximate) f(comparison) g(and) h(matc) n(hing) g(of) h(graphs.) 648
3494 y(Ho) n(w) n(ev) n(er,) 22 b(in) i(order) f(to) h(b) r(e) g(able) g
(to) g(use) g(the) g(outlined) g(ab) r(o) n(v) n(e) f(pro) 5
b(jection) 23 b(metho) r(d) i(for) 523 3594 y(graph) 30
b(matc) n(hing,) g(it) h(is) g(necessary) e(to) i(resolv) n(e) e(the) i
(follo) n(wing) f(issues:) g(\014rst,) g(ho) n(w) h(man) n(y) 523
3693 y(dimensions) f(to) h(c) n(ho) r(ose) e(for) h(v) n(ertex) g
(eigenspace) f(pro) 5 b(jections?) 30 b(Second,) g(ho) n(w) g(to) h
(ensure) 523 3793 y(the) d(comparabilit) n(y) e(of) i(the) g(deriv) n
(ed) f(pro) 5 b(jections) 26 b(for) i(graphs) e(with) i(a) f
(di\013eren) n(t) h(n) n(um) n(b) r(er) 523 3893 y(of) g(v) n(ertices?)
648 3993 y(The) g(\014rst) g(is) g(answ) n(ered) e(b) n(y) i(the) h
(relativ) n(e) e(sizes) g(of) h(the) h(eigen) n(v) -5
b(alues) 27 b(asso) r(ciated) f(with) 523 4093 y(eac) n(h) 38
b(dimension) g(or) g(eigen) n(v) n(ector) e(with) k(non-zero) c(eigen) n
(v) -5 b(alue) 38 b(signalling) g(the) g(redun-) 523
4192 y(dancy) 24 b(of) g(the) h(asso) r(ciated) e(subspaces.) h(That) g
(is,) h(for) e(a) h(giv) n(en) g(pair) g(of) g(graphs) f(one) h(should)
523 4292 y(c) n(ho) r(ose) j(the) p Fh 29 w(k) p Fo 32
w(most) h(imp) r(ortan) n(t) h(eigen) n(v) n(ectors) d(as) i(the) h
(pro) 5 b(jection) 27 b(comp) r(onen) n(ts,) i(where) p
Fh 523 4392 a(k) p Fo 27 w(is) 24 b(the) h(smaller) e(v) -5
b(alue) 25 b(of) f(the) g(ranks) f(of) i(adjacency) e(matrices) h(of) g
(the) h(t) n(w) n(o) e(graphs) g(b) r(eing) 523 4491
y(compared) p Fe 875 4461 a(1) p Fo 939 4491 a(,) k(i.e.) p
Fh 28 w(k) p Fo 26 w(=) p Fh 23 w(min) p Fo(\() p Fh(r) r(ank) p
Fo 3 w(\() p Fh(A) p Fg 1737 4503 a(Gr) r(aph) p Fd 1931
4511 a(1) p Fo 1967 4491 a(\)) p Fh(;) 14 b(r) r(ank) p
Fo 3 w(\() p Fh(A) p Fg 2309 4503 a(Gr) r(aph) p Fd 2503
4511 a(2) p Fo 2540 4491 a(\)\).) 648 4592 y(As) 36 b(for) g(the) h
(second) f(question,) h(the) g(empirical) f(evidence) g(suggests) g
(that) h(an) f(extra) 523 4691 y(step) 28 b(of) f(renormalization) e
(of) j(the) g(pro) 5 b(jections) 26 b(ma) n(y) h(su\016ce.) g(Here,) g
(the) h(idea) f(is) h(that) g(for) p 523 4748 473 4 v
Fc 546 4801 a(1) p Fn 606 4833 a(Ho) n(w) n(ev) n(er,) g(in) g(order) g
(to) g(mak) n(e) f(the) h(follo) n(wing) i(examples) e(more) f
(illustrativ) n(e,) i(without) f(a) h(loss) 606 4924
y(of) 34 b(generalit) n(y) f(in) g(the) g(further) g(discussion) g(w) n
(e) h(will) g(use) f(only) g(2-dimensional) g(pro) t(jections,) 606
5016 y(whic) n(h) 26 b(can) g(b) r(e) f(easily) i(depicted) e(in) h
(the) f(2D) h(plane.) p 90 rotate dyy eop
%%Page: 5 5
5 4 bop Fo 523 540 a(the) 28 b(purp) r(ose) f(of) g(comparing) f(t) n
(w) n(o) h(arbitrary) e(graphs) h(w) n(e) h(need) h(not) f(consider) g
(the) g(v) -5 b(alues) 523 639 y(of) 32 b(the) f(pro) 5
b(jections) 31 b(as) g(suc) n(h,) g(but) h(instead) f(should) h(lo) r
(ok) f(at) g(ho) n(w) g(they) h(are) e(p) r(ositioned) 523
739 y(and) 40 b(orien) n(ted) p Fj 40 w(r) l(elative) i(to) f(e) l(ach)
i(other) p Fo 41 w(in) d(their) g(eigen) n(v) n(ector) f(subspace.) g
(That) h(is,) g(if) 523 839 y(pro) 5 b(jections) 38 b(are) f(themselv) n
(es) i(view) n(ed) f(as) g(v) n(ectors,) f(w) n(e) i(disregard) e
(their) h(magnitudes,) 523 938 y(while) 21 b(only) g(pa) n(ying) e
(atten) n(tion) i(to) g(their) g(direction) f(and) h(orien) n(tation.) e
(And) j(this) f(is) g(exactly) 523 1038 y(what) 39 b(pro) 5
b(jection) 38 b(co) r(ordinate) g(renormalization) f(helps) i(us) g(to)
g(do:) g(in) g(the) h(end) f(all) g(of) 523 1137 y(the) 32
b(pro) 5 b(jections) 31 b(are) f(unit-length) i(v) n(ectors) e(that) i
(can) g(only) f(b) r(e) h(distinguished) g(b) n(y) f(their) 523
1237 y(orienation,) 36 b(and) i(not) f(b) n(y) g(their) h(length.) f
(In) h(addition) f(to) h(that,) g(w) n(e) f(also) f(carry) g(out) h(a)
523 1337 y(dominan) n(t) 20 b(sign) g(correction) f(of) h(the) h(pro) 5
b(jection) 19 b(co) r(ordinates) g(of) h(either) h(of) f(the) h(t) n(w)
n(o) e(graphs) 523 1436 y(b) r(eing) g(matc) n(hed) g(so) g(as) g(to) g
(align) f(one) h(set) g(of) h(graph) e(v) n(ertex) g(pro) 5
b(jections) 18 b(against) g(the) i(other.) 523 1536 y(This) 30
b(corresp) r(onds) d(to) j(setting) f(the) h(direction) f(of) h(the) g
(axes) e(in) i(suc) n(h) g(a) f(w) n(a) n(y) f(to) h(result) h(in) 523
1636 y(the) 23 b(most) g(compatible) f(alignmen) n(t) h(b) r(et) n(w) n
(een) f(the) h(v) n(ertex) f(data) g(using) h(the) g(dominan) n(t) f
(sign) 523 1735 y(test.) 550 3423 y @beginspecial 0 @llx
0 @lly 156 @urx 246 @ury 850 @rwi @setspecial
%%BeginDocument: Example1-new.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\Example1-new.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 156 246
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 156 246
%AI3_TileBox: 0 0 156 246
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

0 To
1.0000 0.0000 0.0000 1.0000 65.4000 207.2400 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
 [] 0 d
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.1200 193.8000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 65.4000 182.5200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.1200 169.0800 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.1200 153.3600 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 47.4000 140.4000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 65.4000 128.6400 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 43.2000 111.6000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.1200 101.6400 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(11\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 75.6000 79.3200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(12\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 90.2400 50.0400 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(13\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 101.4000 25.4400 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(14\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.2400 65.7600 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(15\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 44.6400 43.3200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(16\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 44.6400 18.6000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(17\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 46.3200 235.3200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.1200 222.9600 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  59.1600 239.4000 m
  59.1600 225.9600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 235.9200 m
  60.3600 236.1600 L
  61.4400 236.7600 L
  62.1600 237.7200 L
  62.6400 238.8000 L
  62.6400 240.0000 L
  62.1600 241.2000 L
  61.4400 242.1600 L
  60.3600 242.7600 L
  59.1600 242.8800 L
  57.9600 242.7600 L
  56.8800 242.1600 L
  56.1600 241.2000 L
  55.6800 240.0000 L
  55.6800 238.8000 L
  56.1600 237.7200 L
  56.8800 236.7600 L
  57.9600 236.1600 L
  59.1600 235.9200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 229.4400 m
  57.9600 229.2000 L
  56.8800 228.6000 L
  56.1600 227.6400 L
  55.6800 226.5600 L
  55.6800 225.3600 L
  56.1600 224.1600 L
  56.8800 223.2000 L
  57.9600 222.6000 L
  59.1600 222.3600 L
  60.3600 222.6000 L
  61.4400 223.2000 L
  62.1600 224.1600 L
  62.6400 225.3600 L
  62.6400 226.5600 L
  62.1600 227.6400 L
  61.4400 228.6000 L
  60.3600 229.2000 L
  59.1600 229.4400 L
F
U
u
2.0000 w
  59.1600 225.9600 m
  59.1600 212.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 222.3600 m
  60.3600 222.6000 L
  61.4400 223.2000 L
  62.1600 224.1600 L
  62.6400 225.3600 L
  62.6400 226.5600 L
  62.1600 227.6400 L
  61.4400 228.6000 L
  60.3600 229.2000 L
  59.1600 229.4400 L
  57.9600 229.2000 L
  56.8800 228.6000 L
  56.1600 227.6400 L
  55.6800 226.5600 L
  55.6800 225.3600 L
  56.1600 224.1600 L
  56.8800 223.2000 L
  57.9600 222.6000 L
  59.1600 222.3600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 215.8800 m
  57.9600 215.7600 L
  56.8800 215.2800 L
  56.1600 214.3200 L
  55.6800 213.1200 L
  55.6800 211.9200 L
  56.1600 210.8400 L
  56.8800 209.8800 L
  57.9600 209.2800 L
  59.1600 209.0400 L
  60.3600 209.2800 L
  61.4400 209.8800 L
  62.1600 210.8400 L
  62.6400 211.9200 L
  62.6400 213.1200 L
  62.1600 214.3200 L
  61.4400 215.2800 L
  60.3600 215.7600 L
  59.1600 215.8800 L
F
U
u
2.0000 w
  59.1600 212.5200 m
  59.1600 199.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 209.0400 m
  60.3600 209.2800 L
  61.4400 209.8800 L
  62.1600 210.8400 L
  62.6400 211.9200 L
  62.6400 213.1200 L
  62.1600 214.3200 L
  61.4400 215.2800 L
  60.3600 215.7600 L
  59.1600 215.8800 L
  57.9600 215.7600 L
  56.8800 215.2800 L
  56.1600 214.3200 L
  55.6800 213.1200 L
  55.6800 211.9200 L
  56.1600 210.8400 L
  56.8800 209.8800 L
  57.9600 209.2800 L
  59.1600 209.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 202.5600 m
  57.9600 202.3200 L
  56.8800 201.7200 L
  56.1600 200.7600 L
  55.6800 199.6800 L
  55.6800 198.4800 L
  56.1600 197.2800 L
  56.8800 196.3200 L
  57.9600 195.7200 L
  59.1600 195.4800 L
  60.3600 195.7200 L
  61.4400 196.3200 L
  62.1600 197.2800 L
  62.6400 198.4800 L
  62.6400 199.6800 L
  62.1600 200.7600 L
  61.4400 201.7200 L
  60.3600 202.3200 L
  59.1600 202.5600 L
F
U
u
2.0000 w
  59.1600 199.0800 m
  59.1600 185.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 195.4800 m
  60.3600 195.7200 L
  61.4400 196.3200 L
  62.1600 197.2800 L
  62.6400 198.4800 L
  62.6400 199.6800 L
  62.1600 200.7600 L
  61.4400 201.7200 L
  60.3600 202.3200 L
  59.1600 202.5600 L
  57.9600 202.3200 L
  56.8800 201.7200 L
  56.1600 200.7600 L
  55.6800 199.6800 L
  55.6800 198.4800 L
  56.1600 197.2800 L
  56.8800 196.3200 L
  57.9600 195.7200 L
  59.1600 195.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 189.0000 m
  57.9600 188.8800 L
  56.8800 188.2800 L
  56.1600 187.3200 L
  55.6800 186.1200 L
  55.6800 184.9200 L
  56.1600 183.8400 L
  56.8800 182.8800 L
  57.9600 182.2800 L
  59.1600 182.0400 L
  60.3600 182.2800 L
  61.4400 182.8800 L
  62.1600 183.8400 L
  62.6400 184.9200 L
  62.6400 186.1200 L
  62.1600 187.3200 L
  61.4400 188.2800 L
  60.3600 188.8800 L
  59.1600 189.0000 L
F
U
u
2.0000 w
  59.1600 185.5200 m
  59.1600 172.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 182.0400 m
  60.3600 182.2800 L
  61.4400 182.8800 L
  62.1600 183.8400 L
  62.6400 184.9200 L
  62.6400 186.1200 L
  62.1600 187.3200 L
  61.4400 188.2800 L
  60.3600 188.8800 L
  59.1600 189.0000 L
  57.9600 188.8800 L
  56.8800 188.2800 L
  56.1600 187.3200 L
  55.6800 186.1200 L
  55.6800 184.9200 L
  56.1600 183.8400 L
  56.8800 182.8800 L
  57.9600 182.2800 L
  59.1600 182.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 175.5600 m
  57.9600 175.3200 L
  56.8800 174.7200 L
  56.1600 173.7600 L
  55.6800 172.6800 L
  55.6800 171.4800 L
  56.1600 170.2800 L
  56.8800 169.3200 L
  57.9600 168.7200 L
  59.1600 168.4800 L
  60.3600 168.7200 L
  61.4400 169.3200 L
  62.1600 170.2800 L
  62.6400 171.4800 L
  62.6400 172.6800 L
  62.1600 173.7600 L
  61.4400 174.7200 L
  60.3600 175.3200 L
  59.1600 175.5600 L
F
U
u
2.0000 w
  59.1600 172.0800 m
  59.1600 158.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 168.4800 m
  60.3600 168.7200 L
  61.4400 169.3200 L
  62.1600 170.2800 L
  62.6400 171.4800 L
  62.6400 172.6800 L
  62.1600 173.7600 L
  61.4400 174.7200 L
  60.3600 175.3200 L
  59.1600 175.5600 L
  57.9600 175.3200 L
  56.8800 174.7200 L
  56.1600 173.7600 L
  55.6800 172.6800 L
  55.6800 171.4800 L
  56.1600 170.2800 L
  56.8800 169.3200 L
  57.9600 168.7200 L
  59.1600 168.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 162.0000 m
  57.9600 161.8800 L
  56.8800 161.2800 L
  56.1600 160.3200 L
  55.6800 159.1200 L
  55.6800 157.9200 L
  56.1600 156.8400 L
  56.8800 155.8800 L
  57.9600 155.2800 L
  59.1600 155.0400 L
  60.3600 155.2800 L
  61.4400 155.8800 L
  62.1600 156.8400 L
  62.6400 157.9200 L
  62.6400 159.1200 L
  62.1600 160.3200 L
  61.4400 161.2800 L
  60.3600 161.8800 L
  59.1600 162.0000 L
F
U
u
2.0000 w
  59.1600 158.5200 m
  59.1600 145.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 155.0400 m
  60.3600 155.2800 L
  61.4400 155.8800 L
  62.1600 156.8400 L
  62.6400 157.9200 L
  62.6400 159.1200 L
  62.1600 160.3200 L
  61.4400 161.2800 L
  60.3600 161.8800 L
  59.1600 162.0000 L
  57.9600 161.8800 L
  56.8800 161.2800 L
  56.1600 160.3200 L
  55.6800 159.1200 L
  55.6800 157.9200 L
  56.1600 156.8400 L
  56.8800 155.8800 L
  57.9600 155.2800 L
  59.1600 155.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 148.6800 m
  57.9600 148.4400 L
  56.8800 147.8400 L
  56.1600 146.8800 L
  55.6800 145.8000 L
  55.6800 144.6000 L
  56.1600 143.4000 L
  56.8800 142.4400 L
  57.9600 141.8400 L
  59.1600 141.6000 L
  60.3600 141.8400 L
  61.4400 142.4400 L
  62.1600 143.4000 L
  62.6400 144.6000 L
  62.6400 145.8000 L
  62.1600 146.8800 L
  61.4400 147.8400 L
  60.3600 148.4400 L
  59.1600 148.6800 L
F
U
u
2.0000 w
  59.1600 145.2000 m
  59.1600 131.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 141.6000 m
  60.3600 141.8400 L
  61.4400 142.4400 L
  62.1600 143.4000 L
  62.6400 144.6000 L
  62.6400 145.8000 L
  62.1600 146.8800 L
  61.4400 147.8400 L
  60.3600 148.4400 L
  59.1600 148.6800 L
  57.9600 148.4400 L
  56.8800 147.8400 L
  56.1600 146.8800 L
  55.6800 145.8000 L
  55.6800 144.6000 L
  56.1600 143.4000 L
  56.8800 142.4400 L
  57.9600 141.8400 L
  59.1600 141.6000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 135.1200 m
  57.9600 135.0000 L
  56.8800 134.4000 L
  56.1600 133.4400 L
  55.6800 132.2400 L
  55.6800 131.0400 L
  56.1600 129.9600 L
  56.8800 129.0000 L
  57.9600 128.4000 L
  59.1600 128.1600 L
  60.3600 128.4000 L
  61.4400 129.0000 L
  62.1600 129.9600 L
  62.6400 131.0400 L
  62.6400 132.2400 L
  62.1600 133.4400 L
  61.4400 134.4000 L
  60.3600 135.0000 L
  59.1600 135.1200 L
F
U
u
2.0000 w
  59.1600 131.6400 m
  59.1600 118.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 128.1600 m
  60.3600 128.4000 L
  61.4400 129.0000 L
  62.1600 129.9600 L
  62.6400 131.0400 L
  62.6400 132.2400 L
  62.1600 133.4400 L
  61.4400 134.4000 L
  60.3600 135.0000 L
  59.1600 135.1200 L
  57.9600 135.0000 L
  56.8800 134.4000 L
  56.1600 133.4400 L
  55.6800 132.2400 L
  55.6800 131.0400 L
  56.1600 129.9600 L
  56.8800 129.0000 L
  57.9600 128.4000 L
  59.1600 128.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 121.6800 m
  57.9600 121.4400 L
  56.8800 120.8400 L
  56.1600 119.8800 L
  55.6800 118.8000 L
  55.6800 117.6000 L
  56.1600 116.4000 L
  56.8800 115.4400 L
  57.9600 114.8400 L
  59.1600 114.6000 L
  60.3600 114.8400 L
  61.4400 115.4400 L
  62.1600 116.4000 L
  62.6400 117.6000 L
  62.6400 118.8000 L
  62.1600 119.8800 L
  61.4400 120.8400 L
  60.3600 121.4400 L
  59.1600 121.6800 L
F
U
u
2.0000 w
  59.1600 104.6400 m
  59.1600 77.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 101.1600 m
  60.3600 101.4000 L
  61.4400 102.0000 L
  62.1600 102.9600 L
  62.6400 104.0400 L
  62.6400 105.2400 L
  62.1600 106.4400 L
  61.4400 107.4000 L
  60.3600 108.0000 L
  59.1600 108.1200 L
  57.9600 108.0000 L
  56.8800 107.4000 L
  56.1600 106.4400 L
  55.6800 105.2400 L
  55.6800 104.0400 L
  56.1600 102.9600 L
  56.8800 102.0000 L
  57.9600 101.4000 L
  59.1600 101.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 81.2400 m
  57.9600 81.1200 L
  56.8800 80.5200 L
  56.1600 79.5600 L
  55.6800 78.3600 L
  55.6800 77.1600 L
  56.1600 76.0800 L
  56.8800 75.1200 L
  57.9600 74.5200 L
  59.1600 74.2800 L
  60.3600 74.5200 L
  61.4400 75.1200 L
  62.1600 76.0800 L
  62.6400 77.1600 L
  62.6400 78.3600 L
  62.1600 79.5600 L
  61.4400 80.5200 L
  60.3600 81.1200 L
  59.1600 81.2400 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 131.1600 214.0800 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 117.7200 200.5200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 131.1600 187.0800 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 117.7200 173.5200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 104.1600 142.2000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 124.4400 142.2000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  59.1600 104.6400 m
  73.3200 77.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  60.7200 101.5200 m
  61.8000 102.3600 L
  62.4000 103.3200 L
  62.6400 104.5200 L
  62.5200 105.7200 L
  61.9200 106.8000 L
  61.0800 107.6400 L
  59.8800 108.1200 L
  58.6800 108.1200 L
  57.4800 107.7600 L
  56.5200 107.0400 L
  55.9200 105.9600 L
  55.6800 104.7600 L
  55.8000 103.5600 L
  56.4000 102.4800 L
  57.2400 101.7600 L
  58.4400 101.2800 L
  59.6400 101.1600 L
  60.7200 101.5200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  71.6400 80.8800 m
  70.6800 80.1600 L
  70.0800 79.0800 L
  69.8400 77.8800 L
  69.9600 76.6800 L
  70.5600 75.6000 L
  71.4000 74.8800 L
  72.6000 74.4000 L
  73.8000 74.2800 L
  75.0000 74.6400 L
  75.9600 75.4800 L
  76.5600 76.4400 L
  76.8000 77.6400 L
  76.6800 78.8400 L
  76.0800 79.9200 L
  75.2400 80.7600 L
  74.0400 81.2400 L
  72.8400 81.2400 L
  71.6400 80.8800 L
F
U
u
2.0000 w
  59.1600 104.6400 m
  46.3200 77.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  57.6000 101.5200 m
  58.8000 101.1600 L
  60.0000 101.2800 L
  61.0800 101.7600 L
  62.0400 102.6000 L
  62.5200 103.6800 L
  62.6400 105.0000 L
  62.2800 106.0800 L
  61.6800 107.1600 L
  60.6000 107.8800 L
  59.5200 108.1200 L
  58.3200 108.1200 L
  57.1200 107.5200 L
  56.2800 106.6800 L
  55.8000 105.6000 L
  55.6800 104.4000 L
  55.9200 103.2000 L
  56.6400 102.2400 L
  57.6000 101.5200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  47.8800 81.0000 m
  46.6800 81.2400 L
  45.4800 81.2400 L
  44.2800 80.6400 L
  43.4400 79.8000 L
  42.9600 78.7200 L
  42.8400 77.5200 L
  43.0800 76.3200 L
  43.8000 75.3600 L
  44.7600 74.6400 L
  45.9600 74.2800 L
  47.1600 74.4000 L
  48.3600 74.8800 L
  49.2000 75.7200 L
  49.6800 76.8000 L
  49.8000 78.1200 L
  49.5600 79.2000 L
  48.8400 80.2800 L
  47.8800 81.0000 L
F
U
u
2.0000 w
  46.3200 77.7600 m
  32.8800 50.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  44.7600 74.6400 m
  45.9600 74.2800 L
  47.1600 74.4000 L
  48.2400 74.8800 L
  49.0800 75.7200 L
  49.6800 76.8000 L
  49.8000 78.0000 L
  49.5600 79.2000 L
  48.8400 80.1600 L
  47.8800 80.8800 L
  46.6800 81.2400 L
  45.4800 81.2400 L
  44.4000 80.7600 L
  43.5600 79.9200 L
  42.9600 78.8400 L
  42.8400 77.5200 L
  43.0800 76.4400 L
  43.8000 75.3600 L
  44.7600 74.6400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  34.4400 53.8800 m
  33.2400 54.2400 L
  32.0400 54.2400 L
  30.8400 53.7600 L
  30.1200 52.9200 L
  29.5200 51.8400 L
  29.4000 50.5200 L
  29.7600 49.4400 L
  30.3600 48.3600 L
  31.2000 47.6400 L
  32.4000 47.2800 L
  33.6000 47.4000 L
  34.8000 47.8800 L
  35.6400 48.7200 L
  36.2400 49.8000 L
  36.3600 51.0000 L
  36.0000 52.2000 L
  35.4000 53.1600 L
  34.4400 53.8800 L
F
U
u
2.0000 w
  32.8800 50.7600 m
  19.4400 23.8800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  31.2000 47.6400 m
  32.4000 47.2800 L
  33.6000 47.4000 L
  34.8000 47.8800 L
  35.6400 48.7200 L
  36.2400 49.8000 L
  36.3600 51.0000 L
  36.0000 52.2000 L
  35.4000 53.1600 L
  34.4400 53.8800 L
  33.2400 54.2400 L
  32.0400 54.2400 L
  30.8400 53.7600 L
  30.1200 52.9200 L
  29.5200 51.8400 L
  29.4000 50.5200 L
  29.7600 49.4400 L
  30.3600 48.3600 L
  31.2000 47.6400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  21.0000 27.0000 m
  19.8000 27.3600 L
  18.6000 27.3600 L
  17.5200 26.8800 L
  16.6800 26.0400 L
  16.0800 24.9600 L
  15.9600 23.6400 L
  16.2000 22.5600 L
  16.9200 21.4800 L
  17.8800 20.7600 L
  19.0800 20.4000 L
  20.2800 20.5200 L
  21.3600 21.0000 L
  22.2000 21.8400 L
  22.8000 22.9200 L
  22.9200 24.1200 L
  22.6800 25.3200 L
  21.9600 26.2800 L
  21.0000 27.0000 L
F
U
u
2.0000 w
  59.1600 77.7600 m
  59.1600 50.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 74.2800 m
  60.3600 74.5200 L
  61.4400 75.1200 L
  62.1600 76.0800 L
  62.6400 77.1600 L
  62.6400 78.3600 L
  62.1600 79.5600 L
  61.4400 80.5200 L
  60.3600 81.1200 L
  59.1600 81.2400 L
  57.9600 81.1200 L
  56.8800 80.5200 L
  56.1600 79.5600 L
  55.6800 78.3600 L
  55.6800 77.1600 L
  56.1600 76.0800 L
  56.8800 75.1200 L
  57.9600 74.5200 L
  59.1600 74.2800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 54.2400 m
  57.9600 54.1200 L
  56.8800 53.5200 L
  56.1600 52.5600 L
  55.6800 51.3600 L
  55.6800 50.1600 L
  56.1600 49.0800 L
  56.8800 48.1200 L
  57.9600 47.5200 L
  59.1600 47.2800 L
  60.3600 47.5200 L
  61.4400 48.1200 L
  62.1600 49.0800 L
  62.6400 50.1600 L
  62.6400 51.3600 L
  62.1600 52.5600 L
  61.4400 53.5200 L
  60.3600 54.1200 L
  59.1600 54.2400 L
F
U
u
2.0000 w
  59.1600 50.7600 m
  59.1600 23.8800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 47.2800 m
  60.3600 47.5200 L
  61.4400 48.1200 L
  62.1600 49.0800 L
  62.6400 50.1600 L
  62.6400 51.3600 L
  62.1600 52.5600 L
  61.4400 53.5200 L
  60.3600 54.1200 L
  59.1600 54.2400 L
  57.9600 54.1200 L
  56.8800 53.5200 L
  56.1600 52.5600 L
  55.6800 51.3600 L
  55.6800 50.1600 L
  56.1600 49.0800 L
  56.8800 48.1200 L
  57.9600 47.5200 L
  59.1600 47.2800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 27.3600 m
  57.9600 27.2400 L
  56.8800 26.6400 L
  56.1600 25.6800 L
  55.6800 24.4800 L
  55.6800 23.2800 L
  56.1600 22.2000 L
  56.8800 21.2400 L
  57.9600 20.6400 L
  59.1600 20.4000 L
  60.3600 20.6400 L
  61.4400 21.2400 L
  62.1600 22.2000 L
  62.6400 23.2800 L
  62.6400 24.4800 L
  62.1600 25.6800 L
  61.4400 26.6400 L
  60.3600 27.2400 L
  59.1600 27.3600 L
F
U
u
2.0000 w
  73.3200 77.7600 m
  86.8800 50.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  74.8800 74.6400 m
  75.8400 75.3600 L
  76.5600 76.4400 L
  76.8000 77.5200 L
  76.6800 78.8400 L
  76.0800 79.9200 L
  75.2400 80.7600 L
  74.1600 81.2400 L
  72.9600 81.2400 L
  71.7600 80.8800 L
  70.8000 80.1600 L
  70.0800 79.2000 L
  69.8400 78.0000 L
  69.9600 76.8000 L
  70.5600 75.7200 L
  71.4000 74.8800 L
  72.4800 74.4000 L
  73.6800 74.2800 L
  74.8800 74.6400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  85.2000 53.8800 m
  84.2400 53.1600 L
  83.6400 52.2000 L
  83.2800 51.0000 L
  83.4000 49.8000 L
  84.0000 48.7200 L
  84.8400 47.8800 L
  86.0400 47.4000 L
  87.2400 47.2800 L
  88.4400 47.6400 L
  89.4000 48.3600 L
  90.0000 49.4400 L
  90.3600 50.5200 L
  90.2400 51.8400 L
  89.6400 52.9200 L
  88.8000 53.7600 L
  87.6000 54.2400 L
  86.4000 54.2400 L
  85.2000 53.8800 L
F
U
u
2.0000 w
  86.8800 50.7600 m
  100.2000 23.8800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  88.4400 47.6400 m
  89.4000 48.3600 L
  90.0000 49.4400 L
  90.3600 50.5200 L
  90.2400 51.8400 L
  89.6400 52.9200 L
  88.8000 53.7600 L
  87.6000 54.2400 L
  86.4000 54.2400 L
  85.2000 53.8800 L
  84.2400 53.1600 L
  83.6400 52.2000 L
  83.2800 51.0000 L
  83.4000 49.8000 L
  84.0000 48.7200 L
  84.8400 47.8800 L
  86.0400 47.4000 L
  87.2400 47.2800 L
  88.4400 47.6400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  98.6400 27.0000 m
  97.6800 26.2800 L
  96.9600 25.3200 L
  96.7200 24.1200 L
  96.8400 22.9200 L
  97.4400 21.8400 L
  98.2800 21.0000 L
  99.3600 20.5200 L
  100.5600 20.4000 L
  101.7600 20.7600 L
  102.7200 21.4800 L
  103.4400 22.5600 L
  103.6800 23.6400 L
  103.5600 24.9600 L
  102.9600 26.0400 L
  102.1200 26.8800 L
  101.0400 27.3600 L
  99.8400 27.3600 L
  98.6400 27.0000 L
F
U
u
2.0000 w
  59.1600 118.2000 m
  59.1600 104.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.1600 114.6000 m
  60.3600 114.8400 L
  61.4400 115.4400 L
  62.1600 116.4000 L
  62.6400 117.6000 L
  62.6400 118.8000 L
  62.1600 119.8800 L
  61.4400 120.8400 L
  60.3600 121.4400 L
  59.1600 121.6800 L
  57.9600 121.4400 L
  56.8800 120.8400 L
  56.1600 119.8800 L
  55.6800 118.8000 L
  55.6800 117.6000 L
  56.1600 116.4000 L
  56.8800 115.4400 L
  57.9600 114.8400 L
  59.1600 114.6000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.1600 108.1200 m
  57.9600 108.0000 L
  56.8800 107.4000 L
  56.1600 106.4400 L
  55.6800 105.2400 L
  55.6800 104.0400 L
  56.1600 102.9600 L
  56.8800 102.0000 L
  57.9600 101.4000 L
  59.1600 101.1600 L
  60.3600 101.4000 L
  61.4400 102.0000 L
  62.1600 102.9600 L
  62.6400 104.0400 L
  62.6400 105.2400 L
  62.1600 106.4400 L
  61.4400 107.4000 L
  60.3600 108.0000 L
  59.1600 108.1200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 31.8000 79.3200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(18\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 18.3600 52.3200 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(19\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 9.3600 27.6000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(20\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  127.2000 216.9600 m
  127.2000 203.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  127.2000 213.4800 m
  128.4000 213.7200 L
  129.4800 214.3200 L
  130.2000 215.2800 L
  130.6800 216.3600 L
  130.6800 217.5600 L
  130.2000 218.6400 L
  129.4800 219.6000 L
  128.4000 220.2000 L
  127.2000 220.4400 L
  126.0000 220.2000 L
  124.9200 219.6000 L
  124.2000 218.6400 L
  123.7200 217.5600 L
  123.7200 216.3600 L
  124.2000 215.2800 L
  124.9200 214.3200 L
  126.0000 213.7200 L
  127.2000 213.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  127.2000 207.0000 m
  126.0000 206.8800 L
  124.9200 206.2800 L
  124.2000 205.3200 L
  123.7200 204.1200 L
  123.7200 202.9200 L
  124.2000 201.8400 L
  124.9200 200.8800 L
  126.0000 200.2800 L
  127.2000 200.0400 L
  128.4000 200.2800 L
  129.4800 200.8800 L
  130.2000 201.8400 L
  130.6800 202.9200 L
  130.6800 204.1200 L
  130.2000 205.3200 L
  129.4800 206.2800 L
  128.4000 206.8800 L
  127.2000 207.0000 L
F
U
u
2.0000 w
  127.2000 203.5200 m
  127.2000 190.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  127.2000 200.0400 m
  128.4000 200.2800 L
  129.4800 200.8800 L
  130.2000 201.8400 L
  130.6800 202.9200 L
  130.6800 204.1200 L
  130.2000 205.3200 L
  129.4800 206.2800 L
  128.4000 206.8800 L
  127.2000 207.0000 L
  126.0000 206.8800 L
  124.9200 206.2800 L
  124.2000 205.3200 L
  123.7200 204.1200 L
  123.7200 202.9200 L
  124.2000 201.8400 L
  124.9200 200.8800 L
  126.0000 200.2800 L
  127.2000 200.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  127.2000 193.5600 m
  126.0000 193.3200 L
  124.9200 192.7200 L
  124.2000 191.7600 L
  123.7200 190.6800 L
  123.7200 189.4800 L
  124.2000 188.2800 L
  124.9200 187.3200 L
  126.0000 186.7200 L
  127.2000 186.4800 L
  128.4000 186.7200 L
  129.4800 187.3200 L
  130.2000 188.2800 L
  130.6800 189.4800 L
  130.6800 190.6800 L
  130.2000 191.7600 L
  129.4800 192.7200 L
  128.4000 193.3200 L
  127.2000 193.5600 L
F
U
u
2.0000 w
  127.2000 190.0800 m
  127.2000 176.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  127.2000 186.4800 m
  128.4000 186.7200 L
  129.4800 187.3200 L
  130.2000 188.2800 L
  130.6800 189.4800 L
  130.6800 190.6800 L
  130.2000 191.7600 L
  129.4800 192.7200 L
  128.4000 193.3200 L
  127.2000 193.5600 L
  126.0000 193.3200 L
  124.9200 192.7200 L
  124.2000 191.7600 L
  123.7200 190.6800 L
  123.7200 189.4800 L
  124.2000 188.2800 L
  124.9200 187.3200 L
  126.0000 186.7200 L
  127.2000 186.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  127.2000 180.0000 m
  126.0000 179.8800 L
  124.9200 179.2800 L
  124.2000 178.3200 L
  123.7200 177.1200 L
  123.7200 175.9200 L
  124.2000 174.8400 L
  124.9200 173.8800 L
  126.0000 173.2800 L
  127.2000 173.0400 L
  128.4000 173.2800 L
  129.4800 173.8800 L
  130.2000 174.8400 L
  130.6800 175.9200 L
  130.6800 177.1200 L
  130.2000 178.3200 L
  129.4800 179.2800 L
  128.4000 179.8800 L
  127.2000 180.0000 L
F
U
u
2.0000 w
  127.2000 176.5200 m
  127.2000 154.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  127.2000 173.0400 m
  128.4000 173.2800 L
  129.4800 173.8800 L
  130.2000 174.8400 L
  130.6800 175.9200 L
  130.6800 177.1200 L
  130.2000 178.3200 L
  129.4800 179.2800 L
  128.4000 179.8800 L
  127.2000 180.0000 L
  126.0000 179.8800 L
  124.9200 179.2800 L
  124.2000 178.3200 L
  123.7200 177.1200 L
  123.7200 175.9200 L
  124.2000 174.8400 L
  124.9200 173.8800 L
  126.0000 173.2800 L
  127.2000 173.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  127.2000 157.5600 m
  126.0000 157.3200 L
  124.9200 156.7200 L
  124.2000 155.7600 L
  123.7200 154.6800 L
  123.7200 153.6000 L
  124.2000 152.4000 L
  124.9200 151.4400 L
  126.0000 150.8400 L
  127.2000 150.6000 L
  128.4000 150.8400 L
  129.4800 151.4400 L
  130.2000 152.4000 L
  130.6800 153.6000 L
  130.6800 154.6800 L
  130.2000 155.7600 L
  129.4800 156.7200 L
  128.4000 157.3200 L
  127.2000 157.5600 L
F
U
u
2.0000 w
  127.2000 176.5200 m
  140.7600 154.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  129.0000 173.5200 m
  129.9600 174.3600 L
  130.5600 175.4400 L
  130.6800 176.6400 L
  130.4400 177.8400 L
  129.8400 178.8000 L
  128.8800 179.6400 L
  127.8000 180.0000 L
  126.4800 180.0000 L
  125.4000 179.5200 L
  124.4400 178.8000 L
  123.8400 177.7200 L
  123.7200 176.5200 L
  123.9600 175.3200 L
  124.5600 174.2400 L
  125.5200 173.5200 L
  126.6000 173.0400 L
  127.9200 173.1600 L
  129.0000 173.5200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  138.8400 157.0800 m
  138.0000 156.2400 L
  137.4000 155.1600 L
  137.1600 153.9600 L
  137.4000 152.8800 L
  138.0000 151.9200 L
  138.9600 151.0800 L
  140.1600 150.7200 L
  141.3600 150.7200 L
  142.5600 151.2000 L
  143.4000 151.9200 L
  144.0000 153.0000 L
  144.2400 154.0800 L
  144.0000 155.2800 L
  143.4000 156.3600 L
  142.4400 157.0800 L
  141.2400 157.5600 L
  140.0400 157.4400 L
  138.8400 157.0800 L
F
U
u
2.0000 w
  127.2000 176.5200 m
  113.7600 154.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  125.4000 173.5200 m
  126.4800 173.1600 L
  127.8000 173.0400 L
  128.8800 173.5200 L
  129.8400 174.2400 L
  130.4400 175.3200 L
  130.6800 176.5200 L
  130.5600 177.7200 L
  129.9600 178.8000 L
  129.0000 179.5200 L
  127.9200 180.0000 L
  126.6000 180.0000 L
  125.5200 179.6400 L
  124.5600 178.8000 L
  123.9600 177.8400 L
  123.7200 176.6400 L
  123.8400 175.4400 L
  124.4400 174.3600 L
  125.4000 173.5200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  115.5600 157.0800 m
  114.3600 157.4400 L
  113.1600 157.5600 L
  111.9600 157.0800 L
  111.0000 156.3600 L
  110.4000 155.2800 L
  110.1600 154.0800 L
  110.4000 153.0000 L
  111.0000 151.9200 L
  111.8400 151.2000 L
  113.0400 150.7200 L
  114.2400 150.7200 L
  115.4400 151.0800 L
  116.4000 151.9200 L
  117.0000 152.8800 L
  117.2400 153.9600 L
  117.0000 155.1600 L
  116.4000 156.2400 L
  115.5600 157.0800 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 142.4400 142.2000 0 Tp
TP
94.687040 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 38.6400 4.5600 0 Tp
TP
101.928774 Tz
/_Helvetica-BoldOblique 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Graph Y\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 99.2400 123.6000 0 Tp
TP
101.928774 Tz
/_Helvetica-BoldOblique 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Graph X\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial Fn 615 3598 a(\(a\)) k(Graphs) g(X,) g(Y.) 1335
3423 y @beginspecial 50 @llx 50 @lly 410 @urx 302 @ury
2452 @rwi @setspecial
%%BeginDocument: example1_proj_noXY.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: example1_proj_noXY.eps
%%Creator: gnuplot 3.7 patchlevel 1
%%CreationDate: Tue Jan  1 17:00:36 2002
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
490 697 M
6472 0 V
1.000 UL
LTb
490 697 M
63 0 V
6409 0 R
-63 0 V
406 697 M
(0) Rshow
1.000 UL
LTa
490 1532 M
6472 0 V
1.000 UL
LTb
490 1532 M
63 0 V
6409 0 R
-63 0 V
-6493 0 R
(0.2) Rshow
1.000 UL
LTa
490 2367 M
6472 0 V
1.000 UL
LTb
490 2367 M
63 0 V
6409 0 R
-63 0 V
-6493 0 R
(0.4) Rshow
1.000 UL
LTa
490 3202 M
6472 0 V
1.000 UL
LTb
490 3202 M
63 0 V
6409 0 R
-63 0 V
-6493 0 R
(0.6) Rshow
1.000 UL
LTa
490 4037 M
6472 0 V
1.000 UL
LTb
490 4037 M
63 0 V
6409 0 R
-63 0 V
-6493 0 R
(0.8) Rshow
1.000 UL
LTa
490 4872 M
6472 0 V
1.000 UL
LTb
490 4872 M
63 0 V
6409 0 R
-63 0 V
-6493 0 R
(1) Rshow
1.000 UL
LTa
952 280 M
0 4592 V
1.000 UL
LTb
952 280 M
0 63 V
0 4529 R
0 -63 V
952 140 M
(-0.4) Cshow
1.000 UL
LTa
1877 280 M
0 4592 V
1.000 UL
LTb
1877 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(-0.2) Cshow
1.000 UL
LTa
2801 280 M
0 4592 V
1.000 UL
LTb
2801 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(0) Cshow
1.000 UL
LTa
3726 280 M
0 4592 V
1.000 UL
LTb
3726 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(0.2) Cshow
1.000 UL
LTa
4651 280 M
0 4592 V
1.000 UL
LTb
4651 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(0.4) Cshow
1.000 UL
LTa
5575 280 M
0 4592 V
1.000 UL
LTb
5575 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(0.6) Cshow
1.000 UL
LTa
6500 280 M
0 4057 V
0 472 R
0 63 V
1.000 UL
LTb
6500 280 M
0 63 V
0 4529 R
0 -63 V
0 -4669 R
(0.8) Cshow
1.000 UL
LTb
490 280 M
6472 0 V
0 4592 V
-6472 0 V
490 280 L
5108 1686 M
(1) Lshow
4997 2193 M
(2) Lshow
4153 3768 M
(3) Lshow
1892 4131 M
(4) Lshow
1034 3518 M
(5,6,7) Lshow
5666 572 M
(1) Lshow
5851 656 M
(2) Lshow
5527 739 M
(3) Lshow
5851 864 M
(4) Lshow
5499 927 M
(5) Lshow
5832 1031 M
(6) Lshow
5760 1407 M
(7) Lshow
5575 2059 M
(8) Lshow
4789 3253 M
(9) Lshow
3273 3995 M
(10) Lshow
2460 4002 M
(11) Lshow
2276 3760 M
(12,15,18) Lshow
2043 3629 M
(13,16,19) Lshow
1893 3475 M
(14,17,20) Lshow
3.000 UP
1.000 UL
LT5
6185 4691 M
(Graph X) Rshow
5108 1560 Circle
4997 2068 Circle
4153 3643 Circle
1892 4005 Circle
1450 3643 Circle
1450 3643 Circle
1450 3643 Circle
6531 4691 Circle
3.000 UP
1.000 UL
LT8
6185 4455 M
(Graph Y) Rshow
5758 743 TriUF
5758 753 TriUF
5758 771 TriUF
5757 807 TriUF
5754 874 TriUF
5745 1008 TriUF
5707 1293 TriUF
5530 1934 TriUF
4732 3128 TriUF
3220 3874 TriUF
2404 3877 TriUF
2220 3844 TriUF
2034 3796 TriUF
1893 3751 TriUF
2220 3844 TriUF
2034 3796 TriUF
1893 3751 TriUF
2220 3844 TriUF
2034 3796 TriUF
1893 3751 TriUF
6531 4455 TriUF
stroke
grestore
end
showpage

%%EndDocument
@endspecial 1392 3598 a(\(b\)) 36 b(Pro) t(jections) i(of) f(graphs) f
(X) f(and) h(Y) f(in) n(to) h(2D) g(eigen) n(v) n(ector) 1392
3689 y(subspace.) p Fm 1158 3930 a(Fig.) 14 b(2.) p Fn
26 w(Example) 24 b(1:) j(graphs) f(and) f(their) h(pro) t(jections) p
Fo 648 4219 a(In) 31 b(order) f(to) h(pro) n(vide) g(an) g
(illustration) g(for) g(the) g(describ) r(ed) g(ab) r(o) n(v) n(e) g
(prop) r(ositions,) f(let) 523 4318 y(us) 41 b(consider) f(an) h
(example) g(with) h(t) n(w) n(o) e(graphs) p Fh 40 w(X) p
Fo 48 w(and) p Fh 41 w(Y) p Fo 60 w(depicted) h(in) h(Figure) e
(2\(a\).) 523 4418 y(Although) 28 b(di\013eren) n(t) f(in) h(size,) f
(the) h(t) n(w) n(o) e(graphs) g(are) h(nev) n(ertheless) f(quite) i
(similar) e(to) i(eac) n(h) 523 4518 y(other.) 35 b(In) h(fact,) h(one)
e(ma) n(y) g(see) h(graph) p Fh 35 w(Y) p Fo 54 w(as) f(an) h(enlarged)
f(v) n(ersion) f(of) i(graph) p Fh 35 w(X) p Fo 7 w(.) f(The) 523
4617 y(result) 25 b(of) g(pro) 5 b(jecting) 24 b(the) i(t) n(w) n(o) f
(graphs) e(in) n(to) i(the) h(normalized) e(2D) i(eigen) n(v) n(ector) d
(subspace) 523 4717 y(sho) n(wn) 29 b(in) g(Figure) g(2\(b\)) g
(demonstrates) f(the) i(follo) n(wing) e(t) n(w) n(o) h(imp) r(ortan) n
(t) g(features) f(of) i(the) 523 4816 y(prop) r(osed) 40
b(metho) r(d:) h(\014rstly) -7 b(,) 40 b(the) h(pro) 5
b(jections) 40 b(of) g(v) n(ertices) g(of) g(b) r(oth) h(graphs) f
(follo) n(w) f(a) 523 4916 y(similar) 30 b(pattern,) g(whic) n(h) g
(means) g(that) g(it) h(is) f(p) r(ossible) g(to) g(determine) h(o) n
(v) n(erall) d(structural) 523 5016 y(similarit) n(y) 21
b(of) g(graphs) g(with) h(di\013eren) n(t) g(n) n(um) n(b) r(er) f(of) h
(v) n(ertices,) e(and) i(secondly) -7 b(,) 21 b(one) g(ma) n(y) g(also)
p 90 rotate dyy eop
%%Page: 6 6
6 5 bop Fo 523 540 a(see) 19 b(\(b) n(y) h(examining) f(the) h(juxtap) r
(osition) f(of) h(the) g(pro) 5 b(jected) 19 b(v) n(ertices) g(of) g(b)
r(oth) h(graphs\)) f(that) 523 639 y(graph) 31 b(v) n(ertices) f(with) i
(similar) f(relational) f(prop) r(erties) h(tend) h(to) g(get) f(pro) 5
b(jected) 31 b(in) n(to) h(the) 523 739 y(areas) d(that) h(are) g
(close) g(to) g(eac) n(h) g(other.) f(These) i(prop) r(erties) e(are) h
(quite) g(v) -5 b(aluable,) 30 b(and,) h(as) 523 839
y(suc) n(h,) 26 b(ha) n(v) n(e) g(the) h(p) r(oten) n(tial) f(to) h
(pro) n(v) n(e) e(useful) i(in) f(solving) g(the) h(graph) e(matc) n
(hing) h(problem.) 523 938 y(The) i(latter) g(conjecture) g(is) g
(con\014rmed) f(b) n(y) h(the) g(exp) r(erimen) n(tal) g(results) f
(whic) n(h) i(sho) n(w) e(that) 523 1038 y(an) e(o) n(v) n(erall) d
(graph) i(similarit) n(y) g(can) g(b) r(e) h(estimated) g(b) n(y) g
(comparing) e(the) i(v) n(ertex) f(pro) 5 b(jection) 523
1137 y(distributions) 18 b(with) h(the) g(aid) g(of) f(m) n
(ulti-dimensional) g(extension) g(of) h(Kolmogoro) n(v-Smirno) n(v) 523
1237 y(\(K-S\)) 30 b(statistical) f(test.) h(Ho) n(w) n(ev) n(er,) e
(the) i(K-S) f(test) h(b) r(ecomes) g(a) f(rather) g(computationally)
523 1337 y(exp) r(ensiv) n(e) g(pro) r(cedure) f(if) i(applied) g(to) f
(high-dimensional) f(data.) h(Also,) g(it) h(do) r(es) f(not) h(help)
523 1436 y(us) 39 b(m) n(uc) n(h) h(to) f(resolv) n(e) f(another) g
(imp) r(ortan) n(t) h(issue) g(of) g(the) h(graph) f(matc) n(hing) f
(problem,) 523 1536 y(namely) -7 b(,) 37 b(the) h(one) g(of) f(reco) n
(v) n(ering) e(structurally) h(similar) h(v) n(ertex) g(corresp) r
(ondence) f(in) h(a) 523 1636 y(pair) h(of) i(graphs) d(b) r(eing) j
(compared.) e(T) -7 b(o) 38 b(this) i(end,) f(w) n(e) g(use) g
(clustering) f(metho) r(ds) i(-) f(as) 523 1735 y(follo) n(ws.) p
Fl 523 1959 a(2.3) 95 b(Clustering) 35 b(in) h(Graph) h(Eigenspaces) f
(and) h(inexact) g(solutions) e(to) 741 2059 y(subgraph) d(matc) m
(hing) p Fo 523 2200 a(This) d(eigen) n(v) n(ector) f(subspace) h
(metho) r(d) g(allo) n(ws) g(us) g(to) g(determine) h(the) g(o) n(v) n
(erall) d(similarit) n(y) 523 2299 y(of) k(a) g(pair) g(of) g(graphs) f
(b) n(y) h(the) g(p) r(ositioning) g(of) g(the) h(v) n(ertex) e(pro) 5
b(jections) 30 b(of) i(b) r(oth) f(graphs) 523 2399 y(relativ) n(e) k
(to) i(eac) n(h) e(other.) h(The) g(only) g(remaining) g(step) g(for) g
(solving) g(the) g(graph) g(matc) n(h-) 523 2499 y(ing) 29
b(problem) g(is) g(to) g(\014nd) h(the) f(corresp) r(ondence) e(among) i
(the) g(v) n(ertices) f(that) i(ha) n(v) n(e) e(similar) 523
2598 y(relational) c(prop) r(erties.) h(The) g(main) h(adv) -5
b(an) n(tage) 24 b(of) h(using) h(clustering) e(to) i(solv) n(e) e
(this) i(prob-) 523 2698 y(lem) 31 b(is) g(that) h(it) f(can) g
(equally) g(w) n(ell) g(disco) n(v) n(er) e(corresp) r(ondence) g
(relationships) h(of) h(v) -5 b(arious) 523 2798 y(t) n(yp) r(es,) 37
b(i.e.) f(it) h(is) g(not) f(limited) i(to) e(\014nding) h(the) g(b) r
(est) g(one-to-one) e(matc) n(hes) h(of) g(v) n(ertices) 523
2897 y(from) 29 b(one) g(graph) f(to) h(the) h(other,) f(but) h(it) g
(can) f(also) f(iden) n(tify) i(the) g(whole) f(sub-graphs) e(and) 523
2997 y(v) n(ertex) 22 b(groups) g(that) h(p) r(ossess) f(similar) h
(structural) f(prop) r(erties.) p Fe 2525 2967 a(2) p
Fo 2585 2997 a(In) h(order) f(to) h(realize) f(this,) 523
3096 y(w) n(e) 29 b(deplo) n(y) g(a) f(standard) h(agglomerativ) n(e) d
(clustering) j(routine) g(with) g(only) g(t) n(w) n(o) g(necessary) 523
3196 y(mo) r(di\014cations:) 21 b(\014rst,) h(the) g(algorithm) f(giv) n
(es) f(a) i(higher) f(priorit) n(y) f(for) h(clustering) g(the) i
(candi-) 523 3296 y(date) d(v) n(ertex) f(pro) 5 b(jections) 19
b(that) i(b) r(elong) f(to) g(di\013eren) n(t) g(graphs,) f(rather) g
(than) h(the) h(same) e(one;) 523 3395 y(second,) 33
b(the) h(clustering) f(pro) r(cedure) f(stops) h(as) g(so) r(on) g(as) f
(all) i(of) f(the) h(v) n(ertex) e(pro) 5 b(jections) 523
3495 y(ha) n(v) n(e) 32 b(b) r(een) i(asso) r(ciated) e(with) i(a) f
(certain) f(cluster.) h(Once) g(the) h(clustering) f(is) g(completed,)
523 3595 y(a) f(simple) g(customized) g(cluster) g(v) -5
b(alidit) n(y) 32 b(index) g(that) g(tak) n(es) g(in) n(to) f(accoun) n
(t) h(the) g(n) n(um) n(b) r(er) 523 3694 y(of) f(obtained) g(clusters)
g(and) g(their) g(qualit) n(y) f(based) h(on) g(the) h(Dice[3]) f(co) r
(e\016cien) n(t) g(form) n(ula) p Fe 3369 3664 a(3) p
Fo 523 3794 a(is) g(used) h(to) f(measure) f(the) i(similarit) n(y) e
(\(or) h(distance\)) g(of) h(a) f(pair) f(of) h(graphs.) f(Figure) h(3)
g(il-) 523 3894 y(lustrates) g(the) h(result) f(of) g(v) n(ertex) g
(pro) 5 b(jection) 30 b(clustering) h(\(Figure) g(3\(b\)\)) h(of) g(t) n
(w) n(o) e(sample) 523 3993 y(graphs) p Fh 25 w(Z) p
Fo 32 w(and) p Fh 25 w(T) p Fo 38 w(with) c(18) g(and) f(6) h(v) n
(ertices) f(resp) r(ectiv) n(ely) -7 b(,) 26 b(that) g(reco) n(v) n
(ers) d(a) j(natural) f(cor-) 523 4093 y(resp) r(ondence) h(among) g
(the) h(groups) e(of) i(v) n(ertices) e(in) i(these) g(t) n(w) n(o) f
(graphs) f(\(sho) n(wn) i(in) g(Figure) 523 4192 y(3\(a\)\).) p
Fk 523 4433 a(3) 112 b(Application) p Fo 523 4607 a(F) -7
b(or) 25 b(the) i(purp) r(ose) e(of) h(initial) g(testing) g(the) g
(prop) r(osed) f(graph) g(matc) n(hing) g(metho) r(d,) i(t) n(w) n(o) e
(ap-) 523 4707 y(plication) 33 b(areas) e(w) n(ere) h(c) n(hosen:) g
(\014rst) g(b) r(eing) h(the) g(matc) n(hing) g(of) f(shap) r(es) h
(represen) n(ted) e(b) n(y) p 523 4748 473 4 v Fc 546
4801 a(2) p Fn 606 4833 a(This) 21 b(quialit) n(y) f(can) g(b) r(e) g
(v) n(ery) f(imp) r(ortan) n(t) h(when) g(the) f(t) n(w) n(o) i(graphs)
f(ha) n(v) n(e) g(substan) n(tially) g(di\013eren) n(t) 606
4924 y(n) n(um) n(b) r(er) k(of) i(v) n(ertices.) p Fc
546 4984 a(3) p Fn 606 5016 a(analogous) i(to) d(the) h(w) n(ell-kno) n
(wn) g(\\in) n(tersection-o) n(v) n(er-union") g(measure) f(of) h(set) g
(similarit) n(y) -6 b(.) p 90 rotate dyy eop
%%Page: 7 7
7 6 bop 550 1745 a @beginspecial 0 @llx 0 @lly 190 @urx
262 @ury 1048 @rwi @setspecial
%%BeginDocument: Ex2-graphs.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\Ex2-graphs.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 190 262
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 190 262
%AI3_TileBox: 0 0 190 262
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

0 To
1.0000 0.0000 0.0000 1.0000 48.6000 190.9200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
 [] 0 d
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.7200 168.4800 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 48.6000 146.0400 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.7200 123.6000 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 47.6400 100.3200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.8400 78.7200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 48.0000 56.1600 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 44.0400 29.2800 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 70.5600 56.1600 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(11\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 33.9600 78.7200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(12\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 71.0400 101.0400 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(13\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 35.0400 123.6000 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(14\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 71.0400 146.0400 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(15\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 33.9600 167.6400 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(16\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 71.0400 190.9200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(17\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 35.0400 213.4800 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(18\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  131.7600 208.0800 m
  140.7600 208.0800 L
  142.6800 208.3200 L
  144.6000 208.9200 L
  146.2800 210.0000 L
  147.7200 211.4400 L
  148.8000 213.1200 L
  149.5200 215.0400 L
  149.7600 217.0800 L
  149.7600 226.0800 L
  149.5200 228.0000 L
  148.8000 229.8000 L
  147.7200 231.6000 L
  146.2800 232.9200 L
  144.6000 234.0000 L
  142.6800 234.7200 L
  140.7600 234.9600 L
  131.7600 234.9600 L
  129.7200 234.7200 L
  127.8000 234.0000 L
  126.1200 232.9200 L
  124.6800 231.6000 L
  123.6000 229.8000 L
  122.8800 228.0000 L
  122.7600 226.0800 L
  122.7600 217.0800 L
  122.8800 215.0400 L
  123.6000 213.1200 L
  124.6800 211.4400 L
  126.1200 210.0000 L
  127.8000 208.9200 L
  129.7200 208.3200 L
  131.7600 208.0800 L
F
U
u
0.5000 w
1 J
  131.7600 208.0800 m
  132.4800 208.0800 L
S
U
u
  134.6400 208.0800 m
  135.3600 208.0800 L
S
U
u
  137.5200 208.0800 m
  138.2400 208.0800 L
S
U
u
  140.4000 208.0800 m
  140.7600 208.0800 L
S
U
u
  140.7600 208.0800 m
  141.1200 208.0800 L
S
U
u
  143.2800 208.4400 m
  144.0000 208.6800 L
S
U
u
  145.9200 209.7600 m
  146.2800 210.0000 L
S
U
u
  146.2800 210.0000 m
  146.5200 210.2400 L
S
U
u
  147.9600 211.8000 m
  148.3200 212.4000 L
S
U
u
  149.2800 214.3200 m
  149.5200 215.0400 L
S
U
u
  149.2800 214.3200 m
  149.5200 215.0400 L
S
U
u
  149.7600 217.2000 m
  149.7600 217.9200 L
S
U
u
  149.7600 220.0800 m
  149.7600 220.8000 L
S
U
u
  149.7600 222.9600 m
  149.7600 223.6800 L
S
U
u
  149.7600 225.8400 m
  149.7600 226.0800 L
S
U
u
  149.7600 226.0800 m
  149.7600 226.5600 L
S
U
u
  149.2800 228.4800 m
  149.0400 229.2000 L
S
U
u
  148.0800 231.1200 m
  147.7200 231.6000 L
S
U
u
  147.7200 231.6000 m
  147.6000 231.7200 L
S
U
u
  145.9200 233.1600 m
  145.3200 233.5200 L
S
U
u
  143.4000 234.4800 m
  142.6800 234.7200 L
S
U
u
  143.4000 234.4800 m
  142.6800 234.7200 L
S
U
u
  140.5200 234.9600 m
  139.8000 234.9600 L
S
U
u
  137.6400 234.9600 m
  136.9200 234.9600 L
S
U
u
  134.7600 234.9600 m
  134.0400 234.9600 L
S
U
u
  131.8800 234.9600 m
  131.7600 234.9600 L
S
U
u
  131.7600 234.9600 m
  131.1600 234.8400 L
S
U
u
  129.0000 234.4800 m
  128.2800 234.2400 L
S
U
u
  126.4800 233.1600 m
  126.1200 232.9200 L
S
U
u
  126.1200 232.9200 m
  125.8800 232.6800 L
S
U
u
  124.4400 231.1200 m
  124.0800 230.5200 L
S
U
u
  123.1200 228.6000 m
  122.8800 228.0000 L
S
U
u
  123.1200 228.6000 m
  122.8800 228.0000 L
S
U
u
  122.7600 225.8400 m
  122.7600 225.1200 L
S
U
u
  122.7600 222.9600 m
  122.7600 222.2400 L
S
U
u
  122.7600 220.0800 m
  122.7600 219.3600 L
S
U
u
  122.7600 217.2000 m
  122.7600 217.0800 L
S
U
u
  122.7600 217.0800 m
  122.7600 216.4800 L
S
U
u
  123.1200 214.3200 m
  123.3600 213.6000 L
S
U
u
  124.4400 211.8000 m
  124.6800 211.4400 L
S
U
u
  124.6800 211.4400 m
  124.9200 211.2000 L
S
U
u
  126.4800 209.7600 m
  127.0800 209.4000 L
S
U
u
  129.0000 208.5600 m
  129.7200 208.3200 L
S
U
u
  129.0000 208.5600 m
  129.7200 208.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  131.7600 172.0800 m
  140.7600 172.0800 L
  142.6800 172.3200 L
  144.6000 172.9200 L
  146.2800 174.0000 L
  147.7200 175.4400 L
  148.8000 177.1200 L
  149.5200 179.0400 L
  149.7600 181.0800 L
  149.7600 190.0800 L
  149.5200 192.0000 L
  148.8000 193.9200 L
  147.7200 195.7200 L
  146.2800 197.0400 L
  144.6000 198.1200 L
  142.6800 198.8400 L
  140.7600 199.0800 L
  131.7600 199.0800 L
  129.7200 198.8400 L
  127.8000 198.1200 L
  126.1200 197.0400 L
  124.6800 195.7200 L
  123.6000 193.9200 L
  122.8800 192.0000 L
  122.7600 190.0800 L
  122.7600 181.0800 L
  122.8800 179.0400 L
  123.6000 177.1200 L
  124.6800 175.4400 L
  126.1200 174.0000 L
  127.8000 172.9200 L
  129.7200 172.3200 L
  131.7600 172.0800 L
F
U
u
0.5000 w
  131.7600 172.0800 m
  132.4800 172.0800 L
S
U
u
  134.6400 172.0800 m
  135.3600 172.0800 L
S
U
u
  137.5200 172.0800 m
  138.2400 172.0800 L
S
U
u
  140.4000 172.0800 m
  140.7600 172.0800 L
S
U
u
  140.7600 172.0800 m
  141.1200 172.0800 L
S
U
u
  143.2800 172.4400 m
  144.0000 172.6800 L
S
U
u
  145.9200 173.7600 m
  146.2800 174.0000 L
S
U
u
  146.2800 174.0000 m
  146.5200 174.2400 L
S
U
u
  147.9600 175.8000 m
  148.3200 176.4000 L
S
U
u
  149.2800 178.3200 m
  149.5200 179.0400 L
S
U
u
  149.2800 178.3200 m
  149.5200 179.0400 L
S
U
u
  149.7600 181.2000 m
  149.7600 181.9200 L
S
U
u
  149.7600 184.0800 m
  149.7600 184.8000 L
S
U
u
  149.7600 186.9600 m
  149.7600 187.6800 L
S
U
u
  149.7600 189.8400 m
  149.7600 190.0800 L
S
U
u
  149.7600 190.0800 m
  149.7600 190.5600 L
S
U
u
  149.2800 192.6000 m
  149.0400 193.3200 L
S
U
u
  148.0800 195.2400 m
  147.7200 195.7200 L
S
U
u
  147.7200 195.7200 m
  147.6000 195.8400 L
S
U
u
  145.9200 197.2800 m
  145.3200 197.6400 L
S
U
u
  143.4000 198.6000 m
  142.6800 198.8400 L
S
U
u
  143.4000 198.6000 m
  142.6800 198.8400 L
S
U
u
  140.5200 199.0800 m
  139.8000 199.0800 L
S
U
u
  137.6400 199.0800 m
  136.9200 199.0800 L
S
U
u
  134.7600 199.0800 m
  134.0400 199.0800 L
S
U
u
  131.8800 199.0800 m
  131.7600 199.0800 L
S
U
u
  131.7600 199.0800 m
  131.1600 198.9600 L
S
U
u
  129.0000 198.6000 m
  128.2800 198.3600 L
S
U
u
  126.4800 197.2800 m
  126.1200 197.0400 L
S
U
u
  126.1200 197.0400 m
  125.8800 196.8000 L
S
U
u
  124.4400 195.2400 m
  124.0800 194.6400 L
S
U
u
  123.1200 192.7200 m
  122.8800 192.0000 L
S
U
u
  123.1200 192.7200 m
  122.8800 192.0000 L
S
U
u
  122.7600 189.8400 m
  122.7600 189.1200 L
S
U
u
  122.7600 186.9600 m
  122.7600 186.2400 L
S
U
u
  122.7600 184.0800 m
  122.7600 183.3600 L
S
U
u
  122.7600 181.2000 m
  122.7600 181.0800 L
S
U
u
  122.7600 181.0800 m
  122.7600 180.4800 L
S
U
u
  123.1200 178.3200 m
  123.3600 177.6000 L
S
U
u
  124.4400 175.8000 m
  124.6800 175.4400 L
S
U
u
  124.6800 175.4400 m
  124.9200 175.2000 L
S
U
u
  126.4800 173.7600 m
  127.0800 173.4000 L
S
U
u
  129.0000 172.5600 m
  129.7200 172.3200 L
S
U
u
  129.0000 172.5600 m
  129.7200 172.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  131.7600 136.2000 m
  140.7600 136.2000 L
  142.6800 136.4400 L
  144.6000 137.0400 L
  146.2800 138.1200 L
  147.7200 139.5600 L
  148.8000 141.2400 L
  149.5200 143.1600 L
  149.7600 145.2000 L
  149.7600 154.2000 L
  149.5200 156.1200 L
  148.8000 158.0400 L
  147.7200 159.8400 L
  146.2800 161.1600 L
  144.6000 162.2400 L
  142.6800 162.9600 L
  140.7600 163.2000 L
  131.7600 163.2000 L
  129.7200 162.9600 L
  127.8000 162.2400 L
  126.1200 161.1600 L
  124.6800 159.8400 L
  123.6000 158.0400 L
  122.8800 156.1200 L
  122.7600 154.2000 L
  122.7600 145.2000 L
  122.8800 143.1600 L
  123.6000 141.2400 L
  124.6800 139.5600 L
  126.1200 138.1200 L
  127.8000 137.0400 L
  129.7200 136.4400 L
  131.7600 136.2000 L
F
U
u
0.5000 w
  131.7600 136.2000 m
  132.4800 136.2000 L
S
U
u
  134.6400 136.2000 m
  135.3600 136.2000 L
S
U
u
  137.5200 136.2000 m
  138.2400 136.2000 L
S
U
u
  140.4000 136.2000 m
  140.7600 136.2000 L
S
U
u
  140.7600 136.2000 m
  141.1200 136.2000 L
S
U
u
  143.2800 136.5600 m
  144.0000 136.8000 L
S
U
u
  145.9200 137.8800 m
  146.2800 138.1200 L
S
U
u
  146.2800 138.1200 m
  146.5200 138.3600 L
S
U
u
  147.9600 139.9200 m
  148.3200 140.5200 L
S
U
u
  149.2800 142.4400 m
  149.5200 143.1600 L
S
U
u
  149.2800 142.4400 m
  149.5200 143.1600 L
S
U
u
  149.7600 145.3200 m
  149.7600 146.0400 L
S
U
u
  149.7600 148.2000 m
  149.7600 148.9200 L
S
U
u
  149.7600 151.0800 m
  149.7600 151.8000 L
S
U
u
  149.7600 153.9600 m
  149.7600 154.2000 L
S
U
u
  149.7600 154.2000 m
  149.7600 154.6800 L
S
U
u
  149.2800 156.7200 m
  149.0400 157.4400 L
S
U
u
  148.0800 159.3600 m
  147.7200 159.8400 L
S
U
u
  147.7200 159.8400 m
  147.6000 159.9600 L
S
U
u
  145.9200 161.4000 m
  145.3200 161.7600 L
S
U
u
  143.4000 162.7200 m
  142.6800 162.9600 L
S
U
u
  143.4000 162.7200 m
  142.6800 162.9600 L
S
U
u
  140.5200 163.2000 m
  139.8000 163.2000 L
S
U
u
  137.6400 163.2000 m
  136.9200 163.2000 L
S
U
u
  134.7600 163.2000 m
  134.0400 163.2000 L
S
U
u
  131.8800 163.2000 m
  131.7600 163.2000 L
S
U
u
  131.7600 163.2000 m
  131.1600 163.0800 L
S
U
u
  129.0000 162.7200 m
  128.2800 162.4800 L
S
U
u
  126.4800 161.4000 m
  126.1200 161.1600 L
S
U
u
  126.1200 161.1600 m
  125.8800 160.9200 L
S
U
u
  124.4400 159.3600 m
  124.0800 158.7600 L
S
U
u
  123.1200 156.8400 m
  122.8800 156.1200 L
S
U
u
  123.1200 156.8400 m
  122.8800 156.1200 L
S
U
u
  122.7600 153.9600 m
  122.7600 153.2400 L
S
U
u
  122.7600 151.0800 m
  122.7600 150.3600 L
S
U
u
  122.7600 148.2000 m
  122.7600 147.4800 L
S
U
u
  122.7600 145.3200 m
  122.7600 145.2000 L
S
U
u
  122.7600 145.2000 m
  122.7600 144.6000 L
S
U
u
  123.1200 142.4400 m
  123.3600 141.7200 L
S
U
u
  124.4400 139.9200 m
  124.6800 139.5600 L
S
U
u
  124.6800 139.5600 m
  124.9200 139.3200 L
S
U
u
  126.4800 137.8800 m
  127.0800 137.5200 L
S
U
u
  129.0000 136.6800 m
  129.7200 136.4400 L
S
U
u
  129.0000 136.6800 m
  129.7200 136.4400 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  131.7600 100.2000 m
  140.7600 100.2000 L
  142.6800 100.4400 L
  144.6000 101.0400 L
  146.2800 102.1200 L
  147.7200 103.5600 L
  148.8000 105.2400 L
  149.5200 107.1600 L
  149.7600 109.2000 L
  149.7600 118.2000 L
  149.5200 120.1200 L
  148.8000 122.0400 L
  147.7200 123.8400 L
  146.2800 125.1600 L
  144.6000 126.2400 L
  142.6800 126.9600 L
  140.7600 127.2000 L
  131.7600 127.2000 L
  129.7200 126.9600 L
  127.8000 126.2400 L
  126.1200 125.1600 L
  124.6800 123.8400 L
  123.6000 122.0400 L
  122.8800 120.1200 L
  122.7600 118.2000 L
  122.7600 109.2000 L
  122.8800 107.1600 L
  123.6000 105.2400 L
  124.6800 103.5600 L
  126.1200 102.1200 L
  127.8000 101.0400 L
  129.7200 100.4400 L
  131.7600 100.2000 L
F
U
u
0.5000 w
  131.7600 100.2000 m
  132.4800 100.2000 L
S
U
u
  134.6400 100.2000 m
  135.3600 100.2000 L
S
U
u
  137.5200 100.2000 m
  138.2400 100.2000 L
S
U
u
  140.4000 100.2000 m
  140.7600 100.2000 L
S
U
u
  140.7600 100.2000 m
  141.1200 100.2000 L
S
U
u
  143.2800 100.5600 m
  144.0000 100.8000 L
S
U
u
  145.9200 101.8800 m
  146.2800 102.1200 L
S
U
u
  146.2800 102.1200 m
  146.5200 102.3600 L
S
U
u
  147.9600 103.9200 m
  148.3200 104.5200 L
S
U
u
  149.2800 106.4400 m
  149.5200 107.1600 L
S
U
u
  149.2800 106.4400 m
  149.5200 107.1600 L
S
U
u
  149.7600 109.3200 m
  149.7600 110.0400 L
S
U
u
  149.7600 112.2000 m
  149.7600 112.9200 L
S
U
u
  149.7600 115.0800 m
  149.7600 115.8000 L
S
U
u
  149.7600 117.9600 m
  149.7600 118.2000 L
S
U
u
  149.7600 118.2000 m
  149.7600 118.6800 L
S
U
u
  149.2800 120.7200 m
  149.0400 121.4400 L
S
U
u
  148.0800 123.3600 m
  147.7200 123.8400 L
S
U
u
  147.7200 123.8400 m
  147.6000 123.9600 L
S
U
u
  145.9200 125.4000 m
  145.3200 125.7600 L
S
U
u
  143.4000 126.7200 m
  142.6800 126.9600 L
S
U
u
  143.4000 126.7200 m
  142.6800 126.9600 L
S
U
u
  140.5200 127.2000 m
  139.8000 127.2000 L
S
U
u
  137.6400 127.2000 m
  136.9200 127.2000 L
S
U
u
  134.7600 127.2000 m
  134.0400 127.2000 L
S
U
u
  131.8800 127.2000 m
  131.7600 127.2000 L
S
U
u
  131.7600 127.2000 m
  131.1600 127.0800 L
S
U
u
  129.0000 126.7200 m
  128.2800 126.4800 L
S
U
u
  126.4800 125.4000 m
  126.1200 125.1600 L
S
U
u
  126.1200 125.1600 m
  125.8800 124.9200 L
S
U
u
  124.4400 123.3600 m
  124.0800 122.7600 L
S
U
u
  123.1200 120.8400 m
  122.8800 120.1200 L
S
U
u
  123.1200 120.8400 m
  122.8800 120.1200 L
S
U
u
  122.7600 117.9600 m
  122.7600 117.2400 L
S
U
u
  122.7600 115.0800 m
  122.7600 114.3600 L
S
U
u
  122.7600 112.2000 m
  122.7600 111.4800 L
S
U
u
  122.7600 109.3200 m
  122.7600 109.2000 L
S
U
u
  122.7600 109.2000 m
  122.7600 108.6000 L
S
U
u
  123.1200 106.4400 m
  123.3600 105.7200 L
S
U
u
  124.4400 103.9200 m
  124.6800 103.5600 L
S
U
u
  124.6800 103.5600 m
  124.9200 103.3200 L
S
U
u
  126.4800 101.8800 m
  127.0800 101.5200 L
S
U
u
  129.0000 100.6800 m
  129.7200 100.4400 L
S
U
u
  129.0000 100.6800 m
  129.7200 100.4400 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  131.7600 28.4400 m
  140.7600 28.4400 L
  142.6800 28.6800 L
  144.6000 29.2800 L
  146.2800 30.3600 L
  147.7200 31.8000 L
  148.8000 33.3600 L
  149.5200 35.2800 L
  149.7600 37.3200 L
  149.7600 46.3200 L
  149.5200 48.2400 L
  148.8000 50.1600 L
  147.7200 51.9600 L
  146.2800 53.2800 L
  144.6000 54.3600 L
  142.6800 55.0800 L
  140.7600 55.3200 L
  131.7600 55.3200 L
  129.7200 55.0800 L
  127.8000 54.3600 L
  126.1200 53.2800 L
  124.6800 51.9600 L
  123.6000 50.1600 L
  122.8800 48.2400 L
  122.7600 46.3200 L
  122.7600 37.3200 L
  122.8800 35.2800 L
  123.6000 33.3600 L
  124.6800 31.8000 L
  126.1200 30.3600 L
  127.8000 29.2800 L
  129.7200 28.6800 L
  131.7600 28.4400 L
F
U
u
0.5000 w
  131.7600 28.4400 m
  132.4800 28.4400 L
S
U
u
  134.6400 28.4400 m
  135.3600 28.4400 L
S
U
u
  137.5200 28.4400 m
  138.2400 28.4400 L
S
U
u
  140.4000 28.4400 m
  140.7600 28.4400 L
S
U
u
  140.7600 28.4400 m
  141.1200 28.4400 L
S
U
u
  143.2800 28.8000 m
  144.0000 29.0400 L
S
U
u
  145.9200 30.1200 m
  146.2800 30.3600 L
S
U
u
  146.2800 30.3600 m
  146.5200 30.6000 L
S
U
u
  147.9600 32.1600 m
  148.3200 32.6400 L
S
U
u
  149.2800 34.5600 m
  149.5200 35.2800 L
S
U
u
  149.2800 34.5600 m
  149.5200 35.2800 L
S
U
u
  149.7600 37.4400 m
  149.7600 38.1600 L
S
U
u
  149.7600 40.3200 m
  149.7600 41.0400 L
S
U
u
  149.7600 43.2000 m
  149.7600 43.9200 L
S
U
u
  149.7600 46.0800 m
  149.7600 46.3200 L
S
U
u
  149.7600 46.3200 m
  149.7600 46.8000 L
S
U
u
  149.2800 48.8400 m
  149.0400 49.5600 L
S
U
u
  148.0800 51.4800 m
  147.7200 51.9600 L
S
U
u
  147.7200 51.9600 m
  147.6000 52.0800 L
S
U
u
  145.9200 53.5200 m
  145.3200 53.8800 L
S
U
u
  143.4000 54.8400 m
  142.6800 55.0800 L
S
U
u
  143.4000 54.8400 m
  142.6800 55.0800 L
S
U
u
  140.5200 55.3200 m
  139.8000 55.3200 L
S
U
u
  137.6400 55.3200 m
  136.9200 55.3200 L
S
U
u
  134.7600 55.3200 m
  134.0400 55.3200 L
S
U
u
  131.8800 55.3200 m
  131.7600 55.3200 L
S
U
u
  131.7600 55.3200 m
  131.1600 55.2000 L
S
U
u
  129.0000 54.8400 m
  128.2800 54.6000 L
S
U
u
  126.4800 53.5200 m
  126.1200 53.2800 L
S
U
u
  126.1200 53.2800 m
  125.8800 53.0400 L
S
U
u
  124.4400 51.4800 m
  124.0800 50.8800 L
S
U
u
  123.1200 48.9600 m
  122.8800 48.2400 L
S
U
u
  123.1200 48.9600 m
  122.8800 48.2400 L
S
U
u
  122.7600 46.0800 m
  122.7600 45.3600 L
S
U
u
  122.7600 43.2000 m
  122.7600 42.4800 L
S
U
u
  122.7600 40.3200 m
  122.7600 39.6000 L
S
U
u
  122.7600 37.4400 m
  122.7600 37.3200 L
S
U
u
  122.7600 37.3200 m
  122.7600 36.7200 L
S
U
u
  123.1200 34.5600 m
  123.3600 33.8400 L
S
U
u
  124.4400 32.1600 m
  124.6800 31.8000 L
S
U
u
  124.6800 31.8000 m
  124.9200 31.5600 L
S
U
u
  126.4800 30.1200 m
  127.0800 29.7600 L
S
U
u
  129.0000 28.9200 m
  129.7200 28.6800 L
S
U
u
  129.0000 28.9200 m
  129.7200 28.6800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  131.7600 64.3200 m
  140.7600 64.3200 L
  142.6800 64.5600 L
  144.6000 65.1600 L
  146.2800 66.2400 L
  147.7200 67.6800 L
  148.8000 69.3600 L
  149.5200 71.2800 L
  149.7600 73.3200 L
  149.7600 82.3200 L
  149.5200 84.2400 L
  148.8000 86.1600 L
  147.7200 87.9600 L
  146.2800 89.2800 L
  144.6000 90.3600 L
  142.6800 91.0800 L
  140.7600 91.3200 L
  131.7600 91.3200 L
  129.7200 91.0800 L
  127.8000 90.3600 L
  126.1200 89.2800 L
  124.6800 87.9600 L
  123.6000 86.1600 L
  122.8800 84.2400 L
  122.7600 82.3200 L
  122.7600 73.3200 L
  122.8800 71.2800 L
  123.6000 69.3600 L
  124.6800 67.6800 L
  126.1200 66.2400 L
  127.8000 65.1600 L
  129.7200 64.5600 L
  131.7600 64.3200 L
F
U
u
0.5000 w
  131.7600 64.3200 m
  132.4800 64.3200 L
S
U
u
  134.6400 64.3200 m
  135.3600 64.3200 L
S
U
u
  137.5200 64.3200 m
  138.2400 64.3200 L
S
U
u
  140.4000 64.3200 m
  140.7600 64.3200 L
S
U
u
  140.7600 64.3200 m
  141.1200 64.3200 L
S
U
u
  143.2800 64.6800 m
  144.0000 64.9200 L
S
U
u
  145.9200 66.0000 m
  146.2800 66.2400 L
S
U
u
  146.2800 66.2400 m
  146.5200 66.4800 L
S
U
u
  147.9600 68.0400 m
  148.3200 68.6400 L
S
U
u
  149.2800 70.5600 m
  149.5200 71.2800 L
S
U
u
  149.2800 70.5600 m
  149.5200 71.2800 L
S
U
u
  149.7600 73.4400 m
  149.7600 74.1600 L
S
U
u
  149.7600 76.3200 m
  149.7600 77.0400 L
S
U
u
  149.7600 79.2000 m
  149.7600 79.9200 L
S
U
u
  149.7600 82.0800 m
  149.7600 82.3200 L
S
U
u
  149.7600 82.3200 m
  149.7600 82.8000 L
S
U
u
  149.2800 84.8400 m
  149.0400 85.5600 L
S
U
u
  148.0800 87.4800 m
  147.7200 87.9600 L
S
U
u
  147.7200 87.9600 m
  147.6000 88.0800 L
S
U
u
  145.9200 89.5200 m
  145.3200 89.8800 L
S
U
u
  143.4000 90.8400 m
  142.6800 91.0800 L
S
U
u
  143.4000 90.8400 m
  142.6800 91.0800 L
S
U
u
  140.5200 91.3200 m
  139.8000 91.3200 L
S
U
u
  137.6400 91.3200 m
  136.9200 91.3200 L
S
U
u
  134.7600 91.3200 m
  134.0400 91.3200 L
S
U
u
  131.8800 91.3200 m
  131.7600 91.3200 L
S
U
u
  131.7600 91.3200 m
  131.1600 91.2000 L
S
U
u
  129.0000 90.8400 m
  128.2800 90.6000 L
S
U
u
  126.4800 89.5200 m
  126.1200 89.2800 L
S
U
u
  126.1200 89.2800 m
  125.8800 89.0400 L
S
U
u
  124.4400 87.4800 m
  124.0800 86.8800 L
S
U
u
  123.1200 84.9600 m
  122.8800 84.2400 L
S
U
u
  123.1200 84.9600 m
  122.8800 84.2400 L
S
U
u
  122.7600 82.0800 m
  122.7600 81.3600 L
S
U
u
  122.7600 79.2000 m
  122.7600 78.4800 L
S
U
u
  122.7600 76.3200 m
  122.7600 75.6000 L
S
U
u
  122.7600 73.4400 m
  122.7600 73.3200 L
S
U
u
  122.7600 73.3200 m
  122.7600 72.7200 L
S
U
u
  123.1200 70.5600 m
  123.3600 69.8400 L
S
U
u
  124.4400 68.0400 m
  124.6800 67.6800 L
S
U
u
  124.6800 67.6800 m
  124.9200 67.4400 L
S
U
u
  126.4800 66.0000 m
  127.0800 65.6400 L
S
U
u
  129.0000 64.8000 m
  129.7200 64.5600 L
S
U
u
  129.0000 64.8000 m
  129.7200 64.5600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 64.3200 239.1600 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.8400 216.8400 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  131.7600 230.4000 m
  131.7600 194.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  131.7600 227.0400 m
  132.9600 227.2800 L
  133.9200 227.8800 L
  134.7600 228.7200 L
  135.1200 229.8000 L
  135.1200 231.0000 L
  134.7600 232.2000 L
  133.9200 233.1600 L
  132.9600 233.7600 L
  131.7600 233.8800 L
  130.4400 233.7600 L
  129.4800 233.1600 L
  128.6400 232.2000 L
  128.2800 231.0000 L
  128.2800 229.8000 L
  128.6400 228.7200 L
  129.4800 227.8800 L
  130.4400 227.2800 L
  131.7600 227.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 198.0000 m
  130.4400 197.8800 L
  129.4800 197.2800 L
  128.6400 196.3200 L
  128.2800 195.1200 L
  128.2800 193.9200 L
  128.6400 192.8400 L
  129.4800 191.8800 L
  130.4400 191.2800 L
  131.7600 191.0400 L
  132.9600 191.2800 L
  133.9200 191.8800 L
  134.7600 192.8400 L
  135.1200 193.9200 L
  135.1200 195.1200 L
  134.7600 196.3200 L
  133.9200 197.2800 L
  132.9600 197.8800 L
  131.7600 198.0000 L
F
U
u
2.0000 w
  59.8800 243.9600 m
  59.8800 221.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 240.3600 m
  61.0800 240.6000 L
  62.0400 241.2000 L
  62.8800 242.1600 L
  63.2400 243.3600 L
  63.2400 244.5600 L
  62.8800 245.6400 L
  62.0400 246.6000 L
  61.0800 247.2000 L
  59.8800 247.4400 L
  58.5600 247.2000 L
  57.6000 246.6000 L
  56.7600 245.6400 L
  56.4000 244.5600 L
  56.4000 243.3600 L
  56.7600 242.1600 L
  57.6000 241.2000 L
  58.5600 240.6000 L
  59.8800 240.3600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 225.0000 m
  58.5600 224.8800 L
  57.6000 224.2800 L
  56.7600 223.3200 L
  56.4000 222.1200 L
  56.4000 220.9200 L
  56.7600 219.8400 L
  57.6000 218.8800 L
  58.5600 218.2800 L
  59.8800 218.0400 L
  61.0800 218.2800 L
  62.0400 218.8800 L
  62.8800 219.8400 L
  63.2400 220.9200 L
  63.2400 222.1200 L
  62.8800 223.3200 L
  62.0400 224.2800 L
  61.0800 224.8800 L
  59.8800 225.0000 L
F
U
u
2.0000 w
  59.8800 221.5200 m
  59.8800 199.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 218.0400 m
  61.0800 218.2800 L
  62.0400 218.8800 L
  62.8800 219.8400 L
  63.2400 220.9200 L
  63.2400 222.1200 L
  62.8800 223.3200 L
  62.0400 224.2800 L
  61.0800 224.8800 L
  59.8800 225.0000 L
  58.5600 224.8800 L
  57.6000 224.2800 L
  56.7600 223.3200 L
  56.4000 222.1200 L
  56.4000 220.9200 L
  56.7600 219.8400 L
  57.6000 218.8800 L
  58.5600 218.2800 L
  59.8800 218.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 202.5600 m
  58.5600 202.3200 L
  57.6000 201.7200 L
  56.7600 200.7600 L
  56.4000 199.6800 L
  56.4000 198.4800 L
  56.7600 197.2800 L
  57.6000 196.3200 L
  58.5600 195.7200 L
  59.8800 195.4800 L
  61.0800 195.7200 L
  62.0400 196.3200 L
  62.8800 197.2800 L
  63.2400 198.4800 L
  63.2400 199.6800 L
  62.8800 200.7600 L
  62.0400 201.7200 L
  61.0800 202.3200 L
  59.8800 202.5600 L
F
U
u
2.0000 w
  59.8800 199.0800 m
  77.8800 185.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  62.6400 196.9200 m
  63.1200 198.0000 L
  63.3600 199.2000 L
  63.0000 200.4000 L
  62.4000 201.4800 L
  61.4400 202.2000 L
  60.2400 202.5600 L
  59.0400 202.4400 L
  57.9600 201.9600 L
  57.0000 201.1200 L
  56.5200 200.0400 L
  56.2800 198.8400 L
  56.6400 197.6400 L
  57.2400 196.6800 L
  58.2000 195.9600 L
  59.4000 195.6000 L
  60.6000 195.6000 L
  61.6800 196.0800 L
  62.6400 196.9200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  75.0000 187.6800 m
  74.5200 186.6000 L
  74.2800 185.4000 L
  74.6400 184.2000 L
  75.2400 183.1200 L
  76.2000 182.4000 L
  77.4000 182.0400 L
  78.6000 182.1600 L
  79.6800 182.6400 L
  80.6400 183.4800 L
  81.1200 184.5600 L
  81.3600 185.7600 L
  81.0000 186.9600 L
  80.4000 187.9200 L
  79.4400 188.6400 L
  78.2400 189.0000 L
  77.0400 189.0000 L
  75.9600 188.5200 L
  75.0000 187.6800 L
F
U
u
2.0000 w
  131.7600 194.5200 m
  131.7600 158.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  131.7600 191.0400 m
  132.9600 191.2800 L
  133.9200 191.8800 L
  134.7600 192.8400 L
  135.1200 193.9200 L
  135.1200 195.1200 L
  134.7600 196.3200 L
  133.9200 197.2800 L
  132.9600 197.8800 L
  131.7600 198.0000 L
  130.4400 197.8800 L
  129.4800 197.2800 L
  128.6400 196.3200 L
  128.2800 195.1200 L
  128.2800 193.9200 L
  128.6400 192.8400 L
  129.4800 191.8800 L
  130.4400 191.2800 L
  131.7600 191.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 162.1200 m
  130.4400 162.0000 L
  129.4800 161.4000 L
  128.6400 160.4400 L
  128.2800 159.2400 L
  128.2800 158.0400 L
  128.6400 156.9600 L
  129.4800 156.0000 L
  130.4400 155.4000 L
  131.7600 155.1600 L
  132.9600 155.4000 L
  133.9200 156.0000 L
  134.7600 156.9600 L
  135.1200 158.0400 L
  135.1200 159.2400 L
  134.7600 160.4400 L
  133.9200 161.4000 L
  132.9600 162.0000 L
  131.7600 162.1200 L
F
U
u
2.0000 w
  131.7600 158.6400 m
  131.7600 122.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  131.7600 155.1600 m
  132.9600 155.4000 L
  133.9200 156.0000 L
  134.7600 156.9600 L
  135.1200 158.0400 L
  135.1200 159.2400 L
  134.7600 160.4400 L
  133.9200 161.4000 L
  132.9600 162.0000 L
  131.7600 162.1200 L
  130.4400 162.0000 L
  129.4800 161.4000 L
  128.6400 160.4400 L
  128.2800 159.2400 L
  128.2800 158.0400 L
  128.6400 156.9600 L
  129.4800 156.0000 L
  130.4400 155.4000 L
  131.7600 155.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 126.1200 m
  130.4400 126.0000 L
  129.4800 125.4000 L
  128.6400 124.4400 L
  128.2800 123.2400 L
  128.2800 122.0400 L
  128.6400 120.9600 L
  129.4800 120.0000 L
  130.4400 119.4000 L
  131.7600 119.1600 L
  132.9600 119.4000 L
  133.9200 120.0000 L
  134.7600 120.9600 L
  135.1200 122.0400 L
  135.1200 123.2400 L
  134.7600 124.4400 L
  133.9200 125.4000 L
  132.9600 126.0000 L
  131.7600 126.1200 L
F
U
u
2.0000 w
  131.7600 122.6400 m
  131.7600 86.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  131.7600 119.1600 m
  132.9600 119.4000 L
  133.9200 120.0000 L
  134.7600 120.9600 L
  135.1200 122.0400 L
  135.1200 123.2400 L
  134.7600 124.4400 L
  133.9200 125.4000 L
  132.9600 126.0000 L
  131.7600 126.1200 L
  130.4400 126.0000 L
  129.4800 125.4000 L
  128.6400 124.4400 L
  128.2800 123.2400 L
  128.2800 122.0400 L
  128.6400 120.9600 L
  129.4800 120.0000 L
  130.4400 119.4000 L
  131.7600 119.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 90.2400 m
  130.4400 90.1200 L
  129.4800 89.5200 L
  128.6400 88.5600 L
  128.2800 87.3600 L
  128.2800 86.1600 L
  128.6400 85.0800 L
  129.4800 84.1200 L
  130.4400 83.5200 L
  131.7600 83.2800 L
  132.9600 83.5200 L
  133.9200 84.1200 L
  134.7600 85.0800 L
  135.1200 86.1600 L
  135.1200 87.3600 L
  134.7600 88.5600 L
  133.9200 89.5200 L
  132.9600 90.1200 L
  131.7600 90.2400 L
F
U
u
2.0000 w
  131.7600 86.7600 m
  131.7600 50.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  131.7600 83.2800 m
  132.9600 83.5200 L
  133.9200 84.1200 L
  134.7600 85.0800 L
  135.1200 86.1600 L
  135.1200 87.3600 L
  134.7600 88.5600 L
  133.9200 89.5200 L
  132.9600 90.1200 L
  131.7600 90.2400 L
  130.4400 90.1200 L
  129.4800 89.5200 L
  128.6400 88.5600 L
  128.2800 87.3600 L
  128.2800 86.1600 L
  128.6400 85.0800 L
  129.4800 84.1200 L
  130.4400 83.5200 L
  131.7600 83.2800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  131.7600 54.2400 m
  130.4400 54.1200 L
  129.4800 53.5200 L
  128.6400 52.5600 L
  128.2800 51.3600 L
  128.2800 50.1600 L
  128.6400 49.0800 L
  129.4800 48.1200 L
  130.4400 47.5200 L
  131.7600 47.2800 L
  132.9600 47.5200 L
  133.9200 48.1200 L
  134.7600 49.0800 L
  135.1200 50.1600 L
  135.1200 51.3600 L
  134.7600 52.5600 L
  133.9200 53.5200 L
  132.9600 54.1200 L
  131.7600 54.2400 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 222.4800 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 186.4800 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 150.6000 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 114.6000 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 78.7200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 140.1600 42.7200 0 Tp
TP
93.445247 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  89.6400 70.8000 m
  93.9600 66.9600 L
S
U
u
  96.7200 64.6800 m
  100.9200 60.8400 L
S
U
u
  103.6800 58.4400 m
  108.0000 54.6000 L
S
U
u
  110.7600 52.3200 m
  115.0800 48.4800 L
S
U
u
  117.8400 46.0800 m
  119.8800 44.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 73.3200 m
  92.2800 71.8800 L
  91.0800 71.2800 L
  90.1200 70.3200 L
  89.4000 69.2400 L
  88.9200 68.0400 L
  86.8800 73.3200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 41.7600 m
  117.2400 43.2000 L
  118.4400 43.8000 L
  119.4000 44.7600 L
  120.1200 45.8400 L
  120.6000 47.0400 L
  122.7600 41.7600 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 97.2000 243.0000 0 Tp
TP
101.222380 Tz
/_Helvetica-BoldOblique 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Graph T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  59.8800 221.5200 m
  41.8800 208.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  57.0000 219.4800 m
  57.9600 218.6400 L
  59.0400 218.1600 L
  60.2400 218.0400 L
  61.4400 218.4000 L
  62.4000 219.1200 L
  63.0000 220.2000 L
  63.3600 221.4000 L
  63.1200 222.6000 L
  62.6400 223.6800 L
  61.6800 224.5200 L
  60.6000 225.0000 L
  59.4000 225.0000 L
  58.2000 224.6400 L
  57.2400 223.9200 L
  56.6400 222.9600 L
  56.2800 221.7600 L
  56.5200 220.5600 L
  57.0000 219.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  44.6400 210.1200 m
  43.6800 210.9600 L
  42.6000 211.4400 L
  41.4000 211.5600 L
  40.2000 211.2000 L
  39.2400 210.4800 L
  38.6400 209.4000 L
  38.2800 208.2000 L
  38.5200 207.0000 L
  39.0000 205.9200 L
  39.9600 205.0800 L
  41.0400 204.6000 L
  42.2400 204.6000 L
  43.4400 204.9600 L
  44.4000 205.6800 L
  45.0000 206.6400 L
  45.3600 207.8400 L
  45.1200 209.0400 L
  44.6400 210.1200 L
F
U
u
2.0000 w
  59.8800 199.0800 m
  59.8800 176.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 195.4800 m
  61.0800 195.7200 L
  62.0400 196.3200 L
  62.8800 197.2800 L
  63.2400 198.4800 L
  63.2400 199.6800 L
  62.8800 200.7600 L
  62.0400 201.7200 L
  61.0800 202.3200 L
  59.8800 202.5600 L
  58.5600 202.3200 L
  57.6000 201.7200 L
  56.7600 200.7600 L
  56.4000 199.6800 L
  56.4000 198.4800 L
  56.7600 197.2800 L
  57.6000 196.3200 L
  58.5600 195.7200 L
  59.8800 195.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 180.0000 m
  58.5600 179.8800 L
  57.6000 179.2800 L
  56.7600 178.3200 L
  56.4000 177.1200 L
  56.4000 175.9200 L
  56.7600 174.8400 L
  57.6000 173.8800 L
  58.5600 173.2800 L
  59.8800 173.0400 L
  61.0800 173.2800 L
  62.0400 173.8800 L
  62.8800 174.8400 L
  63.2400 175.9200 L
  63.2400 177.1200 L
  62.8800 178.3200 L
  62.0400 179.2800 L
  61.0800 179.8800 L
  59.8800 180.0000 L
F
U
u
2.0000 w
  59.8800 176.5200 m
  59.8800 154.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 173.0400 m
  61.0800 173.2800 L
  62.0400 173.8800 L
  62.8800 174.8400 L
  63.2400 175.9200 L
  63.2400 177.1200 L
  62.8800 178.3200 L
  62.0400 179.2800 L
  61.0800 179.8800 L
  59.8800 180.0000 L
  58.5600 179.8800 L
  57.6000 179.2800 L
  56.7600 178.3200 L
  56.4000 177.1200 L
  56.4000 175.9200 L
  56.7600 174.8400 L
  57.6000 173.8800 L
  58.5600 173.2800 L
  59.8800 173.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 157.6800 m
  58.5600 157.4400 L
  57.6000 156.8400 L
  56.7600 155.8800 L
  56.4000 154.8000 L
  56.4000 153.6000 L
  56.7600 152.4000 L
  57.6000 151.4400 L
  58.5600 150.8400 L
  59.8800 150.6000 L
  61.0800 150.8400 L
  62.0400 151.4400 L
  62.8800 152.4000 L
  63.2400 153.6000 L
  63.2400 154.8000 L
  62.8800 155.8800 L
  62.0400 156.8400 L
  61.0800 157.4400 L
  59.8800 157.6800 L
F
U
u
2.0000 w
  59.8800 154.2000 m
  59.8800 131.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 150.6000 m
  61.0800 150.8400 L
  62.0400 151.4400 L
  62.8800 152.4000 L
  63.2400 153.6000 L
  63.2400 154.8000 L
  62.8800 155.8800 L
  62.0400 156.8400 L
  61.0800 157.4400 L
  59.8800 157.6800 L
  58.5600 157.4400 L
  57.6000 156.8400 L
  56.7600 155.8800 L
  56.4000 154.8000 L
  56.4000 153.6000 L
  56.7600 152.4000 L
  57.6000 151.4400 L
  58.5600 150.8400 L
  59.8800 150.6000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 135.1200 m
  58.5600 135.0000 L
  57.6000 134.4000 L
  56.7600 133.4400 L
  56.4000 132.2400 L
  56.4000 131.0400 L
  56.7600 129.9600 L
  57.6000 129.0000 L
  58.5600 128.4000 L
  59.8800 128.1600 L
  61.0800 128.4000 L
  62.0400 129.0000 L
  62.8800 129.9600 L
  63.2400 131.0400 L
  63.2400 132.2400 L
  62.8800 133.4400 L
  62.0400 134.4000 L
  61.0800 135.0000 L
  59.8800 135.1200 L
F
U
u
2.0000 w
  59.8800 131.6400 m
  59.8800 109.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 128.1600 m
  61.0800 128.4000 L
  62.0400 129.0000 L
  62.8800 129.9600 L
  63.2400 131.0400 L
  63.2400 132.2400 L
  62.8800 133.4400 L
  62.0400 134.4000 L
  61.0800 135.0000 L
  59.8800 135.1200 L
  58.5600 135.0000 L
  57.6000 134.4000 L
  56.7600 133.4400 L
  56.4000 132.2400 L
  56.4000 131.0400 L
  56.7600 129.9600 L
  57.6000 129.0000 L
  58.5600 128.4000 L
  59.8800 128.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 112.6800 m
  58.5600 112.4400 L
  57.6000 111.8400 L
  56.7600 110.8800 L
  56.4000 109.8000 L
  56.4000 108.6000 L
  56.7600 107.4000 L
  57.6000 106.4400 L
  58.5600 105.8400 L
  59.8800 105.6000 L
  61.0800 105.8400 L
  62.0400 106.4400 L
  62.8800 107.4000 L
  63.2400 108.6000 L
  63.2400 109.8000 L
  62.8800 110.8800 L
  62.0400 111.8400 L
  61.0800 112.4400 L
  59.8800 112.6800 L
F
U
u
2.0000 w
  59.8800 109.2000 m
  59.8800 86.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 105.6000 m
  61.0800 105.8400 L
  62.0400 106.4400 L
  62.8800 107.4000 L
  63.2400 108.6000 L
  63.2400 109.8000 L
  62.8800 110.8800 L
  62.0400 111.8400 L
  61.0800 112.4400 L
  59.8800 112.6800 L
  58.5600 112.4400 L
  57.6000 111.8400 L
  56.7600 110.8800 L
  56.4000 109.8000 L
  56.4000 108.6000 L
  56.7600 107.4000 L
  57.6000 106.4400 L
  58.5600 105.8400 L
  59.8800 105.6000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 90.2400 m
  58.5600 90.1200 L
  57.6000 89.5200 L
  56.7600 88.5600 L
  56.4000 87.3600 L
  56.4000 86.1600 L
  56.7600 85.0800 L
  57.6000 84.1200 L
  58.5600 83.5200 L
  59.8800 83.2800 L
  61.0800 83.5200 L
  62.0400 84.1200 L
  62.8800 85.0800 L
  63.2400 86.1600 L
  63.2400 87.3600 L
  62.8800 88.5600 L
  62.0400 89.5200 L
  61.0800 90.1200 L
  59.8800 90.2400 L
F
U
u
2.0000 w
  59.8800 86.7600 m
  59.8800 64.3200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 83.2800 m
  61.0800 83.5200 L
  62.0400 84.1200 L
  62.8800 85.0800 L
  63.2400 86.1600 L
  63.2400 87.3600 L
  62.8800 88.5600 L
  62.0400 89.5200 L
  61.0800 90.1200 L
  59.8800 90.2400 L
  58.5600 90.1200 L
  57.6000 89.5200 L
  56.7600 88.5600 L
  56.4000 87.3600 L
  56.4000 86.1600 L
  56.7600 85.0800 L
  57.6000 84.1200 L
  58.5600 83.5200 L
  59.8800 83.2800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 67.8000 m
  58.5600 67.5600 L
  57.6000 66.9600 L
  56.7600 66.0000 L
  56.4000 64.9200 L
  56.4000 63.7200 L
  56.7600 62.5200 L
  57.6000 61.5600 L
  58.5600 60.9600 L
  59.8800 60.7200 L
  61.0800 60.9600 L
  62.0400 61.5600 L
  62.8800 62.5200 L
  63.2400 63.7200 L
  63.2400 64.9200 L
  62.8800 66.0000 L
  62.0400 66.9600 L
  61.0800 67.5600 L
  59.8800 67.8000 L
F
U
u
2.0000 w
  59.8800 176.5200 m
  41.8800 163.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  57.0000 174.4800 m
  57.9600 173.6400 L
  59.0400 173.1600 L
  60.2400 173.0400 L
  61.4400 173.4000 L
  62.4000 174.1200 L
  63.0000 175.2000 L
  63.3600 176.4000 L
  63.1200 177.6000 L
  62.6400 178.6800 L
  61.6800 179.5200 L
  60.6000 180.0000 L
  59.4000 180.0000 L
  58.2000 179.6400 L
  57.2400 178.9200 L
  56.6400 177.9600 L
  56.2800 176.7600 L
  56.5200 175.5600 L
  57.0000 174.4800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  44.6400 165.1200 m
  43.6800 165.9600 L
  42.6000 166.4400 L
  41.4000 166.5600 L
  40.2000 166.2000 L
  39.2400 165.4800 L
  38.6400 164.4000 L
  38.2800 163.2000 L
  38.5200 162.1200 L
  39.0000 161.0400 L
  39.9600 160.2000 L
  41.0400 159.7200 L
  42.2400 159.7200 L
  43.4400 160.0800 L
  44.4000 160.8000 L
  45.0000 161.7600 L
  45.3600 162.9600 L
  45.1200 164.0400 L
  44.6400 165.1200 L
F
U
u
2.0000 w
  59.8800 154.2000 m
  77.8800 140.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  62.6400 152.0400 m
  63.1200 153.1200 L
  63.3600 154.3200 L
  63.0000 155.5200 L
  62.4000 156.6000 L
  61.4400 157.3200 L
  60.2400 157.6800 L
  59.0400 157.5600 L
  57.9600 157.0800 L
  57.0000 156.2400 L
  56.5200 155.1600 L
  56.2800 153.9600 L
  56.6400 152.7600 L
  57.2400 151.8000 L
  58.2000 151.0800 L
  59.4000 150.7200 L
  60.6000 150.7200 L
  61.6800 151.2000 L
  62.6400 152.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  75.0000 142.8000 m
  74.5200 141.7200 L
  74.2800 140.5200 L
  74.6400 139.3200 L
  75.2400 138.2400 L
  76.2000 137.5200 L
  77.4000 137.1600 L
  78.6000 137.2800 L
  79.6800 137.7600 L
  80.6400 138.6000 L
  81.1200 139.6800 L
  81.3600 140.8800 L
  81.0000 142.0800 L
  80.4000 143.0400 L
  79.4400 143.7600 L
  78.2400 144.1200 L
  77.0400 144.1200 L
  75.9600 143.6400 L
  75.0000 142.8000 L
F
U
u
2.0000 w
  59.8800 131.6400 m
  41.8800 118.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  57.0000 129.6000 m
  57.9600 128.7600 L
  59.0400 128.2800 L
  60.2400 128.1600 L
  61.4400 128.5200 L
  62.4000 129.2400 L
  63.0000 130.3200 L
  63.3600 131.5200 L
  63.1200 132.7200 L
  62.6400 133.8000 L
  61.6800 134.6400 L
  60.6000 135.1200 L
  59.4000 135.1200 L
  58.2000 134.7600 L
  57.2400 134.0400 L
  56.6400 133.0800 L
  56.2800 131.8800 L
  56.5200 130.6800 L
  57.0000 129.6000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  44.6400 120.2400 m
  43.6800 121.0800 L
  42.6000 121.5600 L
  41.4000 121.6800 L
  40.2000 121.3200 L
  39.2400 120.6000 L
  38.6400 119.5200 L
  38.2800 118.3200 L
  38.5200 117.1200 L
  39.0000 116.0400 L
  39.9600 115.2000 L
  41.0400 114.7200 L
  42.2400 114.7200 L
  43.4400 115.0800 L
  44.4000 115.8000 L
  45.0000 116.7600 L
  45.3600 117.9600 L
  45.1200 119.1600 L
  44.6400 120.2400 L
F
U
u
2.0000 w
  59.8800 109.2000 m
  77.8800 95.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  62.6400 107.0400 m
  63.1200 108.1200 L
  63.3600 109.3200 L
  63.0000 110.5200 L
  62.4000 111.6000 L
  61.4400 112.3200 L
  60.2400 112.6800 L
  59.0400 112.5600 L
  57.9600 112.0800 L
  57.0000 111.2400 L
  56.5200 110.1600 L
  56.2800 108.9600 L
  56.6400 107.7600 L
  57.2400 106.8000 L
  58.2000 106.0800 L
  59.4000 105.7200 L
  60.6000 105.7200 L
  61.6800 106.2000 L
  62.6400 107.0400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  75.0000 97.9200 m
  74.5200 96.8400 L
  74.2800 95.6400 L
  74.6400 94.4400 L
  75.2400 93.3600 L
  76.2000 92.6400 L
  77.4000 92.2800 L
  78.6000 92.4000 L
  79.6800 92.8800 L
  80.6400 93.7200 L
  81.1200 94.8000 L
  81.3600 96.0000 L
  81.0000 97.2000 L
  80.4000 98.0400 L
  79.4400 98.7600 L
  78.2400 99.1200 L
  77.0400 99.1200 L
  75.9600 98.6400 L
  75.0000 97.9200 L
F
U
u
2.0000 w
  59.8800 64.3200 m
  59.8800 41.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  59.8800 60.7200 m
  61.0800 60.9600 L
  62.0400 61.5600 L
  62.8800 62.5200 L
  63.2400 63.7200 L
  63.2400 64.9200 L
  62.8800 66.0000 L
  62.0400 66.9600 L
  61.0800 67.5600 L
  59.8800 67.8000 L
  58.5600 67.5600 L
  57.6000 66.9600 L
  56.7600 66.0000 L
  56.4000 64.9200 L
  56.4000 63.7200 L
  56.7600 62.5200 L
  57.6000 61.5600 L
  58.5600 60.9600 L
  59.8800 60.7200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  59.8800 45.2400 m
  58.5600 45.1200 L
  57.6000 44.5200 L
  56.7600 43.5600 L
  56.4000 42.3600 L
  56.4000 41.1600 L
  56.7600 40.0800 L
  57.6000 39.1200 L
  58.5600 38.5200 L
  59.8800 38.2800 L
  61.0800 38.5200 L
  62.0400 39.1200 L
  62.8800 40.0800 L
  63.2400 41.1600 L
  63.2400 42.3600 L
  62.8800 43.5600 L
  62.0400 44.5200 L
  61.0800 45.1200 L
  59.8800 45.2400 L
F
U
u
2.0000 w
  59.8800 86.7600 m
  41.8800 73.3200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  57.0000 84.7200 m
  57.9600 83.8800 L
  59.0400 83.4000 L
  60.2400 83.2800 L
  61.4400 83.6400 L
  62.4000 84.3600 L
  63.0000 85.4400 L
  63.3600 86.6400 L
  63.1200 87.8400 L
  62.6400 88.9200 L
  61.6800 89.7600 L
  60.6000 90.2400 L
  59.4000 90.2400 L
  58.2000 89.8800 L
  57.2400 89.1600 L
  56.6400 88.2000 L
  56.2800 87.0000 L
  56.5200 85.8000 L
  57.0000 84.7200 L
F
U
u
  0.000 0.000 0.000 1.000 k
  44.6400 75.3600 m
  43.6800 76.2000 L
  42.6000 76.6800 L
  41.4000 76.8000 L
  40.2000 76.4400 L
  39.2400 75.7200 L
  38.6400 74.6400 L
  38.2800 73.4400 L
  38.5200 72.2400 L
  39.0000 71.1600 L
  39.9600 70.3200 L
  41.0400 69.8400 L
  42.2400 69.8400 L
  43.4400 70.2000 L
  44.4000 70.9200 L
  45.0000 71.8800 L
  45.3600 73.0800 L
  45.1200 74.2800 L
  44.6400 75.3600 L
F
U
u
2.0000 w
  59.8800 64.3200 m
  77.8800 50.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  62.6400 62.1600 m
  63.1200 63.2400 L
  63.3600 64.4400 L
  63.0000 65.6400 L
  62.4000 66.7200 L
  61.4400 67.4400 L
  60.2400 67.8000 L
  59.0400 67.6800 L
  57.9600 67.2000 L
  57.0000 66.3600 L
  56.5200 65.2800 L
  56.2800 64.0800 L
  56.6400 62.8800 L
  57.2400 61.9200 L
  58.2000 61.2000 L
  59.4000 60.8400 L
  60.6000 60.8400 L
  61.6800 61.3200 L
  62.6400 62.1600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  75.0000 52.9200 m
  74.5200 51.8400 L
  74.2800 50.6400 L
  74.6400 49.4400 L
  75.2400 48.3600 L
  76.2000 47.6400 L
  77.4000 47.2800 L
  78.6000 47.4000 L
  79.6800 47.8800 L
  80.6400 48.7200 L
  81.1200 49.8000 L
  81.3600 51.0000 L
  81.0000 52.2000 L
  80.4000 53.1600 L
  79.4400 53.8800 L
  78.2400 54.2400 L
  77.0400 54.2400 L
  75.9600 53.7600 L
  75.0000 52.9200 L
F
U
u
0.5000 w
  42.3600 181.9200 m
  43.0800 181.9200 L
S
U
u
  45.2400 181.9200 m
  45.9600 181.9200 L
S
U
u
  48.1200 181.9200 m
  48.8400 181.9200 L
S
U
u
  51.0000 181.9200 m
  51.7200 181.9200 L
S
U
u
  53.8800 181.9200 m
  54.6000 181.9200 L
S
U
u
  56.7600 181.9200 m
  57.4800 181.9200 L
S
U
u
  59.6400 181.9200 m
  60.3600 181.9200 L
S
U
u
  62.5200 181.9200 m
  63.2400 181.9200 L
S
U
u
  65.4000 181.9200 m
  66.1200 181.9200 L
S
U
u
  68.2800 181.9200 m
  69.0000 181.9200 L
S
U
u
  71.1600 181.9200 m
  71.8800 181.9200 L
S
U
u
  74.0400 181.9200 m
  74.7600 181.9200 L
S
U
u
  76.9200 181.9200 m
  77.6400 181.9200 L
S
U
u
  79.8000 182.0400 m
  80.4000 182.1600 L
S
U
u
  80.4000 182.1600 m
  80.5200 182.1600 L
S
U
u
  82.5600 182.8800 m
  83.1600 183.2400 L
S
U
u
  84.8400 184.6800 m
  85.3200 185.1600 L
S
U
u
  86.5200 186.9600 m
  86.7600 187.6800 L
S
U
u
  87.2400 189.8400 m
  87.3600 190.5600 L
S
U
u
  87.3600 192.7200 m
  87.3600 193.4400 L
S
U
u
  87.3600 195.6000 m
  87.3600 196.3200 L
S
U
u
  87.3600 198.4800 m
  87.3600 199.2000 L
S
U
u
  87.3600 201.3600 m
  87.3600 202.0800 L
S
U
u
  87.3600 204.2400 m
  87.3600 204.9600 L
S
U
u
  87.3600 207.1200 m
  87.3600 207.8400 L
S
U
u
  87.3600 210.0000 m
  87.3600 210.7200 L
S
U
u
  87.3600 212.8800 m
  87.3600 213.6000 L
S
U
u
  87.3600 215.7600 m
  87.3600 216.4800 L
S
U
u
  87.3600 218.6400 m
  87.3600 219.3600 L
S
U
u
  87.3600 221.5200 m
  87.3600 222.2400 L
S
U
u
  87.3600 224.4000 m
  87.3600 225.1200 L
S
U
u
  87.3600 227.2800 m
  87.3600 228.0000 L
S
U
u
  87.3600 230.0400 m
  87.3600 230.7600 L
S
U
u
  87.3600 232.9200 m
  87.3600 233.6400 L
S
U
u
  87.3600 235.8000 m
  87.3600 236.5200 L
S
U
u
  87.3600 238.6800 m
  87.3600 239.4000 L
S
U
u
  87.3600 241.5600 m
  87.3600 242.2800 L
S
U
u
  87.3600 244.4400 m
  87.2400 245.1600 L
S
U
u
  86.6400 247.2000 m
  86.5200 247.8000 L
S
U
u
  86.5200 247.8000 m
  86.5200 247.9200 L
S
U
u
  85.3200 249.7200 m
  84.8400 250.2000 L
S
U
u
  83.1600 251.5200 m
  82.5600 251.8800 L
S
U
u
  80.5200 252.7200 m
  80.4000 252.7200 L
S
U
u
  80.4000 252.7200 m
  79.8000 252.8400 L
S
U
u
  77.6400 252.9600 m
  76.9200 252.9600 L
S
U
u
  74.7600 252.9600 m
  74.0400 252.9600 L
S
U
u
  71.8800 252.9600 m
  71.1600 252.9600 L
S
U
u
  69.0000 252.9600 m
  68.2800 252.9600 L
S
U
u
  66.1200 252.9600 m
  65.4000 252.9600 L
S
U
u
  63.2400 252.9600 m
  62.5200 252.9600 L
S
U
u
  60.3600 252.9600 m
  59.6400 252.9600 L
S
U
u
  57.4800 252.9600 m
  56.7600 252.9600 L
S
U
u
  54.6000 252.9600 m
  53.8800 252.9600 L
S
U
u
  51.7200 252.9600 m
  51.0000 252.9600 L
S
U
u
  48.8400 252.9600 m
  48.1200 252.9600 L
S
U
u
  45.9600 252.9600 m
  45.2400 252.9600 L
S
U
u
  43.0800 252.9600 m
  42.3600 252.9600 L
S
U
u
  40.2000 252.7200 m
  39.6000 252.3600 L
S
U
u
  37.6800 251.5200 m
  37.0800 251.1600 L
S
U
u
  35.5200 249.7200 m
  35.4000 249.6000 L
S
U
u
  35.4000 249.6000 m
  35.1600 249.1200 L
S
U
u
  34.0800 247.2000 m
  33.8400 246.4800 L
S
U
u
  33.3600 244.3200 m
  33.3600 243.9600 L
S
U
u
  33.3600 243.9600 m
  33.3600 243.6000 L
S
U
u
  33.3600 241.4400 m
  33.3600 240.7200 L
S
U
u
  33.3600 238.5600 m
  33.3600 237.8400 L
S
U
u
  33.3600 235.6800 m
  33.3600 234.9600 L
S
U
u
  33.3600 232.8000 m
  33.3600 232.0800 L
S
U
u
  33.3600 229.9200 m
  33.3600 229.2000 L
S
U
u
  33.3600 227.1600 m
  33.3600 226.4400 L
S
U
u
  33.3600 224.2800 m
  33.3600 223.5600 L
S
U
u
  33.3600 221.4000 m
  33.3600 220.6800 L
S
U
u
  33.3600 218.5200 m
  33.3600 217.8000 L
S
U
u
  33.3600 215.6400 m
  33.3600 214.9200 L
S
U
u
  33.3600 212.7600 m
  33.3600 212.0400 L
S
U
u
  33.3600 209.8800 m
  33.3600 209.1600 L
S
U
u
  33.3600 207.0000 m
  33.3600 206.2800 L
S
U
u
  33.3600 204.1200 m
  33.3600 203.4000 L
S
U
u
  33.3600 201.2400 m
  33.3600 200.5200 L
S
U
u
  33.3600 198.3600 m
  33.3600 197.6400 L
S
U
u
  33.3600 195.4800 m
  33.3600 194.7600 L
S
U
u
  33.3600 192.6000 m
  33.3600 191.8800 L
S
U
u
  33.4800 189.7200 m
  33.6000 189.0000 L
S
U
u
  34.3200 186.9600 m
  34.6800 186.3600 L
S
U
u
  36.0000 184.6800 m
  36.4800 184.0800 L
S
U
u
  38.2800 182.8800 m
  38.5200 182.7600 L
S
U
u
  38.5200 182.7600 m
  39.0000 182.6400 L
S
U
u
  41.0400 182.0400 m
  41.7600 182.0400 L
S
U
u
  41.8800 23.8800 m
  42.6000 23.8800 L
S
U
u
  44.7600 23.8800 m
  45.4800 23.8800 L
S
U
u
  47.6400 23.8800 m
  48.3600 23.8800 L
S
U
u
  50.5200 23.8800 m
  51.2400 23.8800 L
S
U
u
  53.4000 23.8800 m
  54.1200 23.8800 L
S
U
u
  56.2800 23.8800 m
  57.0000 23.8800 L
S
U
u
  59.1600 23.8800 m
  59.8800 23.8800 L
S
U
u
  62.0400 23.8800 m
  62.7600 23.8800 L
S
U
u
  64.9200 23.8800 m
  65.6400 23.8800 L
S
U
u
  67.8000 23.8800 m
  68.5200 23.8800 L
S
U
u
  70.6800 23.8800 m
  71.4000 23.8800 L
S
U
u
  73.5600 23.8800 m
  74.2800 23.8800 L
S
U
u
  76.4400 23.8800 m
  77.1600 23.8800 L
S
U
u
  79.3200 24.0000 m
  79.8000 24.1200 L
S
U
u
  79.8000 24.1200 m
  80.0400 24.2400 L
S
U
u
  82.0800 25.0800 m
  82.6800 25.4400 L
S
U
u
  84.3600 26.7600 m
  84.8400 27.2400 L
S
U
u
  85.9200 29.0400 m
  86.1600 29.7600 L
S
U
u
  86.7600 31.8000 m
  86.8800 32.5200 L
S
U
u
  86.8800 34.5600 m
  86.8800 35.2800 L
S
U
u
  86.8800 37.4400 m
  86.8800 38.1600 L
S
U
u
  86.8800 40.3200 m
  86.8800 41.0400 L
S
U
u
  86.8800 43.2000 m
  86.8800 43.9200 L
S
U
u
  86.8800 46.0800 m
  86.8800 46.8000 L
S
U
u
  86.8800 48.9600 m
  86.8800 49.6800 L
S
U
u
  86.8800 51.8400 m
  86.8800 52.5600 L
S
U
u
  86.8800 54.7200 m
  86.8800 55.4400 L
S
U
u
  86.8800 57.6000 m
  86.8800 58.3200 L
S
U
u
  86.8800 60.4800 m
  86.8800 61.2000 L
S
U
u
  86.8800 63.3600 m
  86.8800 64.0800 L
S
U
u
  86.8800 66.2400 m
  86.8800 66.9600 L
S
U
u
  86.8800 69.1200 m
  86.8800 69.8400 L
S
U
u
  86.8800 72.0000 m
  86.8800 72.7200 L
S
U
u
  86.8800 74.8800 m
  86.8800 75.6000 L
S
U
u
  86.8800 77.7600 m
  86.8800 78.4800 L
S
U
u
  86.8800 80.6400 m
  86.8800 81.3600 L
S
U
u
  86.7600 83.5200 m
  86.6400 84.2400 L
S
U
u
  86.7600 83.5200 m
  86.6400 84.2400 L
S
U
u
  85.9200 86.2800 m
  85.4400 86.8800 L
S
U
u
  84.1200 88.5600 m
  83.6400 89.0400 L
S
U
u
  81.8400 90.2400 m
  81.7200 90.3600 L
S
U
u
  81.7200 90.3600 m
  81.2400 90.6000 L
S
U
u
  79.2000 91.2000 m
  78.4800 91.2000 L
S
U
u
  76.3200 91.3200 m
  75.6000 91.3200 L
S
U
u
  73.4400 91.3200 m
  72.7200 91.3200 L
S
U
u
  70.5600 91.3200 m
  69.8400 91.3200 L
S
U
u
  67.6800 91.3200 m
  66.9600 91.3200 L
S
U
u
  64.8000 91.3200 m
  64.0800 91.3200 L
S
U
u
  61.9200 91.3200 m
  61.2000 91.3200 L
S
U
u
  59.0400 91.3200 m
  58.3200 91.3200 L
S
U
u
  56.1600 91.3200 m
  55.4400 91.3200 L
S
U
u
  53.2800 91.3200 m
  52.5600 91.3200 L
S
U
u
  50.4000 91.3200 m
  49.6800 91.3200 L
S
U
u
  47.5200 91.3200 m
  46.8000 91.3200 L
S
U
u
  44.6400 91.3200 m
  43.9200 91.3200 L
S
U
u
  41.7600 91.3200 m
  41.0400 91.2000 L
S
U
u
  39.0000 90.7200 m
  38.2800 90.4800 L
S
U
u
  36.4800 89.4000 m
  36.2400 89.2800 L
S
U
u
  36.2400 89.2800 m
  35.8800 88.9200 L
S
U
u
  34.4400 87.3600 m
  34.0800 86.7600 L
S
U
u
  33.2400 84.8400 m
  33.0000 84.2400 L
S
U
u
  33.0000 84.2400 m
  33.0000 84.1200 L
S
U
u
  32.8800 81.9600 m
  32.8800 81.2400 L
S
U
u
  32.8800 79.0800 m
  32.8800 78.3600 L
S
U
u
  32.8800 76.2000 m
  32.8800 75.4800 L
S
U
u
  32.8800 73.3200 m
  32.8800 72.6000 L
S
U
u
  32.8800 70.4400 m
  32.8800 69.7200 L
S
U
u
  32.8800 67.5600 m
  32.8800 66.8400 L
S
U
u
  32.8800 64.6800 m
  32.8800 63.9600 L
S
U
u
  32.8800 61.8000 m
  32.8800 61.0800 L
S
U
u
  32.8800 58.9200 m
  32.8800 58.2000 L
S
U
u
  32.8800 56.0400 m
  32.8800 55.3200 L
S
U
u
  32.8800 53.1600 m
  32.8800 52.4400 L
S
U
u
  32.8800 50.2800 m
  32.8800 49.5600 L
S
U
u
  32.8800 47.4000 m
  32.8800 46.6800 L
S
U
u
  32.8800 44.5200 m
  32.8800 43.8000 L
S
U
u
  32.8800 41.6400 m
  32.8800 40.9200 L
S
U
u
  32.8800 38.7600 m
  32.8800 38.0400 L
S
U
u
  32.8800 35.8800 m
  32.8800 35.1600 L
S
U
u
  32.8800 33.0000 m
  32.8800 32.7600 L
S
U
u
  32.8800 32.7600 m
  32.8800 32.4000 L
S
U
u
  33.2400 30.2400 m
  33.4800 29.5200 L
S
U
u
  34.5600 27.6000 m
  34.8000 27.2400 L
S
U
u
  34.8000 27.2400 m
  35.0400 27.0000 L
S
U
u
  36.7200 25.6800 m
  37.3200 25.2000 L
S
U
u
  39.2400 24.3600 m
  39.8400 24.1200 L
S
U
u
  39.8400 24.1200 m
  39.9600 24.1200 L
S
U
u
  42.6000 92.4000 m
  43.3200 92.4000 L
S
U
u
  45.4800 92.4000 m
  46.2000 92.4000 L
S
U
u
  48.3600 92.4000 m
  49.0800 92.4000 L
S
U
u
  51.2400 92.4000 m
  51.9600 92.4000 L
S
U
u
  54.1200 92.4000 m
  54.8400 92.4000 L
S
U
u
  57.0000 92.4000 m
  57.7200 92.4000 L
S
U
u
  59.8800 92.4000 m
  60.6000 92.4000 L
S
U
u
  62.7600 92.4000 m
  63.4800 92.4000 L
S
U
u
  65.6400 92.4000 m
  66.3600 92.4000 L
S
U
u
  68.5200 92.4000 m
  69.2400 92.4000 L
S
U
u
  71.4000 92.4000 m
  72.1200 92.4000 L
S
U
u
  74.2800 92.4000 m
  75.0000 92.4000 L
S
U
u
  77.1600 92.4000 m
  77.8800 92.4000 L
S
U
u
  80.0400 92.5200 m
  80.5200 92.6400 L
S
U
u
  80.5200 92.6400 m
  80.7600 92.7600 L
S
U
u
  82.8000 93.4800 m
  83.4000 93.8400 L
S
U
u
  85.0800 95.1600 m
  85.5600 95.7600 L
S
U
u
  85.0800 95.1600 m
  85.5600 95.7600 L
S
U
u
  86.6400 97.5600 m
  86.8800 98.1600 L
S
U
u
  87.4800 100.2000 m
  87.6000 100.9200 L
S
U
u
  87.6000 103.0800 m
  87.6000 103.8000 L
S
U
u
  87.3600 105.9600 m
  87.3600 106.0800 L
S
U
u
  87.3600 106.0800 m
  87.1200 106.6800 L
S
U
u
  86.2800 108.6000 m
  85.9200 109.2000 L
S
U
u
  84.4800 110.8800 m
  84.2400 111.1200 L
S
U
u
  84.2400 111.1200 m
  83.8800 111.3600 L
S
U
u
  81.9600 112.3200 m
  81.3600 112.6800 L
S
U
u
  79.2000 113.0400 m
  78.6000 113.1600 L
S
U
u
  78.6000 113.1600 m
  78.4800 113.1600 L
S
U
u
  76.3200 113.1600 m
  75.6000 113.1600 L
S
U
u
  73.4400 113.1600 m
  72.7200 113.1600 L
S
U
u
  70.5600 113.1600 m
  69.8400 113.1600 L
S
U
u
  67.6800 113.1600 m
  66.9600 113.1600 L
S
U
u
  64.8000 113.1600 m
  64.0800 113.1600 L
S
U
u
  61.9200 113.1600 m
  61.2000 113.1600 L
S
U
u
  59.0400 113.1600 m
  58.3200 113.1600 L
S
U
u
  56.1600 113.1600 m
  55.4400 113.1600 L
S
U
u
  53.2800 113.1600 m
  52.5600 113.1600 L
S
U
u
  50.4000 113.1600 m
  49.6800 113.1600 L
S
U
u
  47.5200 113.1600 m
  46.8000 113.1600 L
S
U
u
  44.6400 113.1600 m
  43.9200 113.1600 L
S
U
u
  41.7600 113.0400 m
  41.0400 112.9200 L
S
U
u
  39.0000 112.3200 m
  38.6400 112.2000 L
S
U
u
  38.6400 112.2000 m
  38.4000 111.9600 L
S
U
u
  36.6000 110.7600 m
  36.1200 110.2800 L
S
U
u
  34.8000 108.6000 m
  34.4400 108.0000 L
S
U
u
  33.8400 105.9600 m
  33.7200 105.2400 L
S
U
u
  33.6000 103.0800 m
  33.6000 102.3600 L
S
U
u
  33.7200 100.2000 m
  33.8400 99.4800 L
S
U
u
  34.4400 97.5600 m
  34.8000 96.9600 L
S
U
u
  36.0000 95.2800 m
  36.4800 94.8000 L
S
U
u
  38.2800 93.6000 m
  38.6400 93.3600 L
S
U
u
  38.6400 93.3600 m
  38.8800 93.2400 L
S
U
u
  40.9200 92.6400 m
  41.6400 92.5200 L
S
U
u
  41.8800 114.8400 m
  42.6000 114.8400 L
S
U
u
  44.7600 114.8400 m
  45.4800 114.8400 L
S
U
u
  47.6400 114.8400 m
  48.3600 114.8400 L
S
U
u
  50.5200 114.8400 m
  51.2400 114.8400 L
S
U
u
  53.4000 114.8400 m
  54.1200 114.8400 L
S
U
u
  56.2800 114.8400 m
  57.0000 114.8400 L
S
U
u
  59.1600 114.8400 m
  59.8800 114.8400 L
S
U
u
  62.0400 114.8400 m
  62.7600 114.8400 L
S
U
u
  64.9200 114.8400 m
  65.6400 114.8400 L
S
U
u
  67.8000 114.8400 m
  68.5200 114.8400 L
S
U
u
  70.6800 114.8400 m
  71.4000 114.8400 L
S
U
u
  73.5600 114.8400 m
  74.2800 114.8400 L
S
U
u
  76.4400 114.8400 m
  77.1600 114.8400 L
S
U
u
  79.3200 114.9600 m
  79.8000 115.0800 L
S
U
u
  79.8000 115.0800 m
  80.0400 115.2000 L
S
U
u
  82.0800 115.9200 m
  82.6800 116.2800 L
S
U
u
  84.3600 117.7200 m
  84.8400 118.2000 L
S
U
u
  85.9200 120.0000 m
  86.1600 120.6000 L
S
U
u
  86.7600 122.6400 m
  86.8800 123.3600 L
S
U
u
  86.8800 125.5200 m
  86.8800 126.2400 L
S
U
u
  86.7600 128.4000 m
  86.6400 129.1200 L
S
U
u
  86.7600 128.4000 m
  86.6400 129.1200 L
S
U
u
  85.9200 131.1600 m
  85.4400 131.7600 L
S
U
u
  84.1200 133.4400 m
  83.6400 133.9200 L
S
U
u
  81.8400 135.1200 m
  81.7200 135.2400 L
S
U
u
  81.7200 135.2400 m
  81.2400 135.4800 L
S
U
u
  79.2000 136.0800 m
  78.4800 136.0800 L
S
U
u
  76.3200 136.2000 m
  75.6000 136.2000 L
S
U
u
  73.4400 136.2000 m
  72.7200 136.2000 L
S
U
u
  70.5600 136.2000 m
  69.8400 136.2000 L
S
U
u
  67.6800 136.2000 m
  66.9600 136.2000 L
S
U
u
  64.8000 136.2000 m
  64.0800 136.2000 L
S
U
u
  61.9200 136.2000 m
  61.2000 136.2000 L
S
U
u
  59.0400 136.2000 m
  58.3200 136.2000 L
S
U
u
  56.1600 136.2000 m
  55.4400 136.2000 L
S
U
u
  53.2800 136.2000 m
  52.5600 136.2000 L
S
U
u
  50.4000 136.2000 m
  49.6800 136.2000 L
S
U
u
  47.5200 136.2000 m
  46.8000 136.2000 L
S
U
u
  44.6400 136.2000 m
  43.9200 136.2000 L
S
U
u
  41.7600 136.2000 m
  41.0400 136.0800 L
S
U
u
  39.0000 135.6000 m
  38.2800 135.3600 L
S
U
u
  36.4800 134.2800 m
  36.2400 134.1600 L
S
U
u
  36.2400 134.1600 m
  35.8800 133.8000 L
S
U
u
  34.4400 132.2400 m
  34.0800 131.6400 L
S
U
u
  33.2400 129.7200 m
  33.0000 129.1200 L
S
U
u
  33.0000 129.1200 m
  33.0000 129.0000 L
S
U
u
  32.8800 126.8400 m
  32.8800 126.1200 L
S
U
u
  32.8800 123.9600 m
  32.8800 123.8400 L
S
U
u
  32.8800 123.8400 m
  32.8800 123.2400 L
S
U
u
  33.2400 121.0800 m
  33.4800 120.3600 L
S
U
u
  34.5600 118.5600 m
  34.8000 118.2000 L
S
U
u
  34.8000 118.2000 m
  35.0400 117.9600 L
S
U
u
  36.6000 116.5200 m
  37.2000 116.1600 L
S
U
u
  39.1200 115.3200 m
  39.8400 115.0800 L
S
U
u
  39.1200 115.3200 m
  39.8400 115.0800 L
S
U
u
  41.8800 137.2800 m
  42.6000 137.2800 L
S
U
u
  44.7600 137.2800 m
  45.4800 137.2800 L
S
U
u
  47.6400 137.2800 m
  48.3600 137.2800 L
S
U
u
  50.5200 137.2800 m
  51.2400 137.2800 L
S
U
u
  53.4000 137.2800 m
  54.1200 137.2800 L
S
U
u
  56.2800 137.2800 m
  57.0000 137.2800 L
S
U
u
  59.1600 137.2800 m
  59.8800 137.2800 L
S
U
u
  62.0400 137.2800 m
  62.7600 137.2800 L
S
U
u
  64.9200 137.2800 m
  65.6400 137.2800 L
S
U
u
  67.8000 137.2800 m
  68.5200 137.2800 L
S
U
u
  70.6800 137.2800 m
  71.4000 137.2800 L
S
U
u
  73.5600 137.2800 m
  74.2800 137.2800 L
S
U
u
  76.4400 137.2800 m
  77.1600 137.2800 L
S
U
u
  79.3200 137.4000 m
  79.8000 137.5200 L
S
U
u
  79.8000 137.5200 m
  80.0400 137.6400 L
S
U
u
  82.0800 138.4800 m
  82.6800 138.8400 L
S
U
u
  84.3600 140.1600 m
  84.8400 140.6400 L
S
U
u
  85.9200 142.4400 m
  86.1600 143.1600 L
S
U
u
  86.7600 145.2000 m
  86.8800 145.9200 L
S
U
u
  86.8800 148.0800 m
  86.8800 148.8000 L
S
U
u
  86.6400 150.9600 m
  86.6400 151.4400 L
S
U
u
  86.6400 151.4400 m
  86.5200 151.6800 L
S
U
u
  85.6800 153.6000 m
  85.3200 154.2000 L
S
U
u
  84.0000 155.8800 m
  83.5200 156.3600 L
S
U
u
  81.7200 157.4400 m
  81.0000 157.6800 L
S
U
u
  78.9600 158.2800 m
  78.2400 158.4000 L
S
U
u
  76.0800 158.4000 m
  75.3600 158.4000 L
S
U
u
  73.2000 158.4000 m
  72.4800 158.4000 L
S
U
u
  70.3200 158.4000 m
  69.6000 158.4000 L
S
U
u
  67.4400 158.4000 m
  66.7200 158.4000 L
S
U
u
  64.5600 158.4000 m
  63.8400 158.4000 L
S
U
u
  61.6800 158.4000 m
  60.9600 158.4000 L
S
U
u
  58.8000 158.4000 m
  58.0800 158.4000 L
S
U
u
  55.9200 158.4000 m
  55.2000 158.4000 L
S
U
u
  53.0400 158.4000 m
  52.3200 158.4000 L
S
U
u
  50.1600 158.4000 m
  49.4400 158.4000 L
S
U
u
  47.2800 158.4000 m
  46.5600 158.4000 L
S
U
u
  44.4000 158.4000 m
  43.6800 158.4000 L
S
U
u
  41.5200 158.4000 m
  40.8000 158.2800 L
S
U
u
  38.7600 157.8000 m
  38.1600 157.5600 L
S
U
u
  36.2400 156.4800 m
  35.7600 156.0000 L
S
U
u
  34.4400 154.3200 m
  33.9600 153.7200 L
S
U
u
  33.1200 151.6800 m
  33.0000 151.4400 L
S
U
u
  33.0000 151.4400 m
  33.0000 150.9600 L
S
U
u
  32.8800 148.8000 m
  32.8800 148.0800 L
S
U
u
  32.8800 145.9200 m
  33.0000 145.2000 L
S
U
u
  33.4800 143.1600 m
  33.7200 142.4400 L
S
U
u
  33.4800 143.1600 m
  33.7200 142.4400 L
S
U
u
  34.8000 140.6400 m
  35.2800 140.1600 L
S
U
u
  36.9600 138.8400 m
  37.5600 138.4800 L
S
U
u
  39.4800 137.6400 m
  39.8400 137.5200 L
S
U
u
  39.8400 137.5200 m
  40.2000 137.5200 L
S
U
u
  41.8800 159.8400 m
  42.6000 159.8400 L
S
U
u
  44.7600 159.8400 m
  45.4800 159.8400 L
S
U
u
  47.6400 159.8400 m
  48.3600 159.8400 L
S
U
u
  50.5200 159.8400 m
  51.2400 159.8400 L
S
U
u
  53.4000 159.8400 m
  54.1200 159.8400 L
S
U
u
  56.2800 159.8400 m
  57.0000 159.8400 L
S
U
u
  59.1600 159.8400 m
  59.8800 159.8400 L
S
U
u
  62.0400 159.8400 m
  62.7600 159.8400 L
S
U
u
  64.9200 159.8400 m
  65.6400 159.8400 L
S
U
u
  67.8000 159.8400 m
  68.5200 159.8400 L
S
U
u
  70.6800 159.8400 m
  71.4000 159.8400 L
S
U
u
  73.5600 159.8400 m
  74.2800 159.8400 L
S
U
u
  76.4400 159.8400 m
  77.1600 159.8400 L
S
U
u
  79.3200 159.9600 m
  79.8000 160.0800 L
S
U
u
  79.8000 160.0800 m
  80.0400 160.2000 L
S
U
u
  82.0800 160.9200 m
  82.6800 161.2800 L
S
U
u
  84.3600 162.7200 m
  84.8400 163.2000 L
S
U
u
  85.9200 164.8800 m
  86.1600 165.4800 L
S
U
u
  86.7600 167.5200 m
  86.8800 168.2400 L
S
U
u
  86.8800 170.4000 m
  86.7600 171.1200 L
S
U
u
  86.2800 173.1600 m
  86.0400 173.8800 L
S
U
u
  84.9600 175.6800 m
  84.8400 175.9200 L
S
U
u
  84.8400 175.9200 m
  84.4800 176.2800 L
S
U
u
  82.9200 177.7200 m
  82.3200 178.0800 L
S
U
u
  80.4000 178.9200 m
  79.8000 179.1600 L
S
U
u
  79.8000 179.1600 m
  79.6800 179.1600 L
S
U
u
  77.5200 179.4000 m
  76.8000 179.4000 L
S
U
u
  74.6400 179.4000 m
  73.9200 179.4000 L
S
U
u
  71.7600 179.4000 m
  71.0400 179.4000 L
S
U
u
  68.8800 179.4000 m
  68.1600 179.4000 L
S
U
u
  66.0000 179.4000 m
  65.2800 179.4000 L
S
U
u
  63.1200 179.4000 m
  62.4000 179.4000 L
S
U
u
  60.2400 179.4000 m
  59.5200 179.4000 L
S
U
u
  57.3600 179.4000 m
  56.6400 179.4000 L
S
U
u
  54.4800 179.4000 m
  53.7600 179.4000 L
S
U
u
  51.6000 179.4000 m
  50.8800 179.4000 L
S
U
u
  48.7200 179.4000 m
  48.0000 179.4000 L
S
U
u
  45.8400 179.4000 m
  45.1200 179.4000 L
S
U
u
  42.9600 179.4000 m
  42.2400 179.4000 L
S
U
u
  40.0800 179.1600 m
  39.8400 179.1600 L
S
U
u
  39.8400 179.1600 m
  39.3600 179.0400 L
S
U
u
  37.4400 178.0800 m
  36.8400 177.7200 L
S
U
u
  35.1600 176.2800 m
  34.8000 175.9200 L
S
U
u
  34.8000 175.9200 m
  34.6800 175.8000 L
S
U
u
  33.6000 173.8800 m
  33.3600 173.1600 L
S
U
u
  32.8800 171.1200 m
  32.8800 170.4000 L
S
U
u
  32.8800 168.2400 m
  33.0000 167.5200 L
S
U
u
  33.4800 165.4800 m
  33.7200 164.7600 L
S
U
u
  33.4800 165.4800 m
  33.7200 164.7600 L
S
U
u
  34.9200 163.0800 m
  35.4000 162.6000 L
S
U
u
  37.0800 161.2800 m
  37.6800 160.8000 L
S
U
u
  39.7200 160.0800 m
  39.8400 160.0800 L
S
U
u
  39.8400 160.0800 m
  40.4400 159.9600 L
S
U
u
  90.3600 171.3600 m
  95.6400 173.6400 L
S
U
u
  98.7600 175.0800 m
  104.0400 177.4800 L
S
U
u
  107.4000 178.9200 m
  112.6800 181.2000 L
S
U
u
  115.9200 182.6400 m
  119.1600 184.0800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 169.8000 m
  90.4800 174.1200 L
  90.4800 172.8000 L
  90.8400 171.6000 L
  91.5600 170.4000 L
  92.4000 169.5600 L
  86.8800 169.8000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 185.5200 m
  119.0400 181.2000 L
  119.0400 182.5200 L
  118.6800 183.7200 L
  117.9600 184.9200 L
  117.1200 185.8800 L
  122.7600 185.5200 L
F
U
u
0.5000 w
  90.6000 149.6400 m
  96.3600 149.6400 L
S
U
u
  99.8400 149.6400 m
  105.6000 149.6400 L
S
U
u
  109.2000 149.6400 m
  114.9600 149.6400 L
S
U
u
  118.5600 149.6400 m
  118.9200 149.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 149.6400 m
  91.9200 152.1600 L
  91.4400 150.9600 L
  91.3200 149.6400 L
  91.4400 148.3200 L
  91.9200 147.1200 L
  86.8800 149.6400 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 149.6400 m
  117.7200 147.1200 L
  118.0800 148.3200 L
  118.2000 149.6400 L
  118.0800 150.9600 L
  117.7200 152.1600 L
  122.7600 149.6400 L
F
U
u
0.5000 w
  90.3600 125.8800 m
  95.7600 123.8400 L
S
U
u
  99.0000 122.5200 m
  104.4000 120.4800 L
S
U
u
  107.7600 119.2800 m
  113.1600 117.2400 L
S
U
u
  116.5200 115.9200 m
  119.1600 114.9600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 127.2000 m
  92.4000 127.8000 L
  91.5600 126.7200 L
  90.9600 125.6400 L
  90.7200 124.3200 L
  90.6000 123.0000 L
  86.8800 127.2000 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 113.6400 m
  117.1200 113.0400 L
  117.9600 114.1200 L
  118.5600 115.2000 L
  118.8000 116.5200 L
  118.9200 117.8400 L
  122.7600 113.6400 L
F
U
u
0.5000 w
  90.0000 100.2000 m
  94.8000 97.0800 L
S
U
u
  97.6800 95.0400 m
  102.3600 91.8000 L
S
U
u
  105.2400 89.7600 m
  109.9200 86.5200 L
S
U
u
  112.9200 84.4800 m
  117.6000 81.2400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 102.3600 m
  92.4000 101.6400 L
  91.3200 100.9200 L
  90.4800 99.9600 L
  89.8800 98.7600 L
  89.5200 97.5600 L
  86.8800 102.3600 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 77.7600 m
  117.1200 78.6000 L
  118.2000 79.3200 L
  119.0400 80.2800 L
  119.6400 81.4800 L
  120.0000 82.6800 L
  122.7600 77.7600 L
F
U
u
0.5000 w
  90.6000 217.5600 m
  96.3600 218.2800 L
S
U
u
  99.8400 218.7600 m
  105.6000 219.3600 L
S
U
u
  109.2000 219.8400 m
  114.9600 220.5600 L
S
U
u
  118.5600 221.0400 m
  118.9200 221.0400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  86.8800 217.0800 m
  91.5600 220.2000 L
  91.2000 218.8800 L
  91.2000 217.5600 L
  91.5600 216.3600 L
  92.1600 215.1600 L
  86.8800 217.0800 L
F
U
u
  0.000 0.000 0.000 1.000 k
  122.7600 221.5200 m
  117.9600 218.4000 L
  118.3200 219.7200 L
  118.3200 221.0400 L
  117.9600 222.2400 L
  117.3600 223.4400 L
  122.7600 221.5200 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 23.1600 7.2000 0 Tp
TP
101.222380 Tz
/_Helvetica-BoldOblique 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Graph Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial Fn 704 1919 a(\(a\)) 26 b(Graphs) g(Z,) g(T.) 1500
1745 y @beginspecial 0 @llx 0 @lly 510 @urx 324 @ury
2253 @rwi @setspecial
%%BeginDocument: Another-ex2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\Another-ex2.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 510 324
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 510 324
%AI3_TileBox: 0 0 510 324
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  0.0000 0.0000 m
  489.8400 0.0000 L
  489.8400 303.0000 L
  0.0000 303.0000 L
  0.0000 0.0000 L
F
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  81.9600 52.2000 m
  81.9600 298.5600 L
  461.5200 298.5600 L
  461.5200 52.2000 L
  81.9600 52.2000 L
F
U
u
  0.000 0.000 0.000 0.000 K
1 J
  81.6000 52.4400 m
  81.6000 298.8000 L
  461.1600 298.8000 L
  461.1600 52.4400 L
  81.6000 52.4400 L
S
U
u
 [1 2 ] 0 d
  0.000 0.000 0.000 1.000 K
  81.6000 52.4400 m
  461.1600 52.4400 L
S
U
u
 [] 0 d
  81.6000 52.4400 m
  461.1600 52.4400 L
S
U
u
  81.6000 52.4400 m
  81.6000 298.8000 L
S
U
u
  108.4800 52.4400 m
  108.4800 56.5200 L
S
U
u
  162.6000 52.4400 m
  162.6000 56.5200 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 142.5600 33.3600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
0 j
  0.000 0.000 0.000 1.000 k
(-0.4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  216.6000 52.4400 m
  216.6000 56.5200 L
S
U
u
  271.4400 52.4400 m
  271.4400 56.5200 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 268.5600 33.3600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  325.4400 52.4400 m
  325.4400 56.5200 L
S
U
u
  379.4400 52.4400 m
  379.4400 56.5200 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 376.9200 33.3600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  433.4400 52.4400 m
  433.4400 56.5200 L
S
U
u
  81.6000 52.4400 m
  85.0800 52.4400 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 55.0800 47.8800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  81.6000 77.1600 m
  85.0800 77.1600 L
S
U
u
  81.6000 101.7600 m
  85.0800 101.7600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 55.4400 97.2000 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  81.6000 126.3600 m
  85.0800 126.3600 L
S
U
u
  81.6000 151.0800 m
  85.0800 151.0800 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 56.7600 146.4000 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  81.6000 175.6800 m
  85.0800 175.6800 L
S
U
u
  81.6000 200.8800 m
  85.0800 200.8800 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 55.6800 196.3200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  81.6000 225.6000 m
  85.0800 225.6000 L
S
U
u
  81.6000 249.4800 m
  85.0800 249.4800 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 55.9200 244.9200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  81.6000 274.2000 m
  85.0800 274.2000 L
S
U
u
  81.6000 298.8000 m
  85.0800 298.8000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 53.8800 290.8800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 390.1200 85.3200 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 397.2000 80.6400 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 379.4400 139.8000 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 386.5200 135.3600 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 338.8800 282.3600 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 346.0800 277.8000 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 189.7200 282.3600 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 196.8000 277.8000 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 158.5200 150.6000 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 166.2000 145.0800 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 143.5200 90.6000 0 Tp
TP
101.629560 Tz
/_Helvetica-BoldOblique 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(T\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 150.6000 86.0400 0 Tp
TP
102.374099 Tz
/_Helvetica-BoldOblique 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  115.8000 75.7200 m
  115.5600 77.2800 L
  114.9600 78.6000 L
  113.8800 79.8000 L
  112.4400 80.6400 L
  110.8800 81.1200 L
  109.2000 81.1200 L
  107.6400 80.6400 L
  106.3200 79.8000 L
  105.2400 78.6000 L
  104.5200 77.2800 L
  104.2800 75.7200 L
  104.5200 74.1600 L
  105.2400 72.8400 L
  106.3200 71.6400 L
  107.6400 70.8000 L
  109.2000 70.3200 L
  110.8800 70.3200 L
  112.4400 70.8000 L
  113.8800 71.6400 L
  114.9600 72.8400 L
  115.5600 74.1600 L
  115.8000 75.7200 L
F
U
u
  0.000 1.000 1.000 0.000 K
  115.8000 75.7200 m
  115.5600 77.2800 L
  114.9600 78.6000 L
  113.8800 79.8000 L
  112.4400 80.6400 L
  110.8800 81.1200 L
  109.2000 81.1200 L
  107.6400 80.6400 L
  106.3200 79.8000 L
  105.2400 78.6000 L
  104.5200 77.2800 L
  104.2800 75.7200 L
  104.5200 74.1600 L
  105.2400 72.8400 L
  106.3200 71.6400 L
  107.6400 70.8000 L
  109.2000 70.3200 L
  110.8800 70.3200 L
  112.4400 70.8000 L
  113.8800 71.6400 L
  114.9600 72.8400 L
  115.5600 74.1600 L
  115.8000 75.7200 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  119.4000 89.1600 m
  119.1600 90.7200 L
  118.5600 92.0400 L
  117.3600 93.2400 L
  116.0400 94.0800 L
  114.4800 94.4400 L
  112.8000 94.4400 L
  111.2400 94.0800 L
  109.8000 93.2400 L
  108.7200 92.0400 L
  108.0000 90.7200 L
  107.7600 89.1600 L
  108.0000 87.6000 L
  108.7200 86.2800 L
  109.8000 85.0800 L
  111.2400 84.2400 L
  112.8000 83.7600 L
  114.4800 83.7600 L
  116.0400 84.2400 L
  117.3600 85.0800 L
  118.5600 86.2800 L
  119.1600 87.6000 L
  119.4000 89.1600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  119.4000 89.1600 m
  119.1600 90.7200 L
  118.5600 92.0400 L
  117.3600 93.2400 L
  116.0400 94.0800 L
  114.4800 94.4400 L
  112.8000 94.4400 L
  111.2400 94.0800 L
  109.8000 93.2400 L
  108.7200 92.0400 L
  108.0000 90.7200 L
  107.7600 89.1600 L
  108.0000 87.6000 L
  108.7200 86.2800 L
  109.8000 85.0800 L
  111.2400 84.2400 L
  112.8000 83.7600 L
  114.4800 83.7600 L
  116.0400 84.2400 L
  117.3600 85.0800 L
  118.5600 86.2800 L
  119.1600 87.6000 L
  119.4000 89.1600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  130.0800 121.6800 m
  129.8400 123.1200 L
  129.2400 124.5600 L
  128.1600 125.7600 L
  126.7200 126.6000 L
  125.1600 126.9600 L
  123.4800 126.9600 L
  121.9200 126.6000 L
  120.6000 125.7600 L
  119.5200 124.5600 L
  118.8000 123.1200 L
  118.5600 121.6800 L
  118.8000 120.1200 L
  119.5200 118.8000 L
  120.6000 117.6000 L
  121.9200 116.7600 L
  123.4800 116.2800 L
  125.1600 116.2800 L
  126.7200 116.7600 L
  128.1600 117.6000 L
  129.2400 118.8000 L
  129.8400 120.1200 L
  130.0800 121.6800 L
F
U
u
  0.000 1.000 1.000 0.000 K
  130.0800 121.6800 m
  129.8400 123.1200 L
  129.2400 124.5600 L
  128.1600 125.7600 L
  126.7200 126.6000 L
  125.1600 126.9600 L
  123.4800 126.9600 L
  121.9200 126.6000 L
  120.6000 125.7600 L
  119.5200 124.5600 L
  118.8000 123.1200 L
  118.5600 121.6800 L
  118.8000 120.1200 L
  119.5200 118.8000 L
  120.6000 117.6000 L
  121.9200 116.7600 L
  123.4800 116.2800 L
  125.1600 116.2800 L
  126.7200 116.7600 L
  128.1600 117.6000 L
  129.2400 118.8000 L
  129.8400 120.1200 L
  130.0800 121.6800 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  157.8000 180.9600 m
  157.5600 182.4000 L
  156.8400 183.8400 L
  155.7600 185.0400 L
  154.4400 185.7600 L
  152.8800 186.2400 L
  151.2000 186.2400 L
  149.6400 185.7600 L
  148.3200 185.0400 L
  147.2400 183.8400 L
  146.5200 182.4000 L
  146.2800 180.9600 L
  146.5200 179.4000 L
  147.2400 177.9600 L
  148.3200 176.8800 L
  149.6400 176.0400 L
  151.2000 175.5600 L
  152.8800 175.5600 L
  154.4400 176.0400 L
  155.7600 176.8800 L
  156.8400 177.9600 L
  157.5600 179.4000 L
  157.8000 180.9600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  157.8000 180.9600 m
  157.5600 182.4000 L
  156.8400 183.8400 L
  155.7600 185.0400 L
  154.4400 185.7600 L
  152.8800 186.2400 L
  151.2000 186.2400 L
  149.6400 185.7600 L
  148.3200 185.0400 L
  147.2400 183.8400 L
  146.5200 182.4000 L
  146.2800 180.9600 L
  146.5200 179.4000 L
  147.2400 177.9600 L
  148.3200 176.8800 L
  149.6400 176.0400 L
  151.2000 175.5600 L
  152.8800 175.5600 L
  154.4400 176.0400 L
  155.7600 176.8800 L
  156.8400 177.9600 L
  157.5600 179.4000 L
  157.8000 180.9600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  224.6400 254.7600 m
  224.4000 256.3200 L
  223.8000 257.7600 L
  222.7200 258.8400 L
  221.2800 259.6800 L
  219.7200 260.1600 L
  218.1600 260.1600 L
  216.4800 259.6800 L
  215.1600 258.8400 L
  214.0800 257.7600 L
  213.3600 256.3200 L
  213.1200 254.7600 L
  213.3600 253.3200 L
  214.0800 251.8800 L
  215.1600 250.6800 L
  216.4800 249.8400 L
  218.1600 249.4800 L
  219.7200 249.4800 L
  221.2800 249.8400 L
  222.7200 250.6800 L
  223.8000 251.8800 L
  224.4000 253.3200 L
  224.6400 254.7600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  224.6400 254.7600 m
  224.4000 256.3200 L
  223.8000 257.7600 L
  222.7200 258.8400 L
  221.2800 259.6800 L
  219.7200 260.1600 L
  218.1600 260.1600 L
  216.4800 259.6800 L
  215.1600 258.8400 L
  214.0800 257.7600 L
  213.3600 256.3200 L
  213.1200 254.7600 L
  213.3600 253.3200 L
  214.0800 251.8800 L
  215.1600 250.6800 L
  216.4800 249.8400 L
  218.1600 249.4800 L
  219.7200 249.4800 L
  221.2800 249.8400 L
  222.7200 250.6800 L
  223.8000 251.8800 L
  224.4000 253.3200 L
  224.6400 254.7600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  329.1600 254.7600 m
  328.9200 256.3200 L
  328.2000 257.7600 L
  327.1200 258.8400 L
  325.8000 259.6800 L
  324.1200 260.1600 L
  322.5600 260.1600 L
  321.0000 259.6800 L
  319.5600 258.8400 L
  318.4800 257.7600 L
  317.8800 256.3200 L
  317.6400 254.7600 L
  317.8800 253.3200 L
  318.4800 251.8800 L
  319.5600 250.6800 L
  321.0000 249.8400 L
  322.5600 249.4800 L
  324.1200 249.4800 L
  325.8000 249.8400 L
  327.1200 250.6800 L
  328.2000 251.8800 L
  328.9200 253.3200 L
  329.1600 254.7600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  329.1600 254.7600 m
  328.9200 256.3200 L
  328.2000 257.7600 L
  327.1200 258.8400 L
  325.8000 259.6800 L
  324.1200 260.1600 L
  322.5600 260.1600 L
  321.0000 259.6800 L
  319.5600 258.8400 L
  318.4800 257.7600 L
  317.8800 256.3200 L
  317.6400 254.7600 L
  317.8800 253.3200 L
  318.4800 251.8800 L
  319.5600 250.6800 L
  321.0000 249.8400 L
  322.5600 249.4800 L
  324.1200 249.4800 L
  325.8000 249.8400 L
  327.1200 250.6800 L
  328.2000 251.8800 L
  328.9200 253.3200 L
  329.1600 254.7600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  395.8800 180.9600 m
  395.6400 182.4000 L
  394.9200 183.8400 L
  393.8400 185.0400 L
  392.5200 185.7600 L
  390.9600 186.2400 L
  389.2800 186.2400 L
  387.7200 185.7600 L
  386.4000 185.0400 L
  385.3200 183.8400 L
  384.6000 182.4000 L
  384.3600 180.9600 L
  384.6000 179.4000 L
  385.3200 177.9600 L
  386.4000 176.8800 L
  387.7200 176.0400 L
  389.2800 175.5600 L
  390.9600 175.5600 L
  392.5200 176.0400 L
  393.8400 176.8800 L
  394.9200 177.9600 L
  395.6400 179.4000 L
  395.8800 180.9600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  395.8800 180.9600 m
  395.6400 182.4000 L
  394.9200 183.8400 L
  393.8400 185.0400 L
  392.5200 185.7600 L
  390.9600 186.2400 L
  389.2800 186.2400 L
  387.7200 185.7600 L
  386.4000 185.0400 L
  385.3200 183.8400 L
  384.6000 182.4000 L
  384.3600 180.9600 L
  384.6000 179.4000 L
  385.3200 177.9600 L
  386.4000 176.8800 L
  387.7200 176.0400 L
  389.2800 175.5600 L
  390.9600 175.5600 L
  392.5200 176.0400 L
  393.8400 176.8800 L
  394.9200 177.9600 L
  395.6400 179.4000 L
  395.8800 180.9600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  423.6000 121.6800 m
  423.3600 123.1200 L
  422.6400 124.5600 L
  421.5600 125.7600 L
  420.2400 126.6000 L
  418.8000 126.9600 L
  417.1200 126.9600 L
  415.5600 126.6000 L
  414.1200 125.7600 L
  413.0400 124.5600 L
  412.4400 123.1200 L
  412.2000 121.6800 L
  412.4400 120.1200 L
  413.0400 118.8000 L
  414.1200 117.6000 L
  415.5600 116.7600 L
  417.1200 116.2800 L
  418.8000 116.2800 L
  420.2400 116.7600 L
  421.5600 117.6000 L
  422.6400 118.8000 L
  423.3600 120.1200 L
  423.6000 121.6800 L
F
U
u
  0.000 1.000 1.000 0.000 K
  423.6000 121.6800 m
  423.3600 123.1200 L
  422.6400 124.5600 L
  421.5600 125.7600 L
  420.2400 126.6000 L
  418.8000 126.9600 L
  417.1200 126.9600 L
  415.5600 126.6000 L
  414.1200 125.7600 L
  413.0400 124.5600 L
  412.4400 123.1200 L
  412.2000 121.6800 L
  412.4400 120.1200 L
  413.0400 118.8000 L
  414.1200 117.6000 L
  415.5600 116.7600 L
  417.1200 116.2800 L
  418.8000 116.2800 L
  420.2400 116.7600 L
  421.5600 117.6000 L
  422.6400 118.8000 L
  423.3600 120.1200 L
  423.6000 121.6800 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  434.2800 89.1600 m
  434.0400 90.7200 L
  433.3200 92.0400 L
  432.2400 93.2400 L
  430.9200 94.0800 L
  429.3600 94.4400 L
  427.6800 94.4400 L
  426.1200 94.0800 L
  424.6800 93.2400 L
  423.6000 92.0400 L
  423.0000 90.7200 L
  422.7600 89.1600 L
  423.0000 87.6000 L
  423.6000 86.2800 L
  424.6800 85.0800 L
  426.1200 84.2400 L
  427.6800 83.7600 L
  429.3600 83.7600 L
  430.9200 84.2400 L
  432.2400 85.0800 L
  433.3200 86.2800 L
  434.0400 87.6000 L
  434.2800 89.1600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  434.2800 89.1600 m
  434.0400 90.7200 L
  433.3200 92.0400 L
  432.2400 93.2400 L
  430.9200 94.0800 L
  429.3600 94.4400 L
  427.6800 94.4400 L
  426.1200 94.0800 L
  424.6800 93.2400 L
  423.6000 92.0400 L
  423.0000 90.7200 L
  422.7600 89.1600 L
  423.0000 87.6000 L
  423.6000 86.2800 L
  424.6800 85.0800 L
  426.1200 84.2400 L
  427.6800 83.7600 L
  429.3600 83.7600 L
  430.9200 84.2400 L
  432.2400 85.0800 L
  433.3200 86.2800 L
  434.0400 87.6000 L
  434.2800 89.1600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  437.8800 75.7200 m
  437.6400 77.2800 L
  436.9200 78.6000 L
  435.8400 79.8000 L
  434.5200 80.6400 L
  432.9600 81.1200 L
  431.2800 81.1200 L
  429.7200 80.6400 L
  428.2800 79.8000 L
  427.2000 78.6000 L
  426.6000 77.2800 L
  426.3600 75.7200 L
  426.6000 74.1600 L
  427.2000 72.8400 L
  428.2800 71.6400 L
  429.7200 70.8000 L
  431.2800 70.3200 L
  432.9600 70.3200 L
  434.5200 70.8000 L
  435.8400 71.6400 L
  436.9200 72.8400 L
  437.6400 74.1600 L
  437.8800 75.7200 L
F
U
u
  0.000 1.000 1.000 0.000 K
  437.8800 75.7200 m
  437.6400 77.2800 L
  436.9200 78.6000 L
  435.8400 79.8000 L
  434.5200 80.6400 L
  432.9600 81.1200 L
  431.2800 81.1200 L
  429.7200 80.6400 L
  428.2800 79.8000 L
  427.2000 78.6000 L
  426.6000 77.2800 L
  426.3600 75.7200 L
  426.6000 74.1600 L
  427.2000 72.8400 L
  428.2800 71.6400 L
  429.7200 70.8000 L
  431.2800 70.3200 L
  432.9600 70.3200 L
  434.5200 70.8000 L
  435.8400 71.6400 L
  436.9200 72.8400 L
  437.6400 74.1600 L
  437.8800 75.7200 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  435.0000 75.8400 m
  434.7600 76.8000 L
  434.1600 77.6400 L
  433.2000 78.2400 L
  432.1200 78.4800 L
  431.0400 78.2400 L
  430.0800 77.6400 L
  429.4800 76.8000 L
  429.2400 75.8400 L
  429.4800 74.7600 L
  430.0800 73.9200 L
  431.0400 73.3200 L
  432.1200 73.0800 L
  433.2000 73.3200 L
  434.1600 73.9200 L
  434.7600 74.7600 L
  435.0000 75.8400 L
F
U
u
  0.000 1.000 1.000 0.000 K
  435.0000 75.8400 m
  434.7600 76.8000 L
  434.1600 77.6400 L
  433.2000 78.2400 L
  432.1200 78.4800 L
  431.0400 78.2400 L
  430.0800 77.6400 L
  429.4800 76.8000 L
  429.2400 75.8400 L
  429.4800 74.7600 L
  430.0800 73.9200 L
  431.0400 73.3200 L
  432.1200 73.0800 L
  433.2000 73.3200 L
  434.1600 73.9200 L
  434.7600 74.7600 L
  435.0000 75.8400 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  427.9200 107.6400 m
  427.6800 109.2000 L
  426.9600 110.5200 L
  425.8800 111.7200 L
  424.5600 112.5600 L
  423.0000 112.9200 L
  421.3200 112.9200 L
  419.8800 112.5600 L
  418.4400 111.7200 L
  417.3600 110.5200 L
  416.7600 109.2000 L
  416.5200 107.6400 L
  416.7600 106.0800 L
  417.3600 104.7600 L
  418.4400 103.5600 L
  419.8800 102.7200 L
  421.3200 102.2400 L
  423.0000 102.2400 L
  424.5600 102.7200 L
  425.8800 103.5600 L
  426.9600 104.7600 L
  427.6800 106.0800 L
  427.9200 107.6400 L
F
U
u
  0.000 1.000 1.000 0.000 K
  427.9200 107.6400 m
  427.6800 109.2000 L
  426.9600 110.5200 L
  425.8800 111.7200 L
  424.5600 112.5600 L
  423.0000 112.9200 L
  421.3200 112.9200 L
  419.8800 112.5600 L
  418.4400 111.7200 L
  417.3600 110.5200 L
  416.7600 109.2000 L
  416.5200 107.6400 L
  416.7600 106.0800 L
  417.3600 104.7600 L
  418.4400 103.5600 L
  419.8800 102.7200 L
  421.3200 102.2400 L
  423.0000 102.2400 L
  424.5600 102.7200 L
  425.8800 103.5600 L
  426.9600 104.7600 L
  427.6800 106.0800 L
  427.9200 107.6400 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  403.0800 168.9600 m
  402.8400 170.4000 L
  402.1200 171.8400 L
  401.0400 173.0400 L
  399.7200 173.8800 L
  398.1600 174.2400 L
  396.4800 174.2400 L
  394.9200 173.8800 L
  393.6000 173.0400 L
  392.5200 171.8400 L
  391.8000 170.4000 L
  391.5600 168.9600 L
  391.8000 167.4000 L
  392.5200 165.9600 L
  393.6000 164.8800 L
  394.9200 164.0400 L
  396.4800 163.5600 L
  398.1600 163.5600 L
  399.7200 164.0400 L
  401.0400 164.8800 L
  402.1200 165.9600 L
  402.8400 167.4000 L
  403.0800 168.9600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  403.0800 168.9600 m
  402.8400 170.4000 L
  402.1200 171.8400 L
  401.0400 173.0400 L
  399.7200 173.8800 L
  398.1600 174.2400 L
  396.4800 174.2400 L
  394.9200 173.8800 L
  393.6000 173.0400 L
  392.5200 171.8400 L
  391.8000 170.4000 L
  391.5600 168.9600 L
  391.8000 167.4000 L
  392.5200 165.9600 L
  393.6000 164.8800 L
  394.9200 164.0400 L
  396.4800 163.5600 L
  398.1600 163.5600 L
  399.7200 164.0400 L
  401.0400 164.8800 L
  402.1200 165.9600 L
  402.8400 167.4000 L
  403.0800 168.9600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  334.0800 251.5200 m
  333.9600 253.0800 L
  333.2400 254.5200 L
  332.1600 255.6000 L
  330.7200 256.4400 L
  329.1600 256.9200 L
  327.4800 256.9200 L
  325.9200 256.4400 L
  324.4800 255.6000 L
  323.4000 254.5200 L
  322.8000 253.0800 L
  322.5600 251.5200 L
  322.8000 250.0800 L
  323.4000 248.6400 L
  324.4800 247.4400 L
  325.9200 246.6000 L
  327.4800 246.2400 L
  329.1600 246.2400 L
  330.7200 246.6000 L
  332.1600 247.4400 L
  333.2400 248.6400 L
  333.9600 250.0800 L
  334.0800 251.5200 L
F
U
u
  0.000 1.000 1.000 0.000 K
  334.0800 251.5200 m
  333.9600 253.0800 L
  333.2400 254.5200 L
  332.1600 255.6000 L
  330.7200 256.4400 L
  329.1600 256.9200 L
  327.4800 256.9200 L
  325.9200 256.4400 L
  324.4800 255.6000 L
  323.4000 254.5200 L
  322.8000 253.0800 L
  322.5600 251.5200 L
  322.8000 250.0800 L
  323.4000 248.6400 L
  324.4800 247.4400 L
  325.9200 246.6000 L
  327.4800 246.2400 L
  329.1600 246.2400 L
  330.7200 246.6000 L
  332.1600 247.4400 L
  333.2400 248.6400 L
  333.9600 250.0800 L
  334.0800 251.5200 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  219.6000 251.5200 m
  219.3600 253.0800 L
  218.7600 254.5200 L
  217.6800 255.6000 L
  216.2400 256.4400 L
  214.6800 256.9200 L
  213.1200 256.9200 L
  211.5600 256.4400 L
  210.1200 255.6000 L
  209.0400 254.5200 L
  208.3200 253.0800 L
  208.0800 251.5200 L
  208.3200 250.0800 L
  209.0400 248.6400 L
  210.1200 247.4400 L
  211.5600 246.6000 L
  213.1200 246.2400 L
  214.6800 246.2400 L
  216.2400 246.6000 L
  217.6800 247.4400 L
  218.7600 248.6400 L
  219.3600 250.0800 L
  219.6000 251.5200 L
F
U
u
  0.000 1.000 1.000 0.000 K
  219.6000 251.5200 m
  219.3600 253.0800 L
  218.7600 254.5200 L
  217.6800 255.6000 L
  216.2400 256.4400 L
  214.6800 256.9200 L
  213.1200 256.9200 L
  211.5600 256.4400 L
  210.1200 255.6000 L
  209.0400 254.5200 L
  208.3200 253.0800 L
  208.0800 251.5200 L
  208.3200 250.0800 L
  209.0400 248.6400 L
  210.1200 247.4400 L
  211.5600 246.6000 L
  213.1200 246.2400 L
  214.6800 246.2400 L
  216.2400 246.6000 L
  217.6800 247.4400 L
  218.7600 248.6400 L
  219.3600 250.0800 L
  219.6000 251.5200 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  150.7200 168.9600 m
  150.4800 170.4000 L
  149.7600 171.8400 L
  148.6800 173.0400 L
  147.3600 173.8800 L
  145.8000 174.2400 L
  144.1200 174.2400 L
  142.5600 173.8800 L
  141.2400 173.0400 L
  140.1600 171.8400 L
  139.4400 170.4000 L
  139.2000 168.9600 L
  139.4400 167.4000 L
  140.1600 165.9600 L
  141.2400 164.8800 L
  142.5600 164.0400 L
  144.1200 163.5600 L
  145.8000 163.5600 L
  147.3600 164.0400 L
  148.6800 164.8800 L
  149.7600 165.9600 L
  150.4800 167.4000 L
  150.7200 168.9600 L
F
U
u
  0.000 1.000 1.000 0.000 K
  150.7200 168.9600 m
  150.4800 170.4000 L
  149.7600 171.8400 L
  148.6800 173.0400 L
  147.3600 173.8800 L
  145.8000 174.2400 L
  144.1200 174.2400 L
  142.5600 173.8800 L
  141.2400 173.0400 L
  140.1600 171.8400 L
  139.4400 170.4000 L
  139.2000 168.9600 L
  139.4400 167.4000 L
  140.1600 165.9600 L
  141.2400 164.8800 L
  142.5600 164.0400 L
  144.1200 163.5600 L
  145.8000 163.5600 L
  147.3600 164.0400 L
  148.6800 164.8800 L
  149.7600 165.9600 L
  150.4800 167.4000 L
  150.7200 168.9600 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  125.7600 107.6400 m
  125.5200 109.2000 L
  124.9200 110.5200 L
  123.8400 111.7200 L
  122.4000 112.5600 L
  120.8400 112.9200 L
  119.1600 112.9200 L
  117.6000 112.5600 L
  116.2800 111.7200 L
  115.2000 110.5200 L
  114.4800 109.2000 L
  114.2400 107.6400 L
  114.4800 106.0800 L
  115.2000 104.7600 L
  116.2800 103.5600 L
  117.6000 102.7200 L
  119.1600 102.2400 L
  120.8400 102.2400 L
  122.4000 102.7200 L
  123.8400 103.5600 L
  124.9200 104.7600 L
  125.5200 106.0800 L
  125.7600 107.6400 L
F
U
u
  0.000 1.000 1.000 0.000 K
  125.7600 107.6400 m
  125.5200 109.2000 L
  124.9200 110.5200 L
  123.8400 111.7200 L
  122.4000 112.5600 L
  120.8400 112.9200 L
  119.1600 112.9200 L
  117.6000 112.5600 L
  116.2800 111.7200 L
  115.2000 110.5200 L
  114.4800 109.2000 L
  114.2400 107.6400 L
  114.4800 106.0800 L
  115.2000 104.7600 L
  116.2800 103.5600 L
  117.6000 102.7200 L
  119.1600 102.2400 L
  120.8400 102.2400 L
  122.4000 102.7200 L
  123.8400 103.5600 L
  124.9200 104.7600 L
  125.5200 106.0800 L
  125.7600 107.6400 L
S
U
u
  0.000 1.000 1.000 0.000 k
  0.000 0.000 0.000 1.000 K
  115.8000 75.7200 m
  115.5600 77.2800 L
  114.9600 78.6000 L
  113.8800 79.8000 L
  112.4400 80.6400 L
  110.8800 81.1200 L
  109.2000 81.1200 L
  107.6400 80.6400 L
  106.3200 79.8000 L
  105.2400 78.6000 L
  104.5200 77.2800 L
  104.2800 75.7200 L
  104.5200 74.1600 L
  105.2400 72.8400 L
  106.3200 71.6400 L
  107.6400 70.8000 L
  109.2000 70.3200 L
  110.8800 70.3200 L
  112.4400 70.8000 L
  113.8800 71.6400 L
  114.9600 72.8400 L
  115.5600 74.1600 L
  115.8000 75.7200 L
F
U
u
  0.000 1.000 1.000 0.000 K
  115.8000 75.7200 m
  115.5600 77.2800 L
  114.9600 78.6000 L
  113.8800 79.8000 L
  112.4400 80.6400 L
  110.8800 81.1200 L
  109.2000 81.1200 L
  107.6400 80.6400 L
  106.3200 79.8000 L
  105.2400 78.6000 L
  104.5200 77.2800 L
  104.2800 75.7200 L
  104.5200 74.1600 L
  105.2400 72.8400 L
  106.3200 71.6400 L
  107.6400 70.8000 L
  109.2000 70.3200 L
  110.8800 70.3200 L
  112.4400 70.8000 L
  113.8800 71.6400 L
  114.9600 72.8400 L
  115.5600 74.1600 L
  115.8000 75.7200 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 95.1600 65.8800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 101.4000 61.3200 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 95.1600 87.9600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 101.4000 83.4000 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 108.4800 129.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 114.9600 125.2800 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 138.4800 193.6800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 148.2000 189.2400 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 230.0400 243.0000 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 236.5200 238.4400 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 311.8800 238.3200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 318.3600 233.7600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 401.5200 183.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 407.8800 179.1600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 428.5200 119.7600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 434.8800 115.3200 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 439.2000 83.2800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 445.5600 78.7200 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 428.5200 58.5600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 436.3200 54.0000 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 441.9600 65.8800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 449.8800 61.3200 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(11\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 431.2800 99.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 440.0400 95.4000 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(12\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 404.4000 159.1200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 410.8800 154.5600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(13\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 334.0800 232.9200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 340.3200 225.9600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(14\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 216.6000 232.9200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 223.5600 225.9600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(15\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 119.2800 174.9600 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 127.6800 167.1600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(16\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 92.4000 105.6000 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 97.8000 99.3600 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(17\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 113.5200 58.2000 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Z\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 119.5200 54.4800 0 Tp
TP
94.696041 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(18\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  391.5600 158.4000 m
  397.2000 168.9600 L
S
U
u
  150.6000 158.4000 m
  144.8400 168.9600 L
S
U
u
  394.3200 163.6800 m
  390.1200 181.0800 L
S
U
u
  147.7200 163.6800 m
  152.0400 181.0800 L
S
U
u
  334.0800 274.9200 m
  328.3200 251.5200 L
S
U
u
  208.0800 274.9200 m
  213.8400 251.5200 L
S
U
u
  331.2000 263.5200 m
  323.2800 254.8800 L
S
U
u
  210.9600 263.5200 m
  218.7600 254.8800 L
S
U
u
  405.8400 101.7600 m
  417.9600 121.8000 L
S
U
u
  136.3200 101.7600 m
  124.2000 121.8000 L
S
U
u
  411.4800 111.7200 m
  422.0400 107.7600 L
S
U
u
  130.6800 111.7200 m
  119.8800 107.7600 L
S
U
u
  417.2400 109.6800 m
  428.5200 89.1600 L
S
U
u
  124.9200 109.6800 m
  113.5200 89.1600 L
S
U
u
  422.7600 99.0000 m
  432.0000 75.8400 L
S
U
u
  427.0800 87.8400 m
  432.0000 75.8400 L
S
U
u
  119.2800 99.0000 m
  109.9200 75.8400 L
S
U
u
  114.9600 87.8400 m
  109.9200 75.8400 L
S
U
u
0.5000 w
  197.6400 224.1600 m
  199.0800 224.1600 L
S
U
u
  200.5200 224.1600 m
  201.9600 224.1600 L
S
U
u
  203.4000 224.1600 m
  204.8400 224.1600 L
S
U
u
  206.2800 224.1600 m
  207.7200 224.1600 L
S
U
u
  209.1600 224.1600 m
  210.6000 224.1600 L
S
U
u
  212.0400 224.1600 m
  213.4800 224.1600 L
S
U
u
  214.9200 224.1600 m
  216.3600 224.1600 L
S
U
u
  217.8000 224.1600 m
  219.2400 224.1600 L
S
U
u
  220.6800 224.1600 m
  222.1200 224.1600 L
S
U
u
  223.5600 224.1600 m
  225.0000 224.1600 L
S
U
u
  226.3200 224.1600 m
  227.7600 224.1600 L
S
U
u
  229.2000 224.1600 m
  230.6400 224.1600 L
S
U
u
  232.0800 224.1600 m
  233.5200 224.1600 L
S
U
u
  234.9600 224.1600 m
  236.4000 224.1600 L
S
U
u
  237.8400 224.1600 m
  239.2800 224.1600 L
S
U
u
  240.7200 224.1600 m
  242.1600 224.1600 L
S
U
u
  243.6000 224.1600 m
  245.0400 224.2800 L
S
U
u
  246.4800 224.6400 m
  247.9200 225.0000 L
S
U
u
  249.2400 225.4800 m
  250.5600 226.0800 L
S
U
u
  251.7600 226.6800 m
  253.0800 227.4000 L
S
U
u
  251.7600 226.6800 m
  253.0800 227.4000 L
S
U
u
  254.1600 228.3600 m
  255.2400 229.3200 L
S
U
u
  254.1600 228.3600 m
  255.2400 229.3200 L
S
U
u
  256.2000 230.4000 m
  257.0400 231.3600 L
S
U
u
  257.0400 231.3600 m
  257.1600 231.4800 L
S
U
u
  257.8800 232.6800 m
  258.6000 233.8800 L
S
U
u
  259.2000 235.2000 m
  259.6800 236.4000 L
S
U
u
  259.6800 236.4000 m
  259.6800 236.5200 L
S
U
u
  260.0400 237.9600 m
  260.2800 239.1600 L
S
U
u
  260.2800 239.1600 m
  260.2800 239.4000 L
S
U
u
  260.4000 240.8400 m
  260.5200 242.0400 L
S
U
u
  260.5200 242.0400 m
  260.5200 242.2800 L
S
U
u
  260.5200 243.7200 m
  260.5200 245.1600 L
S
U
u
  260.5200 246.6000 m
  260.5200 248.0400 L
S
U
u
  260.5200 249.4800 m
  260.5200 250.9200 L
S
U
u
  260.5200 252.3600 m
  260.5200 253.8000 L
S
U
u
  260.5200 255.2400 m
  260.5200 256.6800 L
S
U
u
  260.5200 258.1200 m
  260.5200 259.5600 L
S
U
u
  260.5200 261.0000 m
  260.5200 262.4400 L
S
U
u
  260.5200 263.8800 m
  260.5200 265.3200 L
S
U
u
  260.5200 266.7600 m
  260.5200 268.2000 L
S
U
u
  260.5200 269.6400 m
  260.5200 271.0800 L
S
U
u
  260.5200 272.5200 m
  260.5200 273.9600 L
S
U
u
  260.5200 275.4000 m
  260.5200 276.8400 L
S
U
u
  260.5200 278.2800 m
  260.4000 279.7200 L
S
U
u
  260.1600 281.1600 m
  259.9200 282.6000 L
S
U
u
  259.5600 283.9200 m
  258.9600 285.2400 L
S
U
u
  258.3600 286.5600 m
  257.5200 287.7600 L
S
U
u
  256.6800 288.9600 m
  255.8400 290.0400 L
S
U
u
  254.8800 291.0000 m
  253.8000 291.8400 L
S
U
u
  252.6000 292.6800 m
  251.4000 293.4000 L
S
U
u
  250.2000 294.1200 m
  248.8800 294.6000 L
S
U
u
  247.5600 295.0800 m
  246.1200 295.4400 L
S
U
u
  244.6800 295.6800 m
  243.2400 295.8000 L
S
U
u
  241.8000 295.9200 m
  240.3600 295.9200 L
S
U
u
  238.9200 295.9200 m
  237.4800 295.9200 L
S
U
u
  236.0400 295.9200 m
  234.6000 295.9200 L
S
U
u
  233.1600 295.9200 m
  231.7200 295.9200 L
S
U
u
  230.2800 295.9200 m
  228.8400 295.9200 L
S
U
u
  227.4000 295.9200 m
  226.0800 295.9200 L
S
U
u
  224.6400 295.9200 m
  223.2000 295.9200 L
S
U
u
  221.7600 295.9200 m
  220.3200 295.9200 L
S
U
u
  218.8800 295.9200 m
  217.4400 295.9200 L
S
U
u
  216.0000 295.9200 m
  214.5600 295.9200 L
S
U
u
  213.1200 295.9200 m
  211.6800 295.9200 L
S
U
u
  210.2400 295.9200 m
  208.8000 295.9200 L
S
U
u
  207.3600 295.9200 m
  205.9200 295.9200 L
S
U
u
  204.4800 295.9200 m
  203.0400 295.9200 L
S
U
u
  201.6000 295.9200 m
  200.1600 295.9200 L
S
U
u
  198.7200 295.9200 m
  197.6400 295.9200 L
S
U
u
  197.6400 295.9200 m
  197.2800 295.9200 L
S
U
u
  195.8400 295.8000 m
  194.8800 295.6800 L
S
U
u
  194.8800 295.6800 m
  194.4000 295.5600 L
S
U
u
  192.9600 295.2000 m
  192.1200 294.9600 L
S
U
u
  192.1200 294.9600 m
  191.6400 294.7200 L
S
U
u
  190.3200 294.2400 m
  189.4800 293.8800 L
S
U
u
  189.4800 293.8800 m
  189.0000 293.6400 L
S
U
u
  187.8000 292.9200 m
  187.0800 292.4400 L
S
U
u
  187.0800 292.4400 m
  186.6000 292.0800 L
S
U
u
  185.5200 291.1200 m
  184.9200 290.7600 L
S
U
u
  184.9200 290.7600 m
  184.4400 290.2800 L
S
U
u
  183.6000 289.0800 m
  183.1200 288.6000 L
S
U
u
  183.1200 288.6000 m
  182.7600 288.0000 L
S
U
u
  181.9200 286.8000 m
  181.5600 286.2000 L
S
U
u
  181.5600 286.2000 m
  181.3200 285.4800 L
S
U
u
  180.7200 284.1600 m
  180.4800 283.5600 L
S
U
u
  180.4800 283.5600 m
  180.3600 282.8400 L
S
U
u
  180.0000 281.4000 m
  179.8800 280.8000 L
S
U
u
  179.8800 280.8000 m
  179.7600 279.9600 L
S
U
u
  179.6400 278.5200 m
  179.6400 278.0400 L
S
U
u
  179.6400 278.0400 m
  179.6400 277.0800 L
S
U
u
  179.6400 275.6400 m
  179.6400 274.2000 L
S
U
u
  179.6400 272.7600 m
  179.6400 271.3200 L
S
U
u
  179.6400 269.8800 m
  179.6400 268.4400 L
S
U
u
  179.6400 267.0000 m
  179.6400 265.5600 L
S
U
u
  179.6400 264.1200 m
  179.6400 262.6800 L
S
U
u
  179.6400 261.2400 m
  179.6400 259.8000 L
S
U
u
  179.6400 258.3600 m
  179.6400 256.9200 L
S
U
u
  179.6400 255.4800 m
  179.6400 254.0400 L
S
U
u
  179.6400 252.6000 m
  179.6400 251.1600 L
S
U
u
  179.6400 249.7200 m
  179.6400 248.2800 L
S
U
u
  179.6400 246.8400 m
  179.6400 245.4000 L
S
U
u
  179.6400 243.9600 m
  179.6400 242.5200 L
S
U
u
  179.7600 241.0800 m
  179.8800 239.6400 L
S
U
u
  180.1200 238.2000 m
  180.3600 236.7600 L
S
U
u
  180.8400 235.4400 m
  181.4400 234.1200 L
S
U
u
  182.1600 232.9200 m
  182.8800 231.7200 L
S
U
u
  183.8400 230.6400 m
  184.8000 229.5600 L
S
U
u
  185.7600 228.6000 m
  186.8400 227.6400 L
S
U
u
  188.0400 226.8000 m
  189.2400 226.2000 L
S
U
u
  190.5600 225.6000 m
  191.8800 225.1200 L
S
U
u
  193.2000 224.7600 m
  194.6400 224.4000 L
S
U
u
  196.0800 224.2800 m
  197.5200 224.1600 L
S
U
u
  309.9600 224.1600 m
  311.4000 224.1600 L
S
U
u
  312.8400 224.1600 m
  314.2800 224.1600 L
S
U
u
  315.7200 224.1600 m
  317.1600 224.1600 L
S
U
u
  318.6000 224.1600 m
  320.0400 224.1600 L
S
U
u
  321.4800 224.1600 m
  322.9200 224.1600 L
S
U
u
  324.3600 224.1600 m
  325.8000 224.1600 L
S
U
u
  327.2400 224.1600 m
  328.6800 224.1600 L
S
U
u
  330.1200 224.1600 m
  331.5600 224.1600 L
S
U
u
  333.0000 224.1600 m
  334.4400 224.1600 L
S
U
u
  335.8800 224.1600 m
  337.3200 224.1600 L
S
U
u
  338.7600 224.1600 m
  340.2000 224.1600 L
S
U
u
  341.6400 224.1600 m
  343.0800 224.1600 L
S
U
u
  344.5200 224.1600 m
  345.9600 224.1600 L
S
U
u
  347.4000 224.1600 m
  348.8400 224.1600 L
S
U
u
  350.2800 224.1600 m
  351.7200 224.1600 L
S
U
u
  353.1600 224.1600 m
  354.6000 224.1600 L
S
U
u
  355.9200 224.1600 m
  357.3600 224.2800 L
S
U
u
  358.8000 224.6400 m
  360.2400 225.0000 L
S
U
u
  361.5600 225.4800 m
  362.8800 226.0800 L
S
U
u
  364.0800 226.6800 m
  365.4000 227.4000 L
S
U
u
  364.0800 226.6800 m
  365.4000 227.4000 L
S
U
u
  366.4800 228.3600 m
  367.5600 229.3200 L
S
U
u
  366.4800 228.3600 m
  367.5600 229.3200 L
S
U
u
  368.5200 230.4000 m
  369.3600 231.3600 L
S
U
u
  369.3600 231.3600 m
  369.4800 231.4800 L
S
U
u
  370.2000 232.8000 m
  370.8000 233.8800 L
S
U
u
  370.8000 233.8800 m
  370.9200 234.1200 L
S
U
u
  371.5200 235.4400 m
  371.8800 236.4000 L
S
U
u
  371.8800 236.4000 m
  372.0000 236.7600 L
S
U
u
  372.3600 238.2000 m
  372.6000 239.1600 L
S
U
u
  372.6000 239.1600 m
  372.6000 239.6400 L
S
U
u
  372.7200 241.0800 m
  372.8400 242.0400 L
S
U
u
  372.8400 242.0400 m
  372.8400 242.5200 L
S
U
u
  372.8400 243.9600 m
  372.8400 245.4000 L
S
U
u
  372.8400 246.8400 m
  372.8400 248.2800 L
S
U
u
  372.8400 249.7200 m
  372.8400 251.1600 L
S
U
u
  372.8400 252.6000 m
  372.8400 254.0400 L
S
U
u
  372.8400 255.4800 m
  372.8400 256.9200 L
S
U
u
  372.8400 258.3600 m
  372.8400 259.8000 L
S
U
u
  372.8400 261.2400 m
  372.8400 262.6800 L
S
U
u
  372.8400 264.1200 m
  372.8400 265.5600 L
S
U
u
  372.8400 267.0000 m
  372.8400 268.4400 L
S
U
u
  372.8400 269.8800 m
  372.8400 271.3200 L
S
U
u
  372.8400 272.7600 m
  372.8400 274.2000 L
S
U
u
  372.8400 275.6400 m
  372.8400 277.0800 L
S
U
u
  372.8400 278.5200 m
  372.7200 279.9600 L
S
U
u
  372.4800 281.4000 m
  372.1200 282.8400 L
S
U
u
  371.6400 284.1600 m
  371.0400 285.4800 L
S
U
u
  370.4400 286.8000 m
  369.7200 288.0000 L
S
U
u
  368.8800 289.2000 m
  367.9200 290.2800 L
S
U
u
  366.9600 291.1200 m
  365.8800 292.0800 L
S
U
u
  364.6800 292.9200 m
  363.4800 293.6400 L
S
U
u
  362.1600 294.2400 m
  360.8400 294.7200 L
S
U
u
  359.5200 295.2000 m
  358.0800 295.5600 L
S
U
u
  356.6400 295.8000 m
  355.3200 295.9200 L
S
U
u
  353.8800 295.9200 m
  352.4400 295.9200 L
S
U
u
  351.0000 295.9200 m
  349.5600 295.9200 L
S
U
u
  348.1200 295.9200 m
  346.6800 295.9200 L
S
U
u
  345.2400 295.9200 m
  343.8000 295.9200 L
S
U
u
  342.3600 295.9200 m
  340.9200 295.9200 L
S
U
u
  339.4800 295.9200 m
  338.0400 295.9200 L
S
U
u
  336.6000 295.9200 m
  335.1600 295.9200 L
S
U
u
  333.7200 295.9200 m
  332.2800 295.9200 L
S
U
u
  330.8400 295.9200 m
  329.4000 295.9200 L
S
U
u
  327.9600 295.9200 m
  326.5200 295.9200 L
S
U
u
  325.0800 295.9200 m
  323.6400 295.9200 L
S
U
u
  322.2000 295.9200 m
  320.7600 295.9200 L
S
U
u
  319.3200 295.9200 m
  317.8800 295.9200 L
S
U
u
  316.4400 295.9200 m
  315.0000 295.9200 L
S
U
u
  313.5600 295.9200 m
  312.1200 295.9200 L
S
U
u
  310.6800 295.9200 m
  309.9600 295.9200 L
S
U
u
  309.9600 295.9200 m
  309.2400 295.9200 L
S
U
u
  307.8000 295.8000 m
  307.0800 295.6800 L
S
U
u
  307.0800 295.6800 m
  306.3600 295.5600 L
S
U
u
  305.0400 295.0800 m
  304.3200 294.9600 L
S
U
u
  304.3200 294.9600 m
  303.7200 294.7200 L
S
U
u
  302.4000 294.1200 m
  301.6800 293.8800 L
S
U
u
  301.6800 293.8800 m
  301.0800 293.5200 L
S
U
u
  299.8800 292.8000 m
  299.2800 292.4400 L
S
U
u
  299.2800 292.4400 m
  298.6800 291.9600 L
S
U
u
  297.6000 291.0000 m
  297.1200 290.7600 L
S
U
u
  297.1200 290.7600 m
  296.6400 290.1600 L
S
U
u
  295.6800 289.0800 m
  295.3200 288.6000 L
S
U
u
  295.3200 288.6000 m
  294.8400 287.8800 L
S
U
u
  294.1200 286.6800 m
  293.8800 286.2000 L
S
U
u
  293.8800 286.2000 m
  293.5200 285.3600 L
S
U
u
  293.0400 284.0400 m
  292.8000 283.5600 L
S
U
u
  292.8000 283.5600 m
  292.5600 282.7200 L
S
U
u
  292.2000 281.2800 m
  292.0800 280.8000 L
S
U
u
  292.0800 280.8000 m
  292.0800 279.8400 L
S
U
u
  291.9600 278.4000 m
  291.9600 278.0400 L
S
U
u
  291.9600 278.0400 m
  291.9600 276.9600 L
S
U
u
  291.9600 275.5200 m
  291.9600 274.0800 L
S
U
u
  291.9600 272.6400 m
  291.9600 271.2000 L
S
U
u
  291.9600 269.7600 m
  291.9600 268.3200 L
S
U
u
  291.9600 266.8800 m
  291.9600 265.4400 L
S
U
u
  291.9600 264.0000 m
  291.9600 262.5600 L
S
U
u
  291.9600 261.1200 m
  291.9600 259.6800 L
S
U
u
  291.9600 258.2400 m
  291.9600 256.8000 L
S
U
u
  291.9600 255.3600 m
  291.9600 253.9200 L
S
U
u
  291.9600 252.4800 m
  291.9600 251.0400 L
S
U
u
  291.9600 249.6000 m
  291.9600 248.1600 L
S
U
u
  291.9600 246.7200 m
  291.9600 245.2800 L
S
U
u
  291.9600 243.8400 m
  291.9600 242.4000 L
S
U
u
  291.9600 240.9600 m
  292.0800 239.5200 L
S
U
u
  292.3200 238.0800 m
  292.6800 236.6400 L
S
U
u
  293.2800 235.3200 m
  293.8800 234.0000 L
S
U
u
  294.4800 232.6800 m
  295.2000 231.4800 L
S
U
u
  296.1600 230.4000 m
  297.1200 229.3200 L
S
U
u
  296.1600 230.4000 m
  297.1200 229.3200 L
S
U
u
  298.2000 228.3600 m
  299.2800 227.4000 L
S
U
u
  298.2000 228.3600 m
  299.2800 227.4000 L
S
U
u
  300.4800 226.6800 m
  301.6800 226.0800 L
S
U
u
  303.0000 225.4800 m
  304.3200 225.0000 L
S
U
u
  305.7600 224.6400 m
  307.0800 224.2800 L
S
U
u
  307.0800 224.2800 m
  307.2000 224.2800 L
S
U
u
  308.6400 224.1600 m
  309.9600 224.1600 L
S
U
u
  372.8400 134.2800 m
  374.2800 134.2800 L
S
U
u
  375.7200 134.2800 m
  377.1600 134.2800 L
S
U
u
  378.6000 134.2800 m
  380.0400 134.2800 L
S
U
u
  381.4800 134.2800 m
  382.9200 134.2800 L
S
U
u
  384.3600 134.2800 m
  385.8000 134.2800 L
S
U
u
  387.2400 134.2800 m
  388.6800 134.2800 L
S
U
u
  390.1200 134.2800 m
  391.5600 134.2800 L
S
U
u
  393.0000 134.2800 m
  394.4400 134.2800 L
S
U
u
  395.8800 134.2800 m
  397.3200 134.2800 L
S
U
u
  398.7600 134.2800 m
  400.2000 134.2800 L
S
U
u
  401.6400 134.2800 m
  403.0800 134.2800 L
S
U
u
  404.5200 134.2800 m
  405.9600 134.4000 L
S
U
u
  407.4000 134.5200 m
  408.8400 134.8800 L
S
U
u
  410.1600 135.2400 m
  411.4800 135.8400 L
S
U
u
  412.8000 136.4400 m
  414.0000 137.1600 L
S
U
u
  415.2000 138.0000 m
  416.2800 138.9600 L
S
U
u
  417.3600 139.9200 m
  418.3200 141.0000 L
S
U
u
  419.1600 142.2000 m
  419.8800 143.4000 L
S
U
u
  420.4800 144.6000 m
  420.9600 145.9200 L
S
U
u
  421.4400 147.2400 m
  421.8000 148.6800 L
S
U
u
  421.9200 150.1200 m
  422.0400 151.5600 L
S
U
u
  422.1600 153.0000 m
  422.1600 154.4400 L
S
U
u
  422.1600 155.8800 m
  422.1600 157.3200 L
S
U
u
  422.1600 158.7600 m
  422.1600 160.2000 L
S
U
u
  422.1600 161.6400 m
  422.1600 162.9600 L
S
U
u
  422.1600 164.4000 m
  422.1600 165.8400 L
S
U
u
  422.1600 167.2800 m
  422.1600 168.7200 L
S
U
u
  422.1600 170.1600 m
  422.1600 171.6000 L
S
U
u
  422.1600 173.0400 m
  422.1600 174.4800 L
S
U
u
  422.1600 175.9200 m
  422.1600 177.3600 L
S
U
u
  422.1600 178.8000 m
  422.1600 180.2400 L
S
U
u
  422.1600 181.6800 m
  422.1600 183.1200 L
S
U
u
  422.0400 184.5600 m
  421.9200 186.0000 L
S
U
u
  421.6800 187.4400 m
  421.4400 188.8800 L
S
U
u
  420.8400 190.2000 m
  420.3600 191.5200 L
S
U
u
  419.7600 192.7200 m
  418.9200 193.9200 L
S
U
u
  418.0800 195.1200 m
  417.1200 196.2000 L
S
U
u
  416.0400 197.1600 m
  414.9600 198.0000 L
S
U
u
  413.7600 198.8400 m
  412.5600 199.5600 L
S
U
u
  411.2400 200.1600 m
  409.9200 200.7600 L
S
U
u
  408.4800 201.0000 m
  407.0400 201.3600 L
S
U
u
  408.4800 201.0000 m
  407.0400 201.3600 L
S
U
u
  405.6000 201.4800 m
  404.2800 201.6000 L
S
U
u
  404.2800 201.6000 m
  404.1600 201.6000 L
S
U
u
  402.7200 201.6000 m
  401.2800 201.6000 L
S
U
u
  399.8400 201.6000 m
  398.4000 201.6000 L
S
U
u
  396.9600 201.6000 m
  395.5200 201.6000 L
S
U
u
  394.0800 201.6000 m
  392.6400 201.6000 L
S
U
u
  391.2000 201.6000 m
  389.7600 201.6000 L
S
U
u
  388.3200 201.6000 m
  386.8800 201.6000 L
S
U
u
  385.4400 201.6000 m
  384.0000 201.6000 L
S
U
u
  382.5600 201.6000 m
  381.1200 201.6000 L
S
U
u
  379.6800 201.6000 m
  378.2400 201.6000 L
S
U
u
  376.8000 201.6000 m
  375.3600 201.6000 L
S
U
u
  373.9200 201.6000 m
  372.8400 201.6000 L
S
U
u
  372.8400 201.6000 m
  372.4800 201.6000 L
S
U
u
  371.0400 201.4800 m
  369.9600 201.3600 L
S
U
u
  369.9600 201.3600 m
  369.6000 201.2400 L
S
U
u
  368.1600 201.0000 m
  367.2000 200.7600 L
S
U
u
  367.2000 200.7600 m
  366.8400 200.6400 L
S
U
u
  365.5200 200.0400 m
  364.5600 199.6800 L
S
U
u
  364.5600 199.6800 m
  364.2000 199.4400 L
S
U
u
  363.0000 198.6000 m
  362.1600 198.1200 L
S
U
u
  362.1600 198.1200 m
  361.8000 197.7600 L
S
U
u
  360.7200 196.9200 m
  360.0000 196.3200 L
S
U
u
  360.0000 196.3200 m
  359.6400 195.9600 L
S
U
u
  358.8000 194.8800 m
  358.2000 194.1600 L
S
U
u
  358.2000 194.1600 m
  357.9600 193.6800 L
S
U
u
  357.2400 192.4800 m
  356.7600 191.7600 L
S
U
u
  356.7600 191.7600 m
  356.5200 191.2800 L
S
U
u
  356.0400 189.9600 m
  355.6800 189.1200 L
S
U
u
  355.6800 189.1200 m
  355.5600 188.6400 L
S
U
u
  355.3200 187.2000 m
  355.0800 186.4800 L
S
U
u
  355.0800 186.4800 m
  355.0800 185.7600 L
S
U
u
  354.9600 184.3200 m
  354.9600 183.6000 L
S
U
u
  354.9600 183.6000 m
  354.9600 182.8800 L
S
U
u
  354.9600 181.4400 m
  354.9600 180.0000 L
S
U
u
  354.9600 178.5600 m
  354.9600 177.1200 L
S
U
u
  354.9600 175.6800 m
  354.9600 174.2400 L
S
U
u
  354.9600 172.8000 m
  354.9600 171.3600 L
S
U
u
  354.9600 169.9200 m
  354.9600 168.4800 L
S
U
u
  354.9600 167.0400 m
  354.9600 165.6000 L
S
U
u
  354.9600 164.1600 m
  354.9600 162.7200 L
S
U
u
  354.9600 161.4000 m
  354.9600 159.9600 L
S
U
u
  354.9600 158.5200 m
  354.9600 157.0800 L
S
U
u
  354.9600 155.6400 m
  354.9600 154.2000 L
S
U
u
  354.9600 152.7600 m
  354.9600 152.2800 L
S
U
u
  354.9600 152.2800 m
  354.9600 151.3200 L
S
U
u
  355.0800 149.8800 m
  355.0800 149.4000 L
S
U
u
  355.0800 149.4000 m
  355.3200 148.4400 L
S
U
u
  355.5600 147.0000 m
  355.6800 146.6400 L
S
U
u
  355.6800 146.6400 m
  356.0400 145.6800 L
S
U
u
  356.6400 144.3600 m
  356.7600 144.1200 L
S
U
u
  356.7600 144.1200 m
  357.3600 143.1600 L
S
U
u
  358.0800 141.8400 m
  358.2000 141.6000 L
S
U
u
  358.2000 141.6000 m
  358.9200 140.7600 L
S
U
u
  359.8800 139.6800 m
  360.0000 139.5600 L
S
U
u
  360.0000 139.5600 m
  360.9600 138.7200 L
S
U
u
  362.0400 137.7600 m
  362.1600 137.6400 L
S
U
u
  362.1600 137.6400 m
  363.2400 137.0400 L
S
U
u
  364.4400 136.3200 m
  364.5600 136.2000 L
S
U
u
  364.5600 136.2000 m
  365.7600 135.7200 L
S
U
u
  367.0800 135.1200 m
  367.2000 135.1200 L
S
U
u
  367.2000 135.1200 m
  368.5200 134.7600 L
S
U
u
  369.9600 134.4000 m
  371.4000 134.4000 L
S
U
u
  134.7600 143.2800 m
  136.2000 143.2800 L
S
U
u
  137.6400 143.2800 m
  139.0800 143.2800 L
S
U
u
  140.5200 143.2800 m
  141.9600 143.2800 L
S
U
u
  143.4000 143.2800 m
  144.8400 143.2800 L
S
U
u
  146.2800 143.2800 m
  147.7200 143.2800 L
S
U
u
  149.1600 143.2800 m
  150.6000 143.2800 L
S
U
u
  152.0400 143.2800 m
  153.4800 143.2800 L
S
U
u
  154.9200 143.2800 m
  156.3600 143.2800 L
S
U
u
  157.8000 143.2800 m
  159.2400 143.2800 L
S
U
u
  160.6800 143.2800 m
  162.0000 143.2800 L
S
U
u
  163.4400 143.2800 m
  164.8800 143.2800 L
S
U
u
  166.3200 143.2800 m
  167.7600 143.4000 L
S
U
u
  169.2000 143.5200 m
  170.6400 143.8800 L
S
U
u
  172.0800 144.2400 m
  173.4000 144.8400 L
S
U
u
  174.7200 145.4400 m
  175.9200 146.1600 L
S
U
u
  177.1200 147.0000 m
  178.2000 147.9600 L
S
U
u
  179.2800 148.9200 m
  180.2400 150.0000 L
S
U
u
  181.0800 151.2000 m
  181.8000 152.4000 L
S
U
u
  182.4000 153.7200 m
  183.0000 155.0400 L
S
U
u
  183.4800 156.3600 m
  183.8400 157.8000 L
S
U
u
  184.0800 159.2400 m
  184.2000 160.6800 L
S
U
u
  184.2000 162.0000 m
  184.2000 163.4400 L
S
U
u
  184.2000 164.8800 m
  184.2000 166.3200 L
S
U
u
  184.2000 167.7600 m
  184.2000 169.2000 L
S
U
u
  184.2000 170.6400 m
  184.2000 172.0800 L
S
U
u
  184.2000 173.5200 m
  184.2000 174.9600 L
S
U
u
  184.2000 176.4000 m
  184.2000 177.8400 L
S
U
u
  184.2000 179.2800 m
  184.2000 180.7200 L
S
U
u
  184.2000 182.1600 m
  184.2000 183.6000 L
S
U
u
  184.2000 185.0400 m
  184.2000 186.4800 L
S
U
u
  184.2000 187.9200 m
  184.2000 188.1600 L
S
U
u
  184.2000 188.1600 m
  184.0800 189.3600 L
S
U
u
  183.9600 190.8000 m
  183.9600 190.9200 L
S
U
u
  183.9600 190.9200 m
  183.6000 192.2400 L
S
U
u
  183.2400 193.6800 m
  182.6400 195.0000 L
S
U
u
  182.1600 196.3200 m
  181.4400 197.5200 L
S
U
u
  180.7200 198.7200 m
  179.7600 199.8000 L
S
U
u
  178.9200 200.8800 m
  177.8400 201.8400 L
S
U
u
  176.6400 202.6800 m
  175.4400 203.5200 L
S
U
u
  174.1200 204.2400 m
  172.8000 204.7200 L
S
U
u
  171.4800 205.3200 m
  170.0400 205.6800 L
S
U
u
  168.6000 205.9200 m
  167.1600 206.0400 L
S
U
u
  165.7200 206.1600 m
  164.2800 206.1600 L
S
U
u
  162.8400 206.1600 m
  161.5200 206.1600 L
S
U
u
  160.0800 206.1600 m
  158.6400 206.1600 L
S
U
u
  157.2000 206.1600 m
  155.7600 206.1600 L
S
U
u
  154.3200 206.1600 m
  152.8800 206.1600 L
S
U
u
  151.4400 206.1600 m
  150.0000 206.1600 L
S
U
u
  148.5600 206.1600 m
  147.1200 206.1600 L
S
U
u
  145.6800 206.1600 m
  144.2400 206.1600 L
S
U
u
  142.8000 206.1600 m
  141.3600 206.1600 L
S
U
u
  139.9200 206.1600 m
  138.4800 206.1600 L
S
U
u
  137.0400 206.1600 m
  135.6000 206.1600 L
S
U
u
  134.1600 206.1600 m
  132.7200 206.0400 L
S
U
u
  131.2800 205.8000 m
  129.9600 205.3200 L
S
U
u
  128.6400 204.9600 m
  127.3200 204.3600 L
S
U
u
  126.0000 203.7600 m
  124.8000 203.0400 L
S
U
u
  123.6000 202.2000 m
  122.5200 201.2400 L
S
U
u
  121.5600 200.2800 m
  120.6000 199.2000 L
S
U
u
  119.7600 198.0000 m
  119.0400 196.8000 L
S
U
u
  118.3200 195.6000 m
  117.8400 194.2800 L
S
U
u
  117.4800 192.9600 m
  117.1200 191.5200 L
S
U
u
  116.8800 190.0800 m
  116.7600 188.6400 L
S
U
u
  116.7600 187.2000 m
  116.7600 185.7600 L
S
U
u
  116.7600 184.3200 m
  116.7600 182.8800 L
S
U
u
  116.7600 181.4400 m
  116.7600 180.0000 L
S
U
u
  116.7600 178.5600 m
  116.7600 177.1200 L
S
U
u
  116.7600 175.6800 m
  116.7600 174.2400 L
S
U
u
  116.7600 172.8000 m
  116.7600 171.3600 L
S
U
u
  116.7600 169.9200 m
  116.7600 168.4800 L
S
U
u
  116.7600 167.0400 m
  116.7600 165.6000 L
S
U
u
  116.7600 164.1600 m
  116.7600 162.7200 L
S
U
u
  116.7600 161.4000 m
  116.7600 161.2800 L
S
U
u
  116.7600 161.2800 m
  116.8800 159.9600 L
S
U
u
  117.0000 158.5200 m
  117.0000 158.4000 L
S
U
u
  117.0000 158.4000 m
  117.2400 157.0800 L
S
U
u
  117.6000 155.6400 m
  118.2000 154.3200 L
S
U
u
  118.8000 153.0000 m
  119.5200 151.8000 L
S
U
u
  120.2400 150.6000 m
  121.2000 149.5200 L
S
U
u
  122.1600 148.4400 m
  123.2400 147.4800 L
S
U
u
  124.3200 146.5200 m
  125.5200 145.8000 L
S
U
u
  126.8400 145.0800 m
  128.1600 144.6000 L
S
U
u
  129.4800 144.0000 m
  130.9200 143.6400 L
S
U
u
  132.3600 143.4000 m
  133.8000 143.2800 L
S
U
u
  404.2800 54.4800 m
  405.7200 54.4800 L
S
U
u
  407.1600 54.4800 m
  408.6000 54.4800 L
S
U
u
  410.0400 54.4800 m
  411.4800 54.4800 L
S
U
u
  412.9200 54.4800 m
  414.3600 54.4800 L
S
U
u
  415.8000 54.4800 m
  417.2400 54.4800 L
S
U
u
  418.6800 54.4800 m
  420.1200 54.4800 L
S
U
u
  421.4400 54.4800 m
  422.8800 54.4800 L
S
U
u
  424.3200 54.4800 m
  425.7600 54.4800 L
S
U
u
  427.2000 54.4800 m
  428.6400 54.4800 L
S
U
u
  430.0800 54.4800 m
  431.5200 54.4800 L
S
U
u
  432.9600 54.4800 m
  434.4000 54.4800 L
S
U
u
  435.8400 54.4800 m
  437.2800 54.4800 L
S
U
u
  438.7200 54.4800 m
  440.1600 54.4800 L
S
U
u
  441.6000 54.4800 m
  443.0400 54.4800 L
S
U
u
  444.4800 54.6000 m
  445.9200 54.7200 L
S
U
u
  447.3600 54.9600 m
  448.8000 55.2000 L
S
U
u
  450.1200 55.8000 m
  451.4400 56.2800 L
S
U
u
  452.6400 57.0000 m
  453.8400 57.8400 L
S
U
u
  455.0400 58.6800 m
  456.1200 59.6400 L
S
U
u
  457.0800 60.7200 m
  457.9200 61.8000 L
S
U
u
  458.7600 63.0000 m
  459.4800 64.2000 L
S
U
u
  460.0800 65.5200 m
  460.6800 66.8400 L
S
U
u
  460.9200 68.2800 m
  461.2800 69.7200 L
S
U
u
  460.9200 68.2800 m
  461.2800 69.7200 L
S
U
u
  461.4000 71.1600 m
  461.5200 72.4800 L
S
U
u
  461.5200 72.4800 m
  461.5200 72.6000 L
S
U
u
  461.5200 74.0400 m
  461.5200 75.4800 L
S
U
u
  461.5200 76.9200 m
  461.5200 78.3600 L
S
U
u
  461.5200 79.8000 m
  461.5200 81.2400 L
S
U
u
  461.5200 82.6800 m
  461.5200 84.1200 L
S
U
u
  461.5200 85.5600 m
  461.5200 87.0000 L
S
U
u
  461.5200 88.4400 m
  461.5200 89.8800 L
S
U
u
  461.5200 91.3200 m
  461.5200 92.7600 L
S
U
u
  461.5200 94.2000 m
  461.5200 95.6400 L
S
U
u
  461.5200 96.9600 m
  461.5200 98.4000 L
S
U
u
  461.5200 99.8400 m
  461.5200 101.2800 L
S
U
u
  461.5200 102.7200 m
  461.5200 104.1600 L
S
U
u
  461.5200 105.6000 m
  461.5200 107.0400 L
S
U
u
  461.5200 108.4800 m
  461.5200 109.9200 L
S
U
u
  461.5200 111.3600 m
  461.5200 112.8000 L
S
U
u
  461.4000 114.2400 m
  461.2800 115.6800 L
S
U
u
  461.1600 117.1200 m
  460.8000 118.5600 L
S
U
u
  460.3200 119.8800 m
  459.7200 121.2000 L
S
U
u
  459.0000 122.4000 m
  458.2800 123.6000 L
S
U
u
  457.4400 124.6800 m
  456.4800 125.7600 L
S
U
u
  455.5200 126.8400 m
  454.4400 127.8000 L
S
U
u
  453.2400 128.5200 m
  452.0400 129.2400 L
S
U
u
  450.7200 129.8400 m
  449.4000 130.4400 L
S
U
u
  447.9600 130.8000 m
  446.5200 131.1600 L
S
U
u
  445.0800 131.2800 m
  443.6400 131.4000 L
S
U
u
  442.2000 131.4000 m
  440.7600 131.4000 L
S
U
u
  439.3200 131.4000 m
  437.8800 131.4000 L
S
U
u
  436.4400 131.4000 m
  435.0000 131.4000 L
S
U
u
  433.5600 131.4000 m
  432.1200 131.4000 L
S
U
u
  430.6800 131.4000 m
  429.2400 131.4000 L
S
U
u
  427.8000 131.4000 m
  426.3600 131.4000 L
S
U
u
  424.9200 131.4000 m
  423.4800 131.4000 L
S
U
u
  422.0400 131.4000 m
  420.6000 131.4000 L
S
U
u
  419.2800 131.4000 m
  417.8400 131.4000 L
S
U
u
  416.4000 131.4000 m
  414.9600 131.4000 L
S
U
u
  413.5200 131.4000 m
  412.0800 131.4000 L
S
U
u
  410.6400 131.4000 m
  409.2000 131.4000 L
S
U
u
  407.7600 131.4000 m
  406.3200 131.4000 L
S
U
u
  404.8800 131.4000 m
  404.2800 131.4000 L
S
U
u
  404.2800 131.4000 m
  403.4400 131.2800 L
S
U
u
  402.0000 131.1600 m
  401.5200 131.1600 L
S
U
u
  401.5200 131.1600 m
  400.5600 130.9200 L
S
U
u
  399.1200 130.6800 m
  398.7600 130.5600 L
S
U
u
  398.7600 130.5600 m
  397.8000 130.2000 L
S
U
u
  396.4800 129.6000 m
  396.1200 129.4800 L
S
U
u
  396.1200 129.4800 m
  395.1600 128.8800 L
S
U
u
  393.9600 128.1600 m
  393.7200 128.0400 L
S
U
u
  393.7200 128.0400 m
  392.8800 127.3200 L
S
U
u
  391.8000 126.3600 m
  391.5600 126.1200 L
S
U
u
  391.5600 126.1200 m
  390.8400 125.2800 L
S
U
u
  389.8800 124.2000 m
  389.7600 123.9600 L
S
U
u
  389.7600 123.9600 m
  389.1600 123.0000 L
S
U
u
  388.3200 121.8000 m
  388.2000 121.5600 L
S
U
u
  388.2000 121.5600 m
  387.7200 120.4800 L
S
U
u
  387.1200 119.1600 m
  387.1200 119.0400 L
S
U
u
  387.1200 119.0400 m
  386.8800 117.7200 L
S
U
u
  386.5200 116.2800 m
  386.4000 114.8400 L
S
U
u
  386.2800 113.4000 m
  386.2800 111.9600 L
S
U
u
  386.2800 110.5200 m
  386.2800 109.0800 L
S
U
u
  386.2800 107.6400 m
  386.2800 106.2000 L
S
U
u
  386.2800 104.7600 m
  386.2800 103.3200 L
S
U
u
  386.2800 101.8800 m
  386.2800 100.4400 L
S
U
u
  386.2800 99.0000 m
  386.2800 97.5600 L
S
U
u
  386.2800 96.2400 m
  386.2800 94.8000 L
S
U
u
  386.2800 93.3600 m
  386.2800 91.9200 L
S
U
u
  386.2800 90.4800 m
  386.2800 89.0400 L
S
U
u
  386.2800 87.6000 m
  386.2800 86.1600 L
S
U
u
  386.2800 84.7200 m
  386.2800 83.2800 L
S
U
u
  386.2800 81.8400 m
  386.2800 80.4000 L
S
U
u
  386.2800 78.9600 m
  386.2800 77.5200 L
S
U
u
  386.2800 76.0800 m
  386.2800 74.6400 L
S
U
u
  386.2800 73.2000 m
  386.2800 72.4800 L
S
U
u
  386.2800 72.4800 m
  386.4000 71.7600 L
S
U
u
  386.5200 70.3200 m
  386.5200 69.7200 L
S
U
u
  386.5200 69.7200 m
  386.6400 68.8800 L
S
U
u
  387.0000 67.4400 m
  387.1200 66.9600 L
S
U
u
  387.1200 66.9600 m
  387.4800 66.1200 L
S
U
u
  387.9600 64.8000 m
  388.2000 64.3200 L
S
U
u
  388.2000 64.3200 m
  388.6800 63.6000 L
S
U
u
  389.4000 62.4000 m
  389.7600 61.9200 L
S
U
u
  389.7600 61.9200 m
  390.2400 61.3200 L
S
U
u
  391.2000 60.2400 m
  391.5600 59.7600 L
S
U
u
  391.5600 59.7600 m
  392.1600 59.2800 L
S
U
u
  393.2400 58.3200 m
  393.7200 57.9600 L
S
U
u
  393.7200 57.9600 m
  394.4400 57.4800 L
S
U
u
  395.6400 56.7600 m
  396.1200 56.4000 L
S
U
u
  396.1200 56.4000 m
  396.8400 56.0400 L
S
U
u
  398.1600 55.5600 m
  398.7600 55.3200 L
S
U
u
  398.7600 55.3200 m
  399.4800 55.2000 L
S
U
u
  400.9200 54.8400 m
  401.5200 54.7200 L
S
U
u
  401.5200 54.7200 m
  402.3600 54.6000 L
S
U
u
  403.8000 54.4800 m
  404.2800 54.4800 L
S
U
u
  104.4000 54.4800 m
  105.8400 54.4800 L
S
U
u
  107.2800 54.4800 m
  108.7200 54.4800 L
S
U
u
  110.1600 54.4800 m
  111.6000 54.4800 L
S
U
u
  113.0400 54.4800 m
  114.4800 54.4800 L
S
U
u
  115.9200 54.4800 m
  117.3600 54.4800 L
S
U
u
  118.8000 54.4800 m
  120.2400 54.4800 L
S
U
u
  121.6800 54.4800 m
  123.1200 54.4800 L
S
U
u
  124.5600 54.4800 m
  126.0000 54.4800 L
S
U
u
  127.4400 54.4800 m
  128.8800 54.4800 L
S
U
u
  130.3200 54.4800 m
  131.7600 54.4800 L
S
U
u
  133.2000 54.4800 m
  134.6400 54.4800 L
S
U
u
  136.0800 54.4800 m
  137.5200 54.4800 L
S
U
u
  138.9600 54.4800 m
  139.8000 54.4800 L
S
U
u
  139.8000 54.4800 m
  140.4000 54.4800 L
S
U
u
  141.8400 54.6000 m
  142.6800 54.7200 L
S
U
u
  142.6800 54.7200 m
  143.2800 54.8400 L
S
U
u
  144.7200 55.2000 m
  145.4400 55.3200 L
S
U
u
  145.4400 55.3200 m
  146.0400 55.5600 L
S
U
u
  147.3600 56.1600 m
  147.9600 56.4000 L
S
U
u
  147.9600 56.4000 m
  148.6800 56.8800 L
S
U
u
  149.8800 57.6000 m
  150.3600 57.9600 L
S
U
u
  150.3600 57.9600 m
  150.9600 58.4400 L
S
U
u
  152.0400 59.4000 m
  152.5200 59.7600 L
S
U
u
  152.5200 59.7600 m
  153.1200 60.3600 L
S
U
u
  154.0800 61.4400 m
  154.4400 61.9200 L
S
U
u
  154.4400 61.9200 m
  154.9200 62.6400 L
S
U
u
  155.6400 63.8400 m
  155.8800 64.3200 L
S
U
u
  155.8800 64.3200 m
  156.2400 65.1600 L
S
U
u
  156.7200 66.4800 m
  156.9600 66.9600 L
S
U
u
  156.9600 66.9600 m
  157.2000 67.8000 L
S
U
u
  157.4400 69.2400 m
  157.5600 69.7200 L
S
U
u
  157.5600 69.7200 m
  157.6800 70.6800 L
S
U
u
  157.8000 72.1200 m
  157.8000 72.4800 L
S
U
u
  157.8000 72.4800 m
  157.8000 73.5600 L
S
U
u
  157.8000 75.0000 m
  157.8000 76.4400 L
S
U
u
  157.8000 77.8800 m
  157.8000 79.3200 L
S
U
u
  157.8000 80.7600 m
  157.8000 82.2000 L
S
U
u
  157.8000 83.6400 m
  157.8000 85.0800 L
S
U
u
  157.8000 86.5200 m
  157.8000 87.9600 L
S
U
u
  157.8000 89.4000 m
  157.8000 90.8400 L
S
U
u
  157.8000 92.2800 m
  157.8000 93.7200 L
S
U
u
  157.8000 95.1600 m
  157.8000 96.6000 L
S
U
u
  157.8000 97.9200 m
  157.8000 99.3600 L
S
U
u
  157.8000 100.8000 m
  157.8000 102.2400 L
S
U
u
  157.8000 103.6800 m
  157.8000 105.1200 L
S
U
u
  157.8000 106.5600 m
  157.8000 108.0000 L
S
U
u
  157.8000 109.4400 m
  157.8000 110.8800 L
S
U
u
  157.8000 112.3200 m
  157.8000 113.7600 L
S
U
u
  157.8000 115.2000 m
  157.8000 116.6400 L
S
U
u
  157.8000 118.0800 m
  157.8000 119.5200 L
S
U
u
  157.8000 120.9600 m
  157.8000 122.4000 L
S
U
u
  157.6800 123.8400 m
  157.5600 125.2800 L
S
U
u
  157.3200 126.7200 m
  157.0800 128.1600 L
S
U
u
  156.6000 129.4800 m
  156.0000 130.8000 L
S
U
u
  155.2800 132.1200 m
  154.5600 133.3200 L
S
U
u
  153.7200 134.4000 m
  152.7600 135.4800 L
S
U
u
  151.6800 136.4400 m
  150.6000 137.4000 L
S
U
u
  149.4000 138.1200 m
  148.2000 138.9600 L
S
U
u
  146.8800 139.5600 m
  145.5600 140.1600 L
S
U
u
  144.1200 140.4000 m
  142.6800 140.7600 L
S
U
u
  144.1200 140.4000 m
  142.6800 140.7600 L
S
U
u
  141.2400 140.8800 m
  139.8000 141.0000 L
S
U
u
  141.2400 140.8800 m
  139.8000 141.0000 L
S
U
u
  138.3600 141.0000 m
  136.9200 141.0000 L
S
U
u
  135.4800 141.0000 m
  134.0400 141.0000 L
S
U
u
  132.6000 141.0000 m
  131.1600 141.0000 L
S
U
u
  129.7200 141.0000 m
  128.2800 141.0000 L
S
U
u
  126.8400 141.0000 m
  125.4000 141.0000 L
S
U
u
  123.9600 141.0000 m
  122.5200 141.0000 L
S
U
u
  121.0800 141.0000 m
  119.6400 141.0000 L
S
U
u
  118.2000 141.0000 m
  116.7600 141.0000 L
S
U
u
  115.3200 141.0000 m
  113.8800 141.0000 L
S
U
u
  112.4400 141.0000 m
  111.0000 141.0000 L
S
U
u
  109.5600 141.0000 m
  108.1200 141.0000 L
S
U
u
  106.6800 141.0000 m
  105.2400 141.0000 L
S
U
u
  103.8000 141.0000 m
  102.3600 140.8800 L
S
U
u
  100.9200 140.6400 m
  99.4800 140.2800 L
S
U
u
  98.1600 139.8000 m
  96.9600 139.3200 L
S
U
u
  95.6400 138.6000 m
  94.4400 137.8800 L
S
U
u
  93.3600 137.0400 m
  92.2800 136.0800 L
S
U
u
  91.3200 135.1200 m
  90.3600 134.0400 L
S
U
u
  89.5200 132.8400 m
  88.8000 131.6400 L
S
U
u
  88.0800 130.4400 m
  87.6000 129.1200 L
S
U
u
  87.2400 127.8000 m
  86.8800 126.3600 L
S
U
u
  86.6400 124.9200 m
  86.5200 123.4800 L
S
U
u
  86.5200 122.0400 m
  86.5200 120.6000 L
S
U
u
  86.5200 119.1600 m
  86.5200 117.7200 L
S
U
u
  86.5200 116.2800 m
  86.5200 114.8400 L
S
U
u
  86.5200 113.4000 m
  86.5200 111.9600 L
S
U
u
  86.5200 110.5200 m
  86.5200 109.0800 L
S
U
u
  86.5200 107.6400 m
  86.5200 106.2000 L
S
U
u
  86.5200 104.7600 m
  86.5200 103.3200 L
S
U
u
  86.5200 101.8800 m
  86.5200 100.4400 L
S
U
u
  86.5200 99.0000 m
  86.5200 97.5600 L
S
U
u
  86.5200 96.2400 m
  86.5200 94.8000 L
S
U
u
  86.5200 93.3600 m
  86.5200 91.9200 L
S
U
u
  86.5200 90.4800 m
  86.5200 89.0400 L
S
U
u
  86.5200 87.6000 m
  86.5200 86.1600 L
S
U
u
  86.5200 84.7200 m
  86.5200 83.2800 L
S
U
u
  86.5200 81.8400 m
  86.5200 80.4000 L
S
U
u
  86.5200 78.9600 m
  86.5200 77.5200 L
S
U
u
  86.5200 76.0800 m
  86.5200 74.6400 L
S
U
u
  86.5200 73.2000 m
  86.5200 72.4800 L
S
U
u
  86.5200 72.4800 m
  86.6400 71.7600 L
S
U
u
  86.7600 70.3200 m
  86.7600 69.7200 L
S
U
u
  86.7600 69.7200 m
  86.8800 68.8800 L
S
U
u
  87.2400 67.4400 m
  87.3600 66.9600 L
S
U
u
  87.3600 66.9600 m
  87.7200 66.1200 L
S
U
u
  88.2000 64.8000 m
  88.4400 64.3200 L
S
U
u
  88.4400 64.3200 m
  88.9200 63.6000 L
S
U
u
  89.6400 62.4000 m
  90.0000 61.9200 L
S
U
u
  90.0000 61.9200 m
  90.4800 61.3200 L
S
U
u
  91.4400 60.2400 m
  91.8000 59.7600 L
S
U
u
  91.8000 59.7600 m
  92.4000 59.2800 L
S
U
u
  93.4800 58.3200 m
  93.9600 57.9600 L
S
U
u
  93.9600 57.9600 m
  94.6800 57.4800 L
S
U
u
  95.8800 56.7600 m
  96.3600 56.4000 L
S
U
u
  96.3600 56.4000 m
  96.9600 56.0400 L
S
U
u
  98.2800 55.5600 m
  98.8800 55.3200 L
S
U
u
  98.8800 55.3200 m
  99.6000 55.2000 L
S
U
u
  101.0400 54.8400 m
  101.5200 54.7200 L
S
U
u
  101.5200 54.7200 m
  102.4800 54.6000 L
S
U
u
  103.9200 54.4800 m
  104.4000 54.4800 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 204.2400 32.8800 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(-0.2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 313.5600 33.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 93.1200 33.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-0.6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 423.7200 33.7200 0 Tp
TP
94.370306 Tz
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  129.7200 103.4400 m
  134.7600 103.4400 L
  136.9200 107.4000 L
  138.2400 103.4400 L
  143.2800 103.4400 L
  138.9600 100.0800 L
  140.4000 95.5200 L
  136.9200 98.0400 L
  132.6000 95.5200 L
  134.0400 100.0800 L
  129.7200 103.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  143.5200 161.1600 m
  148.4400 161.1600 L
  150.6000 165.0000 L
  152.0400 161.1600 L
  156.9600 161.1600 L
  152.7600 157.8000 L
  154.2000 153.1200 L
  150.6000 155.7600 L
  146.2800 153.1200 L
  147.7200 157.8000 L
  143.5200 161.1600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  201.1200 277.5600 m
  206.0400 277.5600 L
  208.0800 281.5200 L
  209.5200 277.5600 L
  214.5600 277.5600 L
  210.2400 274.2000 L
  211.6800 269.5200 L
  208.0800 272.1600 L
  203.8800 269.5200 L
  205.3200 274.2000 L
  201.1200 277.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  326.8800 277.5600 m
  331.9200 277.5600 L
  334.0800 281.5200 L
  335.2800 277.5600 L
  340.3200 277.5600 L
  336.0000 274.2000 L
  337.4400 269.5200 L
  334.0800 272.1600 L
  329.7600 269.5200 L
  331.2000 274.2000 L
  326.8800 277.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  384.3600 161.1600 m
  389.4000 161.1600 L
  391.5600 165.0000 L
  393.0000 161.1600 L
  397.9200 161.1600 L
  393.7200 157.8000 L
  395.0400 153.1200 L
  391.5600 155.7600 L
  387.2400 153.1200 L
  388.6800 157.8000 L
  384.3600 161.1600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  398.6400 104.4000 m
  403.6800 104.4000 L
  405.8400 108.3600 L
  407.1600 104.4000 L
  412.2000 104.4000 L
  407.8800 101.0400 L
  409.3200 96.4800 L
  405.8400 99.0000 L
  401.5200 96.4800 L
  402.9600 101.0400 L
  398.6400 104.4000 L
B
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial 1558 1919 a(\(b\)) 40 b(Clustered) h(pro) t(jections) h(of)
f(graphs) g(Z) f(and) h(T) f(\(the) 1558 2011 y(formed) 21
b(clusters) g(of) h(v) n(ertex) f(corresp) r(ondence) g(are) h
(circled\).) p Fm 644 2255 a(Fig.) 15 b(3.) p Fn 25 w(Example) 25
b(2:) h(Clustering) h(of) f(v) n(ertex) f(pro) t(jections) i(of) g
(sample) e(graphs) h(Z) g(and) f(T.) p Fo 523 2569 a(sho) r(c) n(k) e
(trees,) h(and) f(second) h(-) f(information) h(retriev) -5
b(al) 23 b(with) h(sen) n(tence) g(parse) f(tree) g(analysis.) 523
2668 y(In) 31 b(the) h(\014rst) f(application) f(area,) g(sho) r(c) n
(k) h(tree) f(matc) n(hing) h(\(describ) r(ed) g(in) h(detail) f(in) g
([13,) 13 b(4,) 1089 4030 y @beginspecial 0 @llx 0 @lly
210 @urx 135 @ury 2100 @rwi @setspecial
%%BeginDocument: shapes.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\shapes.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 210 135
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 210 135
%AI3_TileBox: 0 0 210 135
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

%AI5_File:
%AI5_BeginRaster
[ 0.2436 0.0000 0.0000 -0.2426 3.7200 111.1200 ] 0 0 101 94 101 94 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1FFFFFFFFFFFFFF
%FFFFFFFFFFC03FFFFFFFFFFFFFFFFFFFFC3F800FFFFFFFFFFFFFFFFFFFF8
%0F0007FFFFFFFFFFFFFFFFFFF8020001FFFFFFFFFFFFFFFFFFF0000000FF
%FFFFFFFFFFFFFFFFE00000003FFFFFFFFFFFFFFFFFE00000001FFFFFFFFF
%FFFFFFFF800000001FFFFFFFFFFFFFFFFE000000000FFFFFFFFFFFFFFFFE
%0000000007FFFFFFFFFFFFFF800000000003FFFFFFFFFFFFFF8000000000
%03FFFFFFFFFFFFFF800000000003FFFFFFFFFFFFFF800000000003FFFFFF
%FFFFFFFF800000000003FFFFFFFFFFFFFF000000000007FFFFFFFFFFFFFF
%00000000000FFFFFFFFFFFFFFF00000000000FFFFFFFFFFFFFFE00000000
%001FFFFFFFFFFFFFFC00000000001FFFFFFFFFFFFFF800000000003FFFFF
%FFFFFFFFF800000000003FFFFFFFFFFFFFF000000000003FFFFFFFFFFFFF
%F000000000007FFFFFFFFFFFFFE000000000003FFFFFFFFFFFFFE0000000
%00003FFFFFFFFFFFFFE000000000001FFFFFFFFFFFFFC000000000000FFF
%FFFFFFFFFF8000000000000FFFFFFFFFFFFF80000000000003FFFFFFFFFF
%FF00000000000003FFFFFFFFFFFF00000000000001FFFFFFFFFFFF000000
%00000001FFFFFFFFFFFF00000000000001FFFFFFFFFFFF00000000000001
%FFFFFFFFFFFF00000000000003FFFFFFFFFFFF00000000000003FFFFFFFF
%FFFF00000000000003FFFFFFFFFFFF00000000000003FFFFFFFFFFFF0000
%0000000007FFFFFFFFFFFF00000000000007FFFFFFFFFFFF800000000000
%0FFFFFFFFFFFFF8000000000000FFFFFFFFFFFFF8000000000000FFFFFFF
%FFFFFFC000000000001FFFFFFFFFFFFFC000000000001FFFFFFFFFFFFFE0
%00000000003FFFFFFFFFFFFFE000000000003FFFFFFFFFFFFFF000000000
%003FFFFFFFFFFFFFF000000000007FFFFFFFFFFFFFF80000000000FFFFFF
%FFFFFFFFFC0000000001FFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFF
%FE0000000003FFFFFFFFFFFFFFFF0000000007FFFFFFFFFFFFFFFF800000
%000FFFFFFFFFFFFFFFFFC00000001FFFFFFFFFFFFFFFFFE00000007FFFFF
%FFFFFFFFFFFFF00000007FFFFFFFFFFFFFFFFFF8000000FFFFFFFFFFFFFF
%FFFFFE000003FFFFFFFFFFFFFFFFFFFF80001FFFFFFFFFFFFFFFFFFFFFF0
%007FFFFFFFFFFFFFFFFFFFFFFC01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
 [] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
*u
  3.7200 133.9200 m
  28.2000 133.9200 L
  28.2000 111.2400 L
  3.7200 111.2400 L
  3.7200 133.9200 L
  3.7200 133.9200 L
h W
n
  15.9600 122.5800 m
h W
n
*U
Q
%AI5_File:
%AI5_BeginRaster
[ 0.2600 0.0000 0.0000 -0.2567 3.7200 39.6000 ] 0 0 96 86 96 86 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF801FFFFFFFFFFFFFFFFFFFFC0
%01FFFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFF80000FFFFFFFFFF
%FFFFFFFFF000003FFFFFFFFFFFFFFFFFC000001FFFFFFFFFFFFFFFFFC000
%001FFFFFFFFFFFFFFFFF0000001FFFFFFFFFFFFFFFFE0000000007FFFFFF
%FFFFFFFC0000000000FFFFFFFFFFFFFC0000000000FFFFFFFFFFFFFC0000
%0000007FFFFFFFFFFFFC00000000007FFFFFFFFFFFFC00000000007FFFFF
%FFFFFFFC0000000000FFFFFFFFFFFFFE0000000001FFFFFFFFFFFFFF0000
%000003FFFFFFFFFFFFFF0000000003FFFFFFFFFFFFFFC000000001FFFFFF
%FFFFFFFFC000000001FFFFFFFFFFFFFFC000000001FFFFFFFFFFFFFFC000
%000001FFFFFFFFFFFFFFC000000000FFFFFFFFFFFFFFC0000000001FFFFF
%FFFFFFFFC0000000000FFFFFFFFFFFFFC0000000000FFFFFFFFFFFFF0000
%0000000FFFFFFFFFFFFF00000000001FFFFFFFFFFFFF00000000001FFFFF
%FFFFFFFE00000000001FFFFFFFFFFFFE00000000003FFFFFFFFFFFFE0000
%0000003FFFFFFFFFFFFC00000000007FFFFFFFFFFFFC00000000007FFFFF
%FFFFFFFC0000000000FFFFFFFFFFFFF80000000001FFFFFFFFFFFFF80000
%000001FFFFFFFFFFFFF80000000000FFFFFFFFFFFFF800000000007FFFFF
%FFFFFFF800000000007FFFFFFFFFFFF800000000007FFFFFFFFFFFF80000
%0000007FFFFFFFFFFFF800000000007FFFFFFFFFFFFC00000000007FFFFF
%FFFFFFFC0000000000FFFFFFFFFFFFFC0000000000FFFFFFFFFFFFFC0000
%000000FFFFFFFFFFFFFC0000000000FFFFFFFFFFFFFE0000000001FFFFFF
%FFFFFFFE0000000001FFFFFFFFFFFFFF0000000003FFFFFFFFFFFFFF0000
%000007FFFFFFFFFFFFFF0000000007FFFFFFFFFFFFFFC00000000FFFFFFF
%FFFFFFFFE00000001FFFFFFFFFFFFFFFF8000000FFFFFFFFFFFFFFFFFE00
%0007FFFFFFFFFFFFFFFFFE00001FFFFFFFFFFFFFFFFFFFE00FFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  3.7200 61.5600 m
  28.5600 61.5600 L
  28.5600 39.6000 L
  3.7200 39.6000 L
  3.7200 61.5600 L
  3.7200 61.5600 L
h W
n
  16.1400 50.5800 m
h W
n
*U
Q
%AI5_File:
%AI5_BeginRaster
[ 0.2837 0.0000 0.0000 -0.2800 75.6000 113.7600 ] 0 0 96 72 96 72 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFF03FFFFFFFFFFFFFFFFFFFF
%FF03FFFFFFFFFFFFFFFFFFFFFC03FFFFFFFFFFFFFFFFFFFFF803FFFFFFFF
%FFFFFFFFFFFFE007FFFFFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFF
%C01FFFFFFFFFFFFFFFFFFFFF007FFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFF
%FFFFFFFFFFFE00FFFFFFFFFFFFFFFFFFFFFC03FFFFFFFFFFFFFFFFFFFFFC
%07FFFFFFFFFFFFFFFFFFFFFC07FFFFFFFFFFFFFFFFFFFFF01FFFFFFFFFFF
%FFFFFFFFFFF01FFFFFFFFFFFFFFFFFFFFFE03FFFFFFFFFFFFFFFFFFFFFE0
%3FFFFFFFFFFFFFFFFFFFFFC03FFFFFFFFFFFFFFFFFFFFFC07FFFFFFF1FFF
%FFFFFFFFFFC0FFFFFFFC1FFFFFFFFFFFFF80FFFFFFF01FFFFFFFFFFFFF80
%FFFFFFE01FFFFFFFFFFFFF80FFFFFFE01FFFFFFFFFFFFF01FFFFFF803FFF
%FFFFFFFFFC01FFFFFC003FFFFFFFFFFFFC01FFFFF8007FFFFFFFFFFFF801
%FFFFC000FFFFFFFFFFFFF801FFFF0001FFFFFFFFFFFFF001FFF8000FFFFF
%FFFFFFFFF003FF00001FFFFFFFFFFFFFE0038000003FFFFFFFFFFFFFE000
%000003FFFFFFFFFFFFFFE000000007FFFFFFFFFFFFFFC00000003FFFFFFF
%FFFFFFFF00000003FFFFFFFFFFFFFFFC0000001FFFFFFFFFFFFFFFF80000
%03FFFFFFFFFFFFFFFFF000001FFFFFFFFFFFFFFFFFE00000FFFFFFFFFFFF
%FFFFFF80000FFFFFFFFFFFFFFFFFFF00003FFFFFFFFFFFFFFFFFFE00003F
%FFFFFFFFFFFFFFFFFC04007FFFFFFFFFFFFFFFFFF806007FFFFFFFFFFFFF
%FFFFE00C00FFFFFFFFFFFFFFFFFFC07803FFFFFFFFFFFFFFFFFF80F00FFF
%FFFFFFFFFFFFFFFF81F01FFFFFFFFFFFFFFFFFFF07E03FFFFFFFFFFFFFFF
%FFFF1F80FFFFFFFFFFFFFFFFFFFFFF81FFFFFFFFFFFFFFFFFFFFFE07FFFF
%FFFFFFFFFFFFFFFFFE0FFFFFFFFFFFFFFFFFFFFFFE1FFFFFFFFFFFFFFFFF
%FFFFFE7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  75.7200 133.9200 m
  102.8400 133.9200 L
  102.8400 113.8800 L
  75.7200 113.8800 L
  75.7200 133.9200 L
  75.7200 133.9200 L
h W
n
  89.2800 123.9000 m
h W
n
*U
Q
%AI5_File:
%AI5_BeginRaster
[ 0.2600 0.0000 0.0000 -0.2571 75.6000 42.2400 ] 0 0 96 77 96 77 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFF1FFFFFFFFFFFFFF
%FFFFFFFFE0FFFFFFFFFFFFFFFFFFFFFFE0FFFFC3FFFFFFFFFFFFFFFFE0FF
%FFC3FFFFFFFFFFFFFFFFE03FFF01FFFFFFFFFFFFFFFFE01FFF03FFFFFFFF
%FFFFFFFFE01FFE03FFFFFFFFFFFFFFFFE01FFE03FFFFFFFFFFFFFFFFE01F
%FE03FFFFFFFFFFFFFFFFE007FC03FFFFFFFFFFFFFFFFE0000003FFFFFFFF
%FFFFFFFFF0000007FFFFFFFFFFFFFFFFF0000007FFFFFFFFFFFFFFFFF800
%000FFFFFFFFFFFFFFFFFFC00000FFFFFFFFFFFFFFFFFFC00001FFFFFFFFF
%FFFFFFFFFE00001FFFFFFFFFFFFFFFFFFE00003FFFFFFFFFFFFFFFFFFC00
%003FFFFFFFFFFFFFFFFFF800000FFFFFFFFFFFFFFFFFF0000007FFFFFFFF
%FFFFFFFFE0000007FFFFFFFFFFFFFFFFC0000003FFFFFFFFFFFFFFFE0000
%0001FFFFFFFFFFFFFFFC0007F0003FFFFFFFFFFFFFF8001FFC001FFFFFFF
%FFFFFFF000FFFE000FFFFFFFFFFFFFE003FFFF0007FFFFFFFFFFFFC007FF
%FFC003FFFFFFFFFFFE001FFFFFF001FFFFFFFFFFFE003FFFFFF800FFFFFF
%FFFFFC00FFFFFFFC003FFFFFFFFFF801FFFFFFFE003FFFFFFFFFF807FFFF
%FFFE001FFFFFFFFFF00FFFFFFFFF000FFFFFFFFFE01FFFFFFFFFE00FFFFF
%FFFFC01FFFFFFFFFE007FFFFFFFFC03FFFFFFFFFF003FFFFFFFF00FFFFFF
%FFFFF803FFFFFFFF01FFFFFFFFFFF801FFFFFFFF01FFFFFFFFFFFC01FFFF
%FFFF03FFFFFFFFFFFC01FFFFFFFE03FFFFFFFFFFFE00FFFFFFFE07FFFFFF
%FFFFFF00FFFFFFFC07FFFFFFFFFFFF00FFFFFFFC0FFFFFFFFFFFFFC03FFF
%FFFC0FFFFFFFFFFFFFC03FFFFFF80FFFFFFFFFFFFFC03FFFFFF80FFFFFFF
%FFFFFFE03FFFFFF01FFFFFFFFFFFFFE03FFFFFF03FFFFFFFFFFFFFE01FFF
%FFF03FFFFFFFFFFFFFE01FFFFFF0FFFFFFFFFFFFFFF03FFFFFF0FFFFFFFF
%FFFFFFF03FFFFFFBFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  75.7200 61.9200 m
  100.5600 61.9200 L
  100.5600 42.2400 L
  75.7200 42.2400 L
  75.7200 61.9200 L
  75.7200 61.9200 L
h W
n
  88.1400 52.0800 m
h W
n
*U
Q
%AI5_File:
%AI5_BeginRaster
[ 0.2600 0.0000 0.0000 -0.2574 147.4800 114.3600 ] 0 0 96 76 96 76 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000001FFFFFFFFFF
%FFFFFFF0000001FFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFC0000
%007FFFFFFFFFFFFFFFFC0000001FFFFFFFFFFFFFFFFC00000003FFFFFFFF
%FFFFFFFC00000000FFFFFFFFFFFFFFFC00000000FFFFFFFFFFFFFFFC0000
%00003FFFFFFFFFFFFFFC000000001FFFFFFFFFFFFFFC000000001FFFFFFF
%FFFFFFFC0000000003FFFFFFFFFFFFF00000000003FFFFFFFFFFFFF00000
%000001FFFFFFFFFFFFF00000000001FFFFFFFFFFFFF00000000000FFFFFF
%FFFFFFE00000000000FFFFFFFFFFFFE000000000001FFFFFFFFFFFE00000
%0000001FFFFFFFFFFFC000000000001FFFFFFFFFFFC000000000000FFFFF
%FFFFFFC0000000000003FFFFFFFFFFC0000000000003FFFFFFFFFFC00000
%00000001FFFFFFFFFFC0000000000000FFFFFFFFFFC0000000003800FFFF
%FFFFFFC0000000007C007FFFFFFFFFC000000000FE001FFFFFFFFFC00000
%0000FE000FFFFFFFFFC000000003FF0007FFFFFFFFC000000003FFC000FF
%FFFFFFC000000003FFE000FFFFFFFFC000000000FFF000FFFFFFFF000000
%0000FFFE00FFFFFFFF0000000000FFFF00FFFFFFFE0000000000FFFFFFFF
%FFFFFC0080000000FFFFFFFFFFFFFC0180000000FFFFFFFFFFFFFC038000
%0000FFFFFFFFFFFFFC0380000000FFFFFFFFFFFFF80380000E00FFFFFFFF
%FFFFF80380200E00FFFFFFFFFFFFF80F00200E00FFFFFFFFFFFFE00F0020
%0E00FFFFFFFFFFFFE01F00600F007FFFFFFFFFFFC01F00600F007FFFFFFF
%FFFFC01F00600F007FFFFFFFFFFFC03F00600F007FFFFFFFFFFFC03F0060
%0F807FFFFFFFFFFFC03F00E00F807FFFFFFFFFFFC03F00E00F803FFFFFFF
%FFFFE0FF00E00F803FFFFFFFFFFFFFFE00E00F803FFFFFFFFFFFFFFE00E0
%0F803FFFFFFFFFFFFFFE00E00F803FFFFFFFFFFFFFFE00E00F803FFFFFFF
%FFFFFFFE00E00F803FFFFFFFFFFFFFFE00E00F803FFFFFFFFFFFFFFE00E0
%0FE03FFFFFFFFFFFFFFE00E00FE07FFFFFFFFFFFFFFE03E00FE0FFFFFFFF
%FFFFFFFF07E00FFFFFFFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFFFFFF8
%0FFFFFFFFFFFFFFFFFFFFFF81FFFFFFFFFFFFFFFFFFFFFF81FFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  147.7200 133.9200 m
  172.5600 133.9200 L
  172.5600 114.4800 L
  147.7200 114.4800 L
  147.7200 133.9200 L
  147.7200 133.9200 L
h W
n
  160.1400 124.2000 m
h W
n
*U
Q
%AI5_File:
%AI5_BeginRaster
[ 0.2613 0.0000 0.0000 -0.2585 147.3600 41.8800 ] 0 0 96 78 96 78 1 1 0 0 0 0
XI
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000
%01FFFFFFFFFFFFFFFFF0000001FFFFFFFFFFFFFFFFF0000000FFFFFFFFFF
%FFFFFFFC0000007FFFFFFFFFFFFFFFFC0000001FFFFFFFFFFFFFFFFC0000
%0003FFFFFFFFFFFFFFFE00000000FFFFFFFFFFFFFFFE00000000FFFFFFFF
%FFFFFFFE000000003FFFFFFFFFFFFFFE000000001FFFFFFFFFFFFFFC0000
%00001FFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFF00000000003FFFFFF
%FFFFFFF00000000001FFFFFFFFFFFFF00000000001FFFFFFFFFFFFF00000
%0000003FFFFFFFFFFFE000000000003FFFFFFFFFFFE000000000001FFFFF
%FFFFFFE000000000001FFFFFFFFFFFE000000000001FFFFFFFFFFFE00000
%0000000FFFFFFFFFFFE0000000000003FFFFFFFFFFE0000000000003FFFF
%FFFFFFE0000000000001FFFFFFFFFFE0000000000000FFFFFFFFFFE00000
%000038007FFFFFFFFFE0000000007C007FFFFFFFFFE000000000FE001FFF
%FFFFFFE000000000FE0007FFFFFFFFE000000003FF0007FFFFFFFFC00000
%0003FFC000FFFFFFFFC000000003FFE0007FFFFFFFC000000000FFF0007F
%FFFFFF0000000000FFFE007FFFFFFF0000000000FFFF00FFFFFFFE000000
%0000FFFFFFFFFFFFFE00E0000000FFFFFFFFFFFFFE01E0000000FFFFFFFF
%FFFFFC01E0000000FFFFFFFFFFFFFC0380000000FFFFFFFFFFFFF8038000
%0200FFFFFFFFFFFFF80380200200FFFFFFFFFFFFF80F00200200FFFFFFFF
%FFFFE00F00200200FFFFFFFFFFFFE01F002003007FFFFFFFFFFFE01F0020
%03007FFFFFFFFFFFE01F002003807FFFFFFFFFFFE01F006003807FFFFFFF
%FFFFE01F006003807FFFFFFFFFFFE01F002003807FFFFFFFFFFFE03F0020
%03007FFFFFFFFFFFE0FF80200300FFFFFFFFFFFFFFFFE0200F03FFFFFFFF
%FFFFFFFFF8200F8FFFFFFFFFFFFFFFFFFFE003FFFFFFFFFFFFFFFFFFFFE0
%03FFFFFFFFFFFFFFFFFFFFE003FFFFFFFFFFFFFFFFFFFFE003FFFFFFFFFF
%FFFFFFFFFFE003FFFFFFFFFFFFFFFFFFFFE003FFFFFFFFFFFFFFFFFFFFE0
%03FFFFFFFFFFFFFFFFFFFFE003FFFFFFFFFFFFFFFFFFFFE003FFFFFFFFFF
%FFFFFFFFFFF80FFFFFFFFFFFFFFFFFFFFFF81FFFFFFFFFFFFFFFFFFFFFFC
%1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%FFFFFFFFFFFF
%AI5_EndRaster
B
q
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  147.6000 61.9200 m
  172.5600 61.9200 L
  172.5600 41.8800 L
  147.6000 41.8800 L
  147.6000 61.9200 L
  147.6000 61.9200 L
h W
n
  160.0800 51.9000 m
h W
n
*U
Q
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
  185.6400 123.8400 m
  185.7600 124.4400 L
  186.3600 124.9200 L
  187.0800 124.9200 L
  187.5600 124.4400 L
  187.8000 123.8400 L
  187.5600 123.1200 L
  187.0800 122.7600 L
  186.3600 122.7600 L
  185.7600 123.1200 L
  185.6400 123.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  185.6400 117.0000 m
  185.7600 117.7200 L
  186.3600 118.0800 L
  187.0800 118.0800 L
  187.5600 117.7200 L
  187.8000 117.0000 L
  187.5600 116.4000 L
  187.0800 115.9200 L
  186.3600 115.9200 L
  185.7600 116.4000 L
  185.6400 117.0000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  180.0000 112.5600 m
  180.1200 113.1600 L
  180.7200 113.6400 L
  181.4400 113.6400 L
  182.0400 113.1600 L
  182.1600 112.5600 L
  182.0400 111.8400 L
  181.4400 111.4800 L
  180.7200 111.4800 L
  180.1200 111.8400 L
  180.0000 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  172.0800 112.5600 m
  172.3200 113.1600 L
  172.8000 113.6400 L
  173.5200 113.6400 L
  174.1200 113.1600 L
  174.3600 112.5600 L
  174.1200 111.8400 L
  173.5200 111.4800 L
  172.8000 111.4800 L
  172.3200 111.8400 L
  172.0800 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  192.3600 112.5600 m
  192.6000 113.1600 L
  193.0800 113.6400 L
  193.8000 113.6400 L
  194.4000 113.1600 L
  194.6400 112.5600 L
  194.4000 111.8400 L
  193.8000 111.4800 L
  193.0800 111.4800 L
  192.6000 111.8400 L
  192.3600 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  199.0800 112.5600 m
  199.3200 113.1600 L
  199.8000 113.6400 L
  200.5200 113.6400 L
  201.1200 113.1600 L
  201.3600 112.5600 L
  201.1200 111.8400 L
  200.5200 111.4800 L
  199.8000 111.4800 L
  199.3200 111.8400 L
  199.0800 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  169.8000 105.8400 m
  170.0400 106.4400 L
  170.6400 106.9200 L
  171.3600 106.9200 L
  171.8400 106.4400 L
  172.0800 105.8400 L
  171.8400 105.1200 L
  171.3600 104.7600 L
  170.6400 104.7600 L
  170.0400 105.1200 L
  169.8000 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  167.7600 99.1200 m
  167.8800 99.8400 L
  168.3600 100.2000 L
  169.0800 100.2000 L
  169.5600 99.8400 L
  169.8000 99.1200 L
  169.5600 98.5200 L
  169.0800 98.0400 L
  168.3600 98.0400 L
  167.8800 98.5200 L
  167.7600 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  177.7200 105.8400 m
  177.9600 106.4400 L
  178.4400 106.9200 L
  179.1600 106.9200 L
  179.7600 106.4400 L
  180.0000 105.8400 L
  179.7600 105.1200 L
  179.1600 104.7600 L
  178.4400 104.7600 L
  177.9600 105.1200 L
  177.7200 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  182.1600 105.8400 m
  182.4000 106.4400 L
  183.0000 106.9200 L
  183.7200 106.9200 L
  184.2000 106.4400 L
  184.4400 105.8400 L
  184.2000 105.1200 L
  183.7200 104.7600 L
  183.0000 104.7600 L
  182.4000 105.1200 L
  182.1600 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  196.8000 105.8400 m
  197.0400 106.4400 L
  197.6400 106.9200 L
  198.3600 106.9200 L
  198.8400 106.4400 L
  199.0800 105.8400 L
  198.8400 105.1200 L
  198.3600 104.7600 L
  197.6400 104.7600 L
  197.0400 105.1200 L
  196.8000 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  199.0800 99.1200 m
  199.3200 99.8400 L
  199.8000 100.2000 L
  200.5200 100.2000 L
  201.1200 99.8400 L
  201.3600 99.1200 L
  201.1200 98.5200 L
  200.5200 98.0400 L
  199.8000 98.0400 L
  199.3200 98.5200 L
  199.0800 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  203.6400 105.8400 m
  203.7600 106.4400 L
  204.3600 106.9200 L
  205.0800 106.9200 L
  205.5600 106.4400 L
  205.8000 105.8400 L
  205.5600 105.1200 L
  205.0800 104.7600 L
  204.3600 104.7600 L
  203.7600 105.1200 L
  203.6400 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  205.8000 99.1200 m
  206.0400 99.8400 L
  206.6400 100.2000 L
  207.3600 100.2000 L
  207.8400 99.8400 L
  208.0800 99.1200 L
  207.8400 98.5200 L
  207.3600 98.0400 L
  206.6400 98.0400 L
  206.0400 98.5200 L
  205.8000 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  190.0800 105.8400 m
  190.3200 106.4400 L
  190.8000 106.9200 L
  191.5200 106.9200 L
  192.1200 106.4400 L
  192.3600 105.8400 L
  192.1200 105.1200 L
  191.5200 104.7600 L
  190.8000 104.7600 L
  190.3200 105.1200 L
  190.0800 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  187.8000 99.1200 m
  188.0400 99.8400 L
  188.6400 100.2000 L
  189.3600 100.2000 L
  189.8400 99.8400 L
  190.0800 99.1200 L
  189.8400 98.5200 L
  189.3600 98.0400 L
  188.6400 98.0400 L
  188.0400 98.5200 L
  187.8000 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  194.6400 99.1200 m
  194.7600 99.8400 L
  195.3600 100.2000 L
  196.0800 100.2000 L
  196.5600 99.8400 L
  196.8000 99.1200 L
  196.5600 98.5200 L
  196.0800 98.0400 L
  195.3600 98.0400 L
  194.7600 98.5200 L
  194.6400 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  192.3600 92.4000 m
  192.6000 93.1200 L
  193.0800 93.4800 L
  193.8000 93.4800 L
  194.4000 93.1200 L
  194.6400 92.4000 L
  194.4000 91.8000 L
  193.8000 91.3200 L
  193.0800 91.3200 L
  192.6000 91.8000 L
  192.3600 92.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  201.3600 92.4000 m
  201.6000 93.1200 L
  202.0800 93.4800 L
  202.8000 93.4800 L
  203.4000 93.1200 L
  203.6400 92.4000 L
  203.4000 91.8000 L
  202.8000 91.3200 L
  202.0800 91.3200 L
  201.6000 91.8000 L
  201.3600 92.4000 L
B
U
u
1 J
  186.9600 123.0000 m
  186.9600 118.2000 L
S
U
u
  185.8800 116.5200 m
  174.0000 113.6400 L
S
U
u
  181.9200 113.4000 m
  186.1200 116.1600 L
S
U
u
  192.3600 113.4000 m
  187.0800 115.9200 L
S
U
u
  199.0800 113.4000 m
  187.5600 116.5200 L
S
U
u
  171.2400 106.6800 m
  172.9200 111.3600 L
S
U
u
  168.9600 100.5600 m
  170.6400 104.6400 L
S
U
u
  178.8000 107.1600 m
  181.0800 111.3600 L
S
U
u
  183.3600 106.9200 m
  181.3200 111.3600 L
S
U
u
  193.6800 111.3600 m
  191.1600 106.9200 L
S
U
u
  190.9200 104.6400 m
  189.2400 100.3200 L
S
U
u
  194.0400 111.7200 m
  198.0000 106.9200 L
S
U
u
  197.4000 105.0000 m
  195.7200 99.9600 L
S
U
u
  199.9200 100.3200 m
  198.3600 104.6400 L
S
U
u
  202.2000 93.8400 m
  200.7600 98.0400 L
S
U
u
  193.6800 93.4800 m
  195.1200 98.0400 L
S
U
u
  201.0000 111.3600 m
  204.0000 106.9200 L
S
U
u
  204.9600 105.0000 m
  207.0000 100.3200 L
S
U
u
  0.000 0.000 0.000 0.000 k
  37.3200 123.8400 m
  37.5600 124.4400 L
  38.0400 124.9200 L
  38.7600 124.9200 L
  39.3600 124.4400 L
  39.6000 123.8400 L
  39.3600 123.1200 L
  38.7600 122.7600 L
  38.0400 122.7600 L
  37.5600 123.1200 L
  37.3200 123.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  37.3200 117.0000 m
  37.5600 117.7200 L
  38.0400 118.0800 L
  38.7600 118.0800 L
  39.3600 117.7200 L
  39.6000 117.0000 L
  39.3600 116.4000 L
  38.7600 115.9200 L
  38.0400 115.9200 L
  37.5600 116.4000 L
  37.3200 117.0000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  37.3200 110.2800 m
  37.5600 111.0000 L
  38.0400 111.3600 L
  38.7600 111.3600 L
  39.3600 111.0000 L
  39.6000 110.2800 L
  39.3600 109.6800 L
  38.7600 109.2000 L
  38.0400 109.2000 L
  37.5600 109.6800 L
  37.3200 110.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  33.0000 110.2800 m
  33.1200 111.0000 L
  33.6000 111.3600 L
  34.3200 111.3600 L
  34.8000 111.0000 L
  35.0400 110.2800 L
  34.8000 109.6800 L
  34.3200 109.2000 L
  33.6000 109.2000 L
  33.1200 109.6800 L
  33.0000 110.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  28.4400 110.2800 m
  28.6800 111.0000 L
  29.1600 111.3600 L
  29.8800 111.3600 L
  30.4800 111.0000 L
  30.7200 110.2800 L
  30.4800 109.6800 L
  29.8800 109.2000 L
  29.1600 109.2000 L
  28.6800 109.6800 L
  28.4400 110.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  41.8800 110.2800 m
  42.0000 111.0000 L
  42.6000 111.3600 L
  43.3200 111.3600 L
  43.8000 111.0000 L
  44.0400 110.2800 L
  43.8000 109.6800 L
  43.3200 109.2000 L
  42.6000 109.2000 L
  42.0000 109.6800 L
  41.8800 110.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.6000 103.5600 m
  39.8400 104.1600 L
  40.3200 104.6400 L
  41.0400 104.6400 L
  41.6400 104.1600 L
  41.8800 103.5600 L
  41.6400 102.8400 L
  41.0400 102.4800 L
  40.3200 102.4800 L
  39.8400 102.8400 L
  39.6000 103.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  44.0400 103.5600 m
  44.2800 104.1600 L
  44.8800 104.6400 L
  45.6000 104.6400 L
  46.0800 104.1600 L
  46.3200 103.5600 L
  46.0800 102.8400 L
  45.6000 102.4800 L
  44.8800 102.4800 L
  44.2800 102.8400 L
  44.0400 103.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  41.8800 96.9600 m
  42.0000 97.5600 L
  42.6000 98.0400 L
  43.3200 98.0400 L
  43.8000 97.5600 L
  44.0400 96.9600 L
  43.8000 96.2400 L
  43.3200 95.8800 L
  42.6000 95.8800 L
  42.0000 96.2400 L
  41.8800 96.9600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  46.3200 96.9600 m
  46.5600 97.5600 L
  47.0400 98.0400 L
  47.7600 98.0400 L
  48.3600 97.5600 L
  48.6000 96.9600 L
  48.3600 96.2400 L
  47.7600 95.8800 L
  47.0400 95.8800 L
  46.5600 96.2400 L
  46.3200 96.9600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  44.0400 90.1200 m
  44.2800 90.8400 L
  44.8800 91.2000 L
  45.6000 91.2000 L
  46.0800 90.8400 L
  46.3200 90.1200 L
  46.0800 89.5200 L
  45.6000 89.0400 L
  44.8800 89.0400 L
  44.2800 89.5200 L
  44.0400 90.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  48.6000 90.1200 m
  48.8400 90.8400 L
  49.3200 91.2000 L
  50.0400 91.2000 L
  50.6400 90.8400 L
  50.8800 90.1200 L
  50.6400 89.5200 L
  50.0400 89.0400 L
  49.3200 89.0400 L
  48.8400 89.5200 L
  48.6000 90.1200 L
B
U
u
  38.4000 122.6400 m
  38.4000 117.8400 L
S
U
u
  38.1600 115.9200 m
  29.8800 111.3600 L
S
U
u
  33.9600 111.3600 m
  38.7600 115.9200 L
S
U
u
  38.4000 111.3600 m
  38.7600 115.9200 L
S
U
u
  42.9600 111.3600 m
  38.4000 115.9200 L
S
U
u
  42.7200 109.4400 m
  40.6800 104.6400 L
S
U
u
  44.8800 104.6400 m
  42.9600 109.4400 L
S
U
u
  42.9600 98.0400 m
  45.2400 102.7200 L
S
U
u
  47.1600 98.0400 m
  45.2400 102.9600 L
S
U
u
  45.4800 91.5600 m
  47.1600 95.7600 L
S
U
u
  49.4400 91.3200 m
  47.4000 95.7600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  113.7600 123.8400 m
  113.8800 124.4400 L
  114.4800 124.9200 L
  115.2000 124.9200 L
  115.6800 124.4400 L
  115.9200 123.8400 L
  115.6800 123.1200 L
  115.2000 122.7600 L
  114.4800 122.7600 L
  113.8800 123.1200 L
  113.7600 123.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  113.7600 117.0000 m
  113.8800 117.7200 L
  114.4800 118.0800 L
  115.2000 118.0800 L
  115.6800 117.7200 L
  115.9200 117.0000 L
  115.6800 116.4000 L
  115.2000 115.9200 L
  114.4800 115.9200 L
  113.8800 116.4000 L
  113.7600 117.0000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  109.2000 112.5600 m
  109.4400 113.1600 L
  109.9200 113.6400 L
  110.6400 113.6400 L
  111.2400 113.1600 L
  111.4800 112.5600 L
  111.2400 111.8400 L
  110.6400 111.4800 L
  109.9200 111.4800 L
  109.4400 111.8400 L
  109.2000 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  102.4800 112.5600 m
  102.7200 113.1600 L
  103.2000 113.6400 L
  103.9200 113.6400 L
  104.5200 113.1600 L
  104.7600 112.5600 L
  104.5200 111.8400 L
  103.9200 111.4800 L
  103.2000 111.4800 L
  102.7200 111.8400 L
  102.4800 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  118.2000 112.5600 m
  118.4400 113.1600 L
  118.9200 113.6400 L
  119.6400 113.6400 L
  120.2400 113.1600 L
  120.4800 112.5600 L
  120.2400 111.8400 L
  119.6400 111.4800 L
  118.9200 111.4800 L
  118.4400 111.8400 L
  118.2000 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  124.9200 112.5600 m
  125.1600 113.1600 L
  125.7600 113.6400 L
  126.4800 113.6400 L
  126.9600 113.1600 L
  127.2000 112.5600 L
  126.9600 111.8400 L
  126.4800 111.4800 L
  125.7600 111.4800 L
  125.1600 111.8400 L
  124.9200 112.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  100.3200 105.8400 m
  100.5600 106.4400 L
  100.9200 106.9200 L
  101.6400 106.9200 L
  102.2400 106.4400 L
  102.4800 105.8400 L
  102.2400 105.1200 L
  101.6400 104.7600 L
  100.9200 104.7600 L
  100.5600 105.1200 L
  100.3200 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  98.0400 99.1200 m
  98.2800 99.8400 L
  98.8800 100.2000 L
  99.6000 100.2000 L
  100.0800 99.8400 L
  100.3200 99.1200 L
  100.0800 98.5200 L
  99.6000 98.0400 L
  98.8800 98.0400 L
  98.2800 98.5200 L
  98.0400 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  106.9200 105.8400 m
  107.1600 106.4400 L
  107.7600 106.9200 L
  108.4800 106.9200 L
  108.9600 106.4400 L
  109.2000 105.8400 L
  108.9600 105.1200 L
  108.4800 104.7600 L
  107.7600 104.7600 L
  107.1600 105.1200 L
  106.9200 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  104.7600 99.1200 m
  104.8800 99.8400 L
  105.4800 100.2000 L
  106.2000 100.2000 L
  106.6800 99.8400 L
  106.9200 99.1200 L
  106.6800 98.5200 L
  106.2000 98.0400 L
  105.4800 98.0400 L
  104.8800 98.5200 L
  104.7600 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  120.4800 105.8400 m
  120.7200 106.4400 L
  121.2000 106.9200 L
  121.9200 106.9200 L
  122.5200 106.4400 L
  122.7600 105.8400 L
  122.5200 105.1200 L
  121.9200 104.7600 L
  121.2000 104.7600 L
  120.7200 105.1200 L
  120.4800 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  122.7600 99.1200 m
  122.8800 99.8400 L
  123.4800 100.2000 L
  124.2000 100.2000 L
  124.6800 99.8400 L
  124.9200 99.1200 L
  124.6800 98.5200 L
  124.2000 98.0400 L
  123.4800 98.0400 L
  122.8800 98.5200 L
  122.7600 99.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  127.2000 105.8400 m
  127.4400 106.4400 L
  127.9200 106.9200 L
  128.6400 106.9200 L
  129.2400 106.4400 L
  129.4800 105.8400 L
  129.2400 105.1200 L
  128.6400 104.7600 L
  127.9200 104.7600 L
  127.4400 105.1200 L
  127.2000 105.8400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  129.4800 99.1200 m
  129.7200 99.8400 L
  130.2000 100.2000 L
  130.9200 100.2000 L
  131.5200 99.8400 L
  131.7600 99.1200 L
  131.5200 98.5200 L
  130.9200 98.0400 L
  130.2000 98.0400 L
  129.7200 98.5200 L
  129.4800 99.1200 L
B
U
u
  114.8400 122.6400 m
  114.8400 118.2000 L
S
U
u
  110.6400 114.0000 m
  114.8400 115.9200 L
S
U
u
  103.5600 113.6400 m
  115.0800 115.6800 L
S
U
u
  119.2800 113.6400 m
  115.0800 115.4400 L
S
U
u
  125.7600 113.6400 m
  115.0800 115.6800 L
S
U
u
  108.3600 106.9200 m
  110.2800 111.7200 L
S
U
u
  101.2800 106.6800 m
  103.5600 111.3600 L
S
U
u
  99.2400 100.5600 m
  101.0400 104.6400 L
S
U
u
  106.0800 100.5600 m
  107.7600 104.6400 L
S
U
u
  123.2400 100.5600 m
  121.8000 104.6400 L
S
U
u
  120.9600 107.1600 m
  119.6400 111.3600 L
S
U
u
  128.2800 107.1600 m
  126.4800 111.7200 L
S
U
u
  130.3200 100.6800 m
  128.6400 104.6400 L
S
U
u
  0.000 0.000 0.000 0.000 k
  39.6000 49.6800 m
  39.8400 50.2800 L
  40.3200 50.7600 L
  41.0400 50.7600 L
  41.6400 50.2800 L
  41.8800 49.6800 L
  41.6400 48.9600 L
  41.0400 48.6000 L
  40.3200 48.6000 L
  39.8400 48.9600 L
  39.6000 49.6800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  39.6000 42.9600 m
  39.8400 43.5600 L
  40.3200 44.0400 L
  41.0400 44.0400 L
  41.6400 43.5600 L
  41.8800 42.9600 L
  41.6400 42.2400 L
  41.0400 41.8800 L
  40.3200 41.8800 L
  39.8400 42.2400 L
  39.6000 42.9600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  33.0000 36.1200 m
  33.1200 36.8400 L
  33.6000 37.2000 L
  34.3200 37.2000 L
  34.8000 36.8400 L
  35.0400 36.1200 L
  34.8000 35.5200 L
  34.3200 35.0400 L
  33.6000 35.0400 L
  33.1200 35.5200 L
  33.0000 36.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  26.1600 36.1200 m
  26.4000 36.8400 L
  27.0000 37.2000 L
  27.7200 37.2000 L
  28.2000 36.8400 L
  28.4400 36.1200 L
  28.2000 35.5200 L
  27.7200 35.0400 L
  27.0000 35.0400 L
  26.4000 35.5200 L
  26.1600 36.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  46.3200 36.1200 m
  46.5600 36.8400 L
  47.0400 37.2000 L
  47.7600 37.2000 L
  48.3600 36.8400 L
  48.6000 36.1200 L
  48.3600 35.5200 L
  47.7600 35.0400 L
  47.0400 35.0400 L
  46.5600 35.5200 L
  46.3200 36.1200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  30.7200 29.5200 m
  30.9600 30.2400 L
  31.4400 30.6000 L
  32.1600 30.6000 L
  32.7600 30.2400 L
  33.0000 29.5200 L
  32.7600 28.9200 L
  32.1600 28.4400 L
  31.4400 28.4400 L
  30.9600 28.9200 L
  30.7200 29.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  35.0400 29.5200 m
  35.2800 30.2400 L
  35.8800 30.6000 L
  36.6000 30.6000 L
  37.0800 30.2400 L
  37.3200 29.5200 L
  37.0800 28.9200 L
  36.6000 28.4400 L
  35.8800 28.4400 L
  35.2800 28.9200 L
  35.0400 29.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  44.0400 29.5200 m
  44.2800 30.2400 L
  44.8800 30.6000 L
  45.6000 30.6000 L
  46.0800 30.2400 L
  46.3200 29.5200 L
  46.0800 28.9200 L
  45.6000 28.4400 L
  44.8800 28.4400 L
  44.2800 28.9200 L
  44.0400 29.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  48.6000 29.5200 m
  48.8400 30.2400 L
  49.3200 30.6000 L
  50.0400 30.6000 L
  50.6400 30.2400 L
  50.8800 29.5200 L
  50.6400 28.9200 L
  50.0400 28.4400 L
  49.3200 28.4400 L
  48.8400 28.9200 L
  48.6000 29.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  46.3200 22.8000 m
  46.5600 23.4000 L
  47.0400 23.8800 L
  47.7600 23.8800 L
  48.3600 23.4000 L
  48.6000 22.8000 L
  48.3600 22.0800 L
  47.7600 21.7200 L
  47.0400 21.7200 L
  46.5600 22.0800 L
  46.3200 22.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  50.8800 22.8000 m
  51.0000 23.4000 L
  51.6000 23.8800 L
  52.3200 23.8800 L
  52.8000 23.4000 L
  53.0400 22.8000 L
  52.8000 22.0800 L
  52.3200 21.7200 L
  51.6000 21.7200 L
  51.0000 22.0800 L
  50.8800 22.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  53.0400 36.1200 m
  53.2800 36.8400 L
  53.8800 37.2000 L
  54.6000 37.2000 L
  55.0800 36.8400 L
  55.3200 36.1200 L
  55.0800 35.5200 L
  54.6000 35.0400 L
  53.8800 35.0400 L
  53.2800 35.5200 L
  53.0400 36.1200 L
B
U
u
  40.6800 48.4800 m
  40.6800 44.0400 L
S
U
u
  40.6800 41.5200 m
  33.9600 36.9600 L
S
U
u
  27.3600 37.3200 m
  40.4400 41.4000 L
S
U
u
  47.4000 37.3200 m
  40.4400 41.4000 L
S
U
u
  54.2400 37.3200 m
  40.0800 41.4000 L
S
U
u
  31.8000 30.6000 m
  33.9600 35.0400 L
S
U
u
  36.2400 30.9600 m
  33.9600 35.0400 L
S
U
u
  45.2400 30.9600 m
  47.4000 35.2800 L
S
U
u
  49.4400 30.6000 m
  47.4000 35.0400 L
S
U
u
  47.7600 24.2400 m
  49.6800 28.6800 L
S
U
u
  51.9600 23.8800 m
  49.6800 29.1600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  111.4800 49.6800 m
  111.7200 50.2800 L
  112.2000 50.7600 L
  112.9200 50.7600 L
  113.5200 50.2800 L
  113.7600 49.6800 L
  113.5200 48.9600 L
  112.9200 48.6000 L
  112.2000 48.6000 L
  111.7200 48.9600 L
  111.4800 49.6800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  111.4800 42.9600 m
  111.7200 43.5600 L
  112.2000 44.0400 L
  112.9200 44.0400 L
  113.5200 43.5600 L
  113.7600 42.9600 L
  113.5200 42.2400 L
  112.9200 41.8800 L
  112.2000 41.8800 L
  111.7200 42.2400 L
  111.4800 42.9600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  106.9200 38.4000 m
  107.1600 39.1200 L
  107.7600 39.4800 L
  108.4800 39.4800 L
  108.9600 39.1200 L
  109.2000 38.4000 L
  108.9600 37.8000 L
  108.4800 37.3200 L
  107.7600 37.3200 L
  107.1600 37.8000 L
  106.9200 38.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  100.3200 38.4000 m
  100.5600 39.1200 L
  100.9200 39.4800 L
  101.6400 39.4800 L
  102.2400 39.1200 L
  102.4800 38.4000 L
  102.2400 37.8000 L
  101.6400 37.3200 L
  100.9200 37.3200 L
  100.5600 37.8000 L
  100.3200 38.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  115.9200 38.4000 m
  116.1600 39.1200 L
  116.7600 39.4800 L
  117.4800 39.4800 L
  117.9600 39.1200 L
  118.2000 38.4000 L
  117.9600 37.8000 L
  117.4800 37.3200 L
  116.7600 37.3200 L
  116.1600 37.8000 L
  115.9200 38.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  98.0400 31.8000 m
  98.2800 32.4000 L
  98.8800 32.8800 L
  99.6000 32.8800 L
  100.0800 32.4000 L
  100.3200 31.8000 L
  100.0800 31.0800 L
  99.6000 30.7200 L
  98.8800 30.7200 L
  98.2800 31.0800 L
  98.0400 31.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  95.8800 25.0800 m
  96.0000 25.6800 L
  96.6000 26.1600 L
  97.3200 26.1600 L
  97.8000 25.6800 L
  98.0400 25.0800 L
  97.8000 24.3600 L
  97.3200 24.0000 L
  96.6000 24.0000 L
  96.0000 24.3600 L
  95.8800 25.0800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  104.7600 31.8000 m
  104.8800 32.4000 L
  105.4800 32.8800 L
  106.2000 32.8800 L
  106.6800 32.4000 L
  106.9200 31.8000 L
  106.6800 31.0800 L
  106.2000 30.7200 L
  105.4800 30.7200 L
  104.8800 31.0800 L
  104.7600 31.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  102.4800 25.0800 m
  102.7200 25.6800 L
  103.2000 26.1600 L
  103.9200 26.1600 L
  104.5200 25.6800 L
  104.7600 25.0800 L
  104.5200 24.3600 L
  103.9200 24.0000 L
  103.2000 24.0000 L
  102.7200 24.3600 L
  102.4800 25.0800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  118.2000 31.8000 m
  118.4400 32.4000 L
  118.9200 32.8800 L
  119.6400 32.8800 L
  120.2400 32.4000 L
  120.4800 31.8000 L
  120.2400 31.0800 L
  119.6400 30.7200 L
  118.9200 30.7200 L
  118.4400 31.0800 L
  118.2000 31.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  118.2000 25.0800 m
  118.4400 25.6800 L
  118.9200 26.1600 L
  119.6400 26.1600 L
  120.2400 25.6800 L
  120.4800 25.0800 L
  120.2400 24.3600 L
  119.6400 24.0000 L
  118.9200 24.0000 L
  118.4400 24.3600 L
  118.2000 25.0800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  122.7600 25.0800 m
  122.8800 25.6800 L
  123.4800 26.1600 L
  124.2000 26.1600 L
  124.6800 25.6800 L
  124.9200 25.0800 L
  124.6800 24.3600 L
  124.2000 24.0000 L
  123.4800 24.0000 L
  122.8800 24.3600 L
  122.7600 25.0800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  122.7600 38.4000 m
  122.8800 39.1200 L
  123.4800 39.4800 L
  124.2000 39.4800 L
  124.6800 39.1200 L
  124.9200 38.4000 L
  124.6800 37.8000 L
  124.2000 37.3200 L
  123.4800 37.3200 L
  122.8800 37.8000 L
  122.7600 38.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  124.9200 31.8000 m
  125.1600 32.4000 L
  125.7600 32.8800 L
  126.4800 32.8800 L
  126.9600 32.4000 L
  127.2000 31.8000 L
  126.9600 31.0800 L
  126.4800 30.7200 L
  125.7600 30.7200 L
  125.1600 31.0800 L
  124.9200 31.8000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  118.2000 47.4000 m
  118.4400 48.1200 L
  118.9200 48.4800 L
  119.6400 48.4800 L
  120.2400 48.1200 L
  120.4800 47.4000 L
  120.2400 46.8000 L
  119.6400 46.3200 L
  118.9200 46.3200 L
  118.4400 46.8000 L
  118.2000 47.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  124.9200 45.1200 m
  125.1600 45.8400 L
  125.7600 46.2000 L
  126.4800 46.2000 L
  126.9600 45.8400 L
  127.2000 45.1200 L
  126.9600 44.5200 L
  126.4800 44.0400 L
  125.7600 44.0400 L
  125.1600 44.5200 L
  124.9200 45.1200 L
B
U
u
  113.7600 49.0800 m
  118.2000 47.6400 L
S
U
u
  120.4800 47.0400 m
  125.4000 45.4800 L
S
U
u
  112.5600 48.2400 m
  112.5600 44.0400 L
S
U
u
  111.1200 42.4800 m
  101.8800 39.2400 L
S
U
u
  108.9600 39.2400 m
  111.8400 42.1200 L
S
U
u
  101.0400 37.3200 m
  99.6000 32.8800 L
S
U
u
  98.6400 30.6000 m
  97.3200 26.4000 L
S
U
u
  107.7600 37.3200 m
  106.4400 33.2400 L
S
U
u
  105.2400 30.6000 m
  103.5600 25.9200 L
S
U
u
  113.7600 42.1200 m
  116.4000 39.2400 L
S
U
u
  117.3600 36.9600 m
  119.2800 32.8800 L
S
U
u
  119.6400 30.9600 m
  119.6400 25.9200 L
S
U
u
  123.2400 26.4000 m
  120.1200 31.2000 L
S
U
u
  113.7600 42.9600 m
  122.7600 39.0000 L
S
U
u
  124.2000 36.9600 m
  125.5200 32.8800 L
S
U
u
  0.000 0.000 0.000 0.000 k
  185.6400 50.1600 m
  185.7600 50.7600 L
  186.3600 51.2400 L
  187.0800 51.2400 L
  187.5600 50.7600 L
  187.8000 50.1600 L
  187.5600 49.4400 L
  187.0800 49.0800 L
  186.3600 49.0800 L
  185.7600 49.4400 L
  185.6400 50.1600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  180.0000 38.8800 m
  180.1200 39.4800 L
  180.7200 39.9600 L
  181.4400 39.9600 L
  182.0400 39.4800 L
  182.1600 38.8800 L
  182.0400 38.1600 L
  181.4400 37.8000 L
  180.7200 37.8000 L
  180.1200 38.1600 L
  180.0000 38.8800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  172.0800 38.8800 m
  172.3200 39.4800 L
  172.8000 39.9600 L
  173.5200 39.9600 L
  174.1200 39.4800 L
  174.3600 38.8800 L
  174.1200 38.1600 L
  173.5200 37.8000 L
  172.8000 37.8000 L
  172.3200 38.1600 L
  172.0800 38.8800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  192.3600 38.8800 m
  192.6000 39.4800 L
  193.0800 39.9600 L
  193.8000 39.9600 L
  194.4000 39.4800 L
  194.6400 38.8800 L
  194.4000 38.1600 L
  193.8000 37.8000 L
  193.0800 37.8000 L
  192.6000 38.1600 L
  192.3600 38.8800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  169.8000 32.2800 m
  170.0400 32.8800 L
  170.6400 33.3600 L
  171.3600 33.3600 L
  171.8400 32.8800 L
  172.0800 32.2800 L
  171.8400 31.5600 L
  171.3600 31.2000 L
  170.6400 31.2000 L
  170.0400 31.5600 L
  169.8000 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  167.7600 25.4400 m
  167.8800 26.1600 L
  168.3600 26.5200 L
  169.0800 26.5200 L
  169.5600 26.1600 L
  169.8000 25.4400 L
  169.5600 24.8400 L
  169.0800 24.3600 L
  168.3600 24.3600 L
  167.8800 24.8400 L
  167.7600 25.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  177.7200 32.2800 m
  177.9600 32.8800 L
  178.4400 33.3600 L
  179.1600 33.3600 L
  179.7600 32.8800 L
  180.0000 32.2800 L
  179.7600 31.5600 L
  179.1600 31.2000 L
  178.4400 31.2000 L
  177.9600 31.5600 L
  177.7200 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  182.1600 32.2800 m
  182.4000 32.8800 L
  183.0000 33.3600 L
  183.7200 33.3600 L
  184.2000 32.8800 L
  184.4400 32.2800 L
  184.2000 31.5600 L
  183.7200 31.2000 L
  183.0000 31.2000 L
  182.4000 31.5600 L
  182.1600 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  196.8000 32.2800 m
  197.0400 32.8800 L
  197.6400 33.3600 L
  198.3600 33.3600 L
  198.8400 32.8800 L
  199.0800 32.2800 L
  198.8400 31.5600 L
  198.3600 31.2000 L
  197.6400 31.2000 L
  197.0400 31.5600 L
  196.8000 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  199.0800 25.4400 m
  199.3200 26.1600 L
  199.8000 26.5200 L
  200.5200 26.5200 L
  201.1200 26.1600 L
  201.3600 25.4400 L
  201.1200 24.8400 L
  200.5200 24.3600 L
  199.8000 24.3600 L
  199.3200 24.8400 L
  199.0800 25.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  203.6400 32.2800 m
  203.7600 32.8800 L
  204.3600 33.3600 L
  205.0800 33.3600 L
  205.5600 32.8800 L
  205.8000 32.2800 L
  205.5600 31.5600 L
  205.0800 31.2000 L
  204.3600 31.2000 L
  203.7600 31.5600 L
  203.6400 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  205.8000 25.4400 m
  206.0400 26.1600 L
  206.6400 26.5200 L
  207.3600 26.5200 L
  207.8400 26.1600 L
  208.0800 25.4400 L
  207.8400 24.8400 L
  207.3600 24.3600 L
  206.6400 24.3600 L
  206.0400 24.8400 L
  205.8000 25.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  190.0800 32.2800 m
  190.3200 32.8800 L
  190.8000 33.3600 L
  191.5200 33.3600 L
  192.1200 32.8800 L
  192.3600 32.2800 L
  192.1200 31.5600 L
  191.5200 31.2000 L
  190.8000 31.2000 L
  190.3200 31.5600 L
  190.0800 32.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  187.8000 25.4400 m
  188.0400 26.1600 L
  188.6400 26.5200 L
  189.3600 26.5200 L
  189.8400 26.1600 L
  190.0800 25.4400 L
  189.8400 24.8400 L
  189.3600 24.3600 L
  188.6400 24.3600 L
  188.0400 24.8400 L
  187.8000 25.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  194.6400 25.4400 m
  194.7600 26.1600 L
  195.3600 26.5200 L
  196.0800 26.5200 L
  196.5600 26.1600 L
  196.8000 25.4400 L
  196.5600 24.8400 L
  196.0800 24.3600 L
  195.3600 24.3600 L
  194.7600 24.8400 L
  194.6400 25.4400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  189.0000 11.5200 m
  189.1200 12.2400 L
  189.7200 12.6000 L
  190.4400 12.6000 L
  191.0400 12.2400 L
  191.1600 11.5200 L
  191.0400 10.9200 L
  190.4400 10.4400 L
  189.7200 10.4400 L
  189.1200 10.9200 L
  189.0000 11.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  201.3600 18.7200 m
  201.6000 19.4400 L
  202.0800 19.8000 L
  202.8000 19.8000 L
  203.4000 19.4400 L
  203.6400 18.7200 L
  203.4000 18.1200 L
  202.8000 17.6400 L
  202.0800 17.6400 L
  201.6000 18.1200 L
  201.3600 18.7200 L
B
U
u
  186.9600 49.3200 m
  186.9600 44.5200 L
S
U
u
  185.8800 42.8400 m
  174.0000 39.9600 L
S
U
u
  181.9200 39.7200 m
  186.1200 42.4800 L
S
U
u
  192.3600 39.7200 m
  187.0800 42.2400 L
S
U
u
  199.0800 39.7200 m
  187.5600 42.8400 L
S
U
u
  171.2400 33.1200 m
  172.9200 37.6800 L
S
U
u
  168.9600 26.8800 m
  170.6400 31.0800 L
S
U
u
  178.8000 33.6000 m
  181.0800 37.6800 L
S
U
u
  183.3600 33.3600 m
  181.3200 37.6800 L
S
U
u
  193.6800 37.6800 m
  191.1600 33.3600 L
S
U
u
  190.9200 31.0800 m
  189.2400 26.6400 L
S
U
u
  194.0400 38.0400 m
  198.0000 33.3600 L
S
U
u
  197.4000 31.4400 m
  195.7200 26.2800 L
S
U
u
  199.9200 26.6400 m
  198.3600 31.0800 L
S
U
u
  202.2000 20.1600 m
  200.7600 24.3600 L
S
U
u
  193.6800 19.8000 m
  195.1200 24.3600 L
S
U
u
  201.0000 37.6800 m
  204.0000 33.3600 L
S
U
u
  204.9600 31.4400 m
  207.0000 26.6400 L
S
U
u
  0.000 0.000 0.000 0.000 k
  185.6400 43.3200 m
  185.7600 44.0400 L
  186.3600 44.4000 L
  187.0800 44.4000 L
  187.5600 44.0400 L
  187.8000 43.3200 L
  187.5600 42.7200 L
  187.0800 42.2400 L
  186.3600 42.2400 L
  185.7600 42.7200 L
  185.6400 43.3200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  199.0800 38.8800 m
  199.3200 39.4800 L
  199.8000 39.9600 L
  200.5200 39.9600 L
  201.1200 39.4800 L
  201.3600 38.8800 L
  201.1200 38.1600 L
  200.5200 37.8000 L
  199.8000 37.8000 L
  199.3200 38.1600 L
  199.0800 38.8800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  192.3600 18.2400 m
  192.6000 18.9600 L
  193.0800 19.3200 L
  193.8000 19.3200 L
  194.4000 18.9600 L
  194.6400 18.2400 L
  194.4000 17.6400 L
  193.8000 17.1600 L
  193.0800 17.1600 L
  192.6000 17.6400 L
  192.3600 18.2400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  199.0800 11.5200 m
  199.3200 12.2400 L
  199.8000 12.6000 L
  200.5200 12.6000 L
  201.1200 12.2400 L
  201.3600 11.5200 L
  201.1200 10.9200 L
  200.5200 10.4400 L
  199.8000 10.4400 L
  199.3200 10.9200 L
  199.0800 11.5200 L
B
U
u
  0.000 0.000 0.000 0.000 k
  204.7200 11.5200 m
  204.9600 12.2400 L
  205.4400 12.6000 L
  206.1600 12.6000 L
  206.7600 12.2400 L
  207.0000 11.5200 L
  206.7600 10.9200 L
  206.1600 10.4400 L
  205.4400 10.4400 L
  204.9600 10.9200 L
  204.7200 11.5200 L
B
U
u
  203.0400 17.8800 m
  205.0800 12.2400 L
S
U
u
  200.5200 12.6000 m
  201.8400 17.7600 L
S
U
u
  190.6800 12.6000 m
  192.7200 17.4000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 8.7600 77.0400 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(Head-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 8.7600 5.1600 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Head-2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 154.6800 77.0400 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Hand-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 152.5200 5.1600 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Hand-2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 82.3200 77.0400 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Pliers-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 82.3200 5.1600 0 Tp
TP
94.702532 Tz
/_Helvetica 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Pliers-2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial Fm 682 4204 a(Fig.) i(4.) p Fn 25 w(The) 26
b(subset) g(of) g(shap) r(es) g(and) g(their) f(sho) r(c) n(k) h(graph)
g(represen) n(tations,) g(from) g([8]) p Fo 523 4518
a(12]\),) c(a) g(small) h(set) f(of) h(shap) r(es) f(do) r(cumen) n
(ted) h(in) g([8]) f(w) n(as) g(used.) g(The) h(graphical) e(represen) n
(ta-) 523 4617 y(tion) k(of) g(the) h(dataset) e(and) h(the) h
(similarit) n(y) e(matrix) h(for) f(the) i(tested) f(shap) r(es,) g(as)
g(calculated) 523 4717 y(according) g(to) i(the) g(ab) r(o) n(v) n(e) f
(men) n(tioned) h(cluster) f(v) -5 b(alidit) n(y) 27
b(index) g(for) f(measuring) g(the) h(simi-) 523 4816
y(larit) n(y) 21 b(among) h(the) h(clustered) f(eigen) n(v) n(ector) e
(subspace) i(pro) 5 b(jections,) 21 b(are) g(sho) n(wn) h(in) h(Figure)
523 4916 y(4) j(and) g(T) -7 b(able) 26 b(1) g(resp) r(ectiv) n(ely) f
(\(where) h(the) h(b) r(est) g(matc) n(hing) f(shap) r(e) g(similarit) n
(y) f(v) -5 b(alues) 26 b(are) 523 5016 y(in) i(b) r(old) g(fon) n
(t\).) p 90 rotate dyy eop
%%Page: 8 8
8 7 bop Fm 542 509 a(T) -7 b(able) 29 b(1.) p Fn 25 w(The) d(similarit)
n(y) g(matrix) f(obtained) g(for) i(the) e(subset) h(of) g(shap) r(es) g
(sho) n(wn) g(in) g(Figure) g(4.) p 881 618 2167 4 v
879 709 4 92 v 1197 709 V Fm 1211 682 a(Head-1) p 1496
709 V 23 w(Head-2) p 1794 709 V 24 w(Pliers-1) p 2111
709 V 25 w(Pliers-2) p 2429 709 V 26 w(Hand-1) p 2738
709 V 24 w(Hand-2) p 3045 709 V 881 712 2167 4 v 879
804 4 92 v 893 776 a(Head-1) p 1197 804 V 1496 804 V
341 w(0.5536) p 1795 804 V Fn 54 w(0) p Fb(:) p Fn(1936) p
2113 804 V 107 w(0) p Fb(:) p Fn(4392) p 2431 804 V 108
w(0) p Fb(:) p Fn(2000) p 2739 804 V 96 w(0) p Fb(:) p
Fn(1280) p 3046 804 V 881 807 2167 4 v 879 898 4 92 v
Fm 893 871 a(Head-2) p 1197 898 V 43 w(0.5536) p 1496
898 V 1795 898 V Fn 352 w(0) p Fb(:) p Fn(2373) p 2113
898 V 107 w(0) p Fb(:) p Fn(3978) p 2431 898 V 108 w(0) p
Fb(:) p Fn(3133) p 2739 898 V 96 w(0) p Fb(:) p Fn(1270) p
3046 898 V 881 902 2167 4 v 879 993 4 92 v Fm 893 966
a(Pliers-1) p 1196 993 V Fn 25 w(0) p Fb(:) p Fn(1936) p
1496 993 V 87 w(0) p Fb(:) p Fn(2373) p 1795 993 V 2113
993 V Fm 406 w(0.4857) p 2431 993 V Fn 74 w(0) p Fb(:) p
Fn(2087) p 2739 993 V 96 w(0) p Fb(:) p Fn(2006) p 3046
993 V 881 996 2167 4 v 879 1088 4 92 v Fm 893 1060 a(Pliers-2) p
1196 1088 V Fn 25 w(0) p Fb(:) p Fn(4392) p 1496 1088
V 87 w(0) p Fb(:) p Fn(3978) p 1795 1088 V Fm 88 w(0.4857) p
2113 1088 V 2431 1088 V Fn 392 w(0) p Fb(:) p Fn(2126) p
2739 1088 V 96 w(0) p Fb(:) p Fn(1612) p 3046 1088 V
881 1091 2167 4 v 879 1182 4 92 v Fm 893 1155 a(Hand-1) p
1197 1182 V Fn 35 w(0) p Fb(:) p Fn(2000) p 1496 1182
V 87 w(0) p Fb(:) p Fn(3133) p 1795 1182 V 88 w(0) p
Fb(:) p Fn(2087) p 2113 1182 V 107 w(0) p Fb(:) p Fn(2126) p
2431 1182 V 2739 1182 V Fm 415 w(0.3777) p 3046 1182
V 881 1186 2167 4 v 879 1277 4 92 v 893 1249 a(Hand-2) p
1197 1277 V Fn 35 w(0) p Fb(:) p Fn(1280) p 1496 1277
V 87 w(0) p Fb(:) p Fn(1270) p 1795 1277 V 88 w(0) p
Fb(:) p Fn(2006) p 2113 1277 V 107 w(0) p Fb(:) p Fn(1612) p
2431 1277 V Fm 108 w(0.3777) p 2739 1277 V 3046 1277
V 881 1280 2167 4 v Fo 648 1642 a(In) 43 b(the) g(second) f
(application) g(area,) f(a) i(subset) f(of) h(queries) f(and) h(do) r
(cumen) n(ts) f(from) 523 1741 y(ADI[16]) d(text) h(collection) e(w) n
(as) g(parsed) g(in) n(to) h(a) g(group) f(of) h(dep) r(endency) h
(trees.) e(Subse-) 523 1841 y(quen) n(tly) -7 b(,) 26
b(a) f(standard) g(k) n(eyw) n(ord-based) d(information) j(retriev) -5
b(al) 25 b(system[7]) g(w) n(as) g(mo) r(di\014ed) 523
1940 y(so) g(as,) g(on) g(one) h(hand,) f(to) h(restrict) f(the) h(k) n
(eyw) n(ord) d(matc) n(hing) i(pro) r(cess) g(only) g(to) g(w) n(ords) g
(that) 523 2040 y(ha) n(v) n(e) i(similar) g(structural) g(prop) r
(erties) g(in) h(b) r(oth) g(query) f(and) h(do) r(cumen) n(t) g(sen) n
(tence) g(dep) r(en-) 523 2140 y(dency) k(trees,) f(and,) h(on) g(the) g
(other) f(hand,) h(to) g(allo) n(w) e(for) i(more) f(\015exibilit) n(y)
h(in) g(individual) 523 2239 y(w) n(ord) j(comparisons) e(b) n(y) j
(letting) g(a) f(direct) g(within-cluster) h(part) f(of) h(sp) r(eec) n
(h) f(corresp) r(on-) 523 2339 y(dence) 30 b(coun) n(t) f(as) g(a) g
(partial) g(matc) n(h.) g(As) h(a) f(result,) g(the) h(o) n(v) n(erall)
e(p) r(erformance) g(indicators) 523 2439 y(impro) n(v) n(ed,) e(whic) n
(h) i(can) f(b) r(e) h(illustrated) f(b) n(y) h(the) g(follo) n(wing) e
(example.) 674 3562 y @beginspecial 0 @llx 0 @lly 218
@urx 143 @ury 1502 @rwi @setspecial
%%BeginDocument: parse-tree-Doc.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\parse-tree-Doc.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 218 143
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 218 143
%AI3_TileBox: 0 0 218 143
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  79.8000 80.0400 m
  126.8400 80.0400 L
  128.6400 80.2800 L
  130.2000 80.8800 L
  131.6400 81.9600 L
  132.7200 83.4000 L
  133.4400 84.9600 L
  133.6800 86.7600 L
  133.4400 88.5600 L
  132.7200 90.1200 L
  131.6400 91.5600 L
  130.2000 92.6400 L
  128.6400 93.2400 L
  126.8400 93.4800 L
  79.8000 93.4800 L
  78.0000 93.2400 L
  76.3200 92.6400 L
  75.0000 91.5600 L
  73.9200 90.1200 L
  73.2000 88.5600 L
  72.9600 86.7600 L
  73.2000 84.9600 L
  73.9200 83.4000 L
  75.0000 81.9600 L
  76.3200 80.8800 L
  78.0000 80.2800 L
  79.8000 80.0400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 81.9600 83.1600 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(criterion\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  40.3200 55.2000 m
  58.3200 55.2000 L
  60.1200 55.4400 L
  61.8000 56.1600 L
  63.1200 57.2400 L
  64.2000 58.6800 L
  64.9200 60.2400 L
  65.1600 62.0400 L
  64.9200 63.7200 L
  64.2000 65.4000 L
  63.1200 66.8400 L
  61.8000 67.8000 L
  60.1200 68.5200 L
  58.3200 68.7600 L
  40.3200 68.7600 L
  38.6400 68.5200 L
  36.9600 67.8000 L
  35.6400 66.8400 L
  34.6800 65.4000 L
  33.9600 63.7200 L
  33.7200 62.0400 L
  33.9600 60.2400 L
  34.6800 58.6800 L
  35.6400 57.2400 L
  36.9600 56.1600 L
  38.6400 55.4400 L
  40.3200 55.2000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 42.6000 58.4400 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(an\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  78.6000 50.7600 m
  128.0400 50.7600 L
  129.7200 51.0000 L
  131.4000 51.7200 L
  132.7200 52.6800 L
  133.8000 54.1200 L
  134.5200 55.8000 L
  134.7600 57.4800 L
  134.5200 59.2800 L
  133.8000 60.8400 L
  132.7200 62.2800 L
  131.4000 63.3600 L
  129.7200 64.0800 L
  128.0400 64.2000 L
  78.6000 64.2000 L
  76.9200 64.0800 L
  75.2400 63.3600 L
  73.8000 62.2800 L
  72.7200 60.8400 L
  72.1200 59.2800 L
  71.8800 57.4800 L
  72.1200 55.8000 L
  72.7200 54.1200 L
  73.8000 52.6800 L
  75.2400 51.7200 L
  76.9200 51.0000 L
  78.6000 50.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 78.2400 53.8800 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(adequate\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  8.1600 80.0400 m
  53.0400 80.0400 L
  54.8400 80.2800 L
  56.4000 80.8800 L
  57.8400 81.9600 L
  58.9200 83.4000 L
  59.6400 84.9600 L
  59.8800 86.7600 L
  59.6400 88.5600 L
  58.9200 90.1200 L
  57.8400 91.5600 L
  56.4000 92.6400 L
  54.8400 93.2400 L
  53.0400 93.4800 L
  8.1600 93.4800 L
  6.4800 93.2400 L
  4.8000 92.6400 L
  3.3600 91.5600 L
  2.4000 90.1200 L
  1.6800 88.5600 L
  1.4400 86.7600 L
  1.6800 84.9600 L
  2.4000 83.4000 L
  3.3600 81.9600 L
  4.8000 80.8800 L
  6.4800 80.2800 L
  8.1600 80.0400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 5.4000 83.1600 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(relevance\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.196 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  78.6000 127.0800 m
  128.0400 127.0800 L
  129.7200 127.3200 L
  131.4000 128.0400 L
  132.7200 129.1200 L
  133.8000 130.5600 L
  134.5200 132.1200 L
  134.7600 133.9200 L
  134.5200 135.6000 L
  133.8000 137.2800 L
  132.7200 138.7200 L
  131.4000 139.6800 L
  129.7200 140.4000 L
  128.0400 140.6400 L
  78.6000 140.6400 L
  76.9200 140.4000 L
  75.2400 139.6800 L
  73.8000 138.7200 L
  72.7200 137.2800 L
  72.1200 135.6000 L
  71.8800 133.9200 L
  72.1200 132.1200 L
  72.7200 130.5600 L
  73.8000 129.1200 L
  75.2400 128.0400 L
  76.9200 127.3200 L
  78.6000 127.0800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 93.0000 130.3200 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  159.4800 80.0400 m
  173.0400 80.0400 L
  174.7200 80.2800 L
  176.4000 80.8800 L
  177.6000 81.9600 L
  178.6800 83.4000 L
  179.4000 84.9600 L
  179.6400 86.7600 L
  179.4000 88.5600 L
  178.6800 90.1200 L
  177.6000 91.5600 L
  176.4000 92.6400 L
  174.7200 93.2400 L
  173.0400 93.4800 L
  159.4800 93.4800 L
  157.8000 93.2400 L
  156.1200 92.6400 L
  154.6800 91.5600 L
  153.6000 90.1200 L
  153.0000 88.5600 L
  152.7600 86.7600 L
  153.0000 84.9600 L
  153.6000 83.4000 L
  154.6800 81.9600 L
  156.1200 80.8800 L
  157.8000 80.2800 L
  159.4800 80.0400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 161.5200 83.1600 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(in\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  150.4800 1.3200 m
  208.9200 1.3200 L
  210.6000 1.5600 L
  212.2800 2.2800 L
  213.6000 3.3600 L
  214.6800 4.8000 L
  215.4000 6.3600 L
  215.6400 8.1600 L
  215.4000 9.8400 L
  214.6800 11.5200 L
  213.6000 12.9600 L
  212.2800 13.9200 L
  210.6000 14.6400 L
  208.9200 14.8800 L
  150.4800 14.8800 L
  148.8000 14.6400 L
  147.1200 13.9200 L
  145.6800 12.9600 L
  144.6000 11.5200 L
  144.0000 9.8400 L
  143.7600 8.1600 L
  144.0000 6.3600 L
  144.6000 4.8000 L
  145.6800 3.3600 L
  147.1200 2.2800 L
  148.8000 1.5600 L
  150.4800 1.3200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 149.8800 4.5600 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(information\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  159.4800 26.1600 m
  199.9200 26.1600 L
  201.6000 26.4000 L
  203.2800 27.0000 L
  204.6000 28.0800 L
  205.6800 29.5200 L
  206.4000 31.0800 L
  206.6400 32.8800 L
  206.4000 34.6800 L
  205.6800 36.1200 L
  204.6000 37.5600 L
  203.2800 38.6400 L
  201.6000 39.2400 L
  199.9200 39.4800 L
  159.4800 39.4800 L
  157.8000 39.2400 L
  156.1200 38.6400 L
  154.6800 37.5600 L
  153.6000 36.1200 L
  153.0000 34.6800 L
  152.7600 32.8800 L
  153.0000 31.0800 L
  153.6000 29.5200 L
  154.6800 28.0800 L
  156.1200 27.0000 L
  157.8000 26.4000 L
  159.4800 26.1600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 160.6800 29.2800 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(system\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  155.0400 50.7600 m
  204.3600 50.7600 L
  206.1600 51.0000 L
  207.7200 51.7200 L
  209.1600 52.6800 L
  210.2400 54.1200 L
  210.9600 55.8000 L
  211.0800 57.4800 L
  210.9600 59.2800 L
  210.2400 60.8400 L
  209.1600 62.2800 L
  207.7200 63.3600 L
  206.1600 64.0800 L
  204.3600 64.2000 L
  155.0400 64.2000 L
  153.2400 64.0800 L
  151.6800 63.3600 L
  150.2400 62.2800 L
  149.1600 60.8400 L
  148.4400 59.2800 L
  148.2000 57.4800 L
  148.4400 55.8000 L
  149.1600 54.1200 L
  150.2400 52.6800 L
  151.6800 51.7200 L
  153.2400 51.0000 L
  155.0400 50.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 152.2800 53.8800 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(evaluation\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  96.6000 104.7600 m
  110.0400 104.7600 L
  111.7200 105.0000 L
  113.4000 105.7200 L
  114.7200 106.5600 L
  115.8000 108.0000 L
  116.5200 109.6800 L
  116.7600 111.3600 L
  116.5200 113.1600 L
  115.8000 114.7200 L
  114.7200 116.1600 L
  113.4000 117.2400 L
  111.7200 117.9600 L
  110.0400 118.0800 L
  96.6000 118.0800 L
  94.9200 117.9600 L
  93.2400 117.2400 L
  91.8000 116.1600 L
  90.7200 114.7200 L
  90.1200 113.1600 L
  89.8800 111.3600 L
  90.1200 109.6800 L
  90.7200 108.0000 L
  91.8000 106.5600 L
  93.2400 105.7200 L
  94.9200 105.0000 L
  96.6000 104.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 99.0000 107.7600 0 Tp
TP
93.459151 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(is\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  103.3200 127.0800 m
  103.3200 118.0800 L
S
U
u
  103.3200 104.7600 m
  103.3200 93.4800 L
S
U
u
  103.9200 104.7600 m
  27.6000 93.4800 L
S
U
u
  103.3200 80.0400 m
  103.3200 64.2000 L
S
U
u
  94.9200 80.0400 m
  49.3200 69.3600 L
S
U
u
  102.8400 104.7600 m
  166.2000 94.0800 L
S
U
u
  167.4000 80.5200 m
  178.8000 64.8000 L
S
U
u
  179.8800 50.7600 m
  179.8800 40.0800 L
S
U
u
  179.6400 26.1600 m
  179.6400 15.4800 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial Fn 731 3736 a(\(a\)) d(Do) r(cumen) n(t) d(sen) n(tence) j
(parse) g(tree.) 2002 3562 y @beginspecial 0 @llx 0 @lly
219 @urx 145 @ury 1502 @rwi @setspecial
%%BeginDocument: parse-tree-Query.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\serge\parse-tree-Query.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 219 145
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 219 145
%AI3_TileBox: 0 0 219 145
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.196 k
 [] 0 d
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  80.0400 129.3600 m
  129.4800 129.3600 L
  131.1600 129.6000 L
  132.8400 130.3200 L
  134.2800 131.4000 L
  135.2400 132.8400 L
  135.9600 134.4000 L
  136.2000 136.2000 L
  135.9600 137.8800 L
  135.2400 139.5600 L
  134.2800 141.0000 L
  132.8400 141.9600 L
  131.1600 142.6800 L
  129.4800 142.9200 L
  80.0400 142.9200 L
  78.3600 142.6800 L
  76.6800 141.9600 L
  75.2400 141.0000 L
  74.2800 139.5600 L
  73.5600 137.8800 L
  73.3200 136.2000 L
  73.5600 134.4000 L
  74.2800 132.8400 L
  75.2400 131.4000 L
  76.6800 130.3200 L
  78.3600 129.6000 L
  80.0400 129.3600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 94.4400 132.6000 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  151.9200 1.4400 m
  210.3600 1.4400 L
  212.0400 1.6800 L
  213.7200 2.2800 L
  215.1600 3.3600 L
  216.1200 4.8000 L
  216.8400 6.3600 L
  217.0800 8.1600 L
  216.8400 9.9600 L
  216.1200 11.5200 L
  215.1600 12.9600 L
  213.7200 14.0400 L
  212.0400 14.6400 L
  210.3600 14.8800 L
  151.9200 14.8800 L
  150.2400 14.6400 L
  148.5600 14.0400 L
  147.1200 12.9600 L
  146.1600 11.5200 L
  145.4400 9.9600 L
  145.2000 8.1600 L
  145.4400 6.3600 L
  146.1600 4.8000 L
  147.1200 3.3600 L
  148.5600 2.2800 L
  150.2400 1.6800 L
  151.9200 1.4400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 151.3200 4.5600 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(information\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  169.9200 41.7600 m
  210.3600 41.7600 L
  212.0400 42.0000 L
  213.7200 42.7200 L
  215.1600 43.8000 L
  216.1200 45.1200 L
  216.8400 46.8000 L
  217.0800 48.4800 L
  216.8400 50.2800 L
  216.1200 51.9600 L
  215.1600 53.2800 L
  213.7200 54.3600 L
  212.0400 55.0800 L
  210.3600 55.3200 L
  169.9200 55.3200 L
  168.2400 55.0800 L
  166.5600 54.3600 L
  165.1200 53.2800 L
  164.1600 51.9600 L
  163.4400 50.2800 L
  163.2000 48.4800 L
  163.4400 46.8000 L
  164.1600 45.1200 L
  165.1200 43.8000 L
  166.5600 42.7200 L
  168.2400 42.0000 L
  169.9200 41.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 171.1200 44.8800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(system\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  138.4800 64.3200 m
  187.8000 64.3200 L
  189.6000 64.5600 L
  191.1600 65.1600 L
  192.6000 66.2400 L
  193.6800 67.6800 L
  194.4000 69.2400 L
  194.6400 71.0400 L
  194.4000 72.8400 L
  193.6800 74.4000 L
  192.6000 75.8400 L
  191.1600 76.9200 L
  189.6000 77.5200 L
  187.8000 77.7600 L
  138.4800 77.7600 L
  136.6800 77.5200 L
  135.1200 76.9200 L
  133.6800 75.8400 L
  132.6000 74.4000 L
  131.8800 72.8400 L
  131.7600 71.0400 L
  131.8800 69.2400 L
  132.6000 67.6800 L
  133.6800 66.2400 L
  135.1200 65.1600 L
  136.6800 64.5600 L
  138.4800 64.3200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 135.7200 67.4400 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(evaluation\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  104.8800 129.3600 m
  104.8800 120.3600 L
S
U
u
  0.000 0.000 0.000 0.000 k
  80.0400 107.0400 m
  129.4800 107.0400 L
  131.1600 107.2800 L
  132.8400 108.0000 L
  134.2800 108.8400 L
  135.2400 110.2800 L
  135.9600 111.9600 L
  136.2000 113.6400 L
  135.9600 115.4400 L
  135.2400 117.0000 L
  134.2800 118.4400 L
  132.8400 119.5200 L
  131.1600 120.2400 L
  129.4800 120.3600 L
  80.0400 120.3600 L
  78.3600 120.2400 L
  76.6800 119.5200 L
  75.2400 118.4400 L
  74.2800 117.0000 L
  73.5600 115.4400 L
  73.3200 113.6400 L
  73.5600 111.9600 L
  74.2800 110.2800 L
  75.2400 108.8400 L
  76.6800 108.0000 L
  78.3600 107.2800 L
  80.0400 107.0400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 76.6800 110.0400 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(developed\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  21.7200 17.1600 m
  44.0400 17.1600 L
  45.8400 17.4000 L
  47.4000 18.1200 L
  48.8400 19.0800 L
  49.9200 20.5200 L
  50.6400 22.2000 L
  50.8800 23.8800 L
  50.6400 25.6800 L
  49.9200 27.2400 L
  48.8400 28.6800 L
  47.4000 29.7600 L
  45.8400 30.4800 L
  44.0400 30.6000 L
  21.7200 30.6000 L
  19.9200 30.4800 L
  18.3600 29.7600 L
  16.9200 28.6800 L
  15.8400 27.2400 L
  15.1200 25.6800 L
  15.0000 23.8800 L
  15.1200 22.2000 L
  15.8400 20.5200 L
  16.9200 19.0800 L
  18.3600 18.1200 L
  19.9200 17.4000 L
  21.7200 17.1600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 20.2800 20.2800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(what\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  8.1600 41.7600 m
  59.2800 41.7600 L
  60.9600 42.0000 L
  62.6400 42.7200 L
  64.0800 43.8000 L
  65.1600 45.1200 L
  65.7600 46.8000 L
  66.0000 48.4800 L
  65.7600 50.2800 L
  65.1600 51.9600 L
  64.0800 53.2800 L
  62.6400 54.3600 L
  60.9600 55.0800 L
  59.2800 55.3200 L
  8.1600 55.3200 L
  6.4800 55.0800 L
  4.8000 54.3600 L
  3.3600 53.2800 L
  2.4000 51.9600 L
  1.6800 50.2800 L
  1.4400 48.4800 L
  1.6800 46.8000 L
  2.4000 45.1200 L
  3.3600 43.8000 L
  4.8000 42.7200 L
  6.4800 42.0000 L
  8.1600 41.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 15.9600 44.8800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(criteria\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  34.0800 64.3200 m
  58.6800 64.3200 L
  60.4800 64.5600 L
  62.0400 65.1600 L
  63.4800 66.2400 L
  64.5600 67.6800 L
  65.1600 69.2400 L
  65.4000 71.0400 L
  65.1600 72.8400 L
  64.5600 74.4000 L
  63.4800 75.8400 L
  62.0400 76.9200 L
  60.4800 77.5200 L
  58.6800 77.7600 L
  34.0800 77.7600 L
  32.2800 77.5200 L
  30.7200 76.9200 L
  29.2800 75.8400 L
  28.2000 74.4000 L
  27.6000 72.8400 L
  27.3600 71.0400 L
  27.6000 69.2400 L
  28.2000 67.6800 L
  29.2800 66.2400 L
  30.7200 65.1600 L
  32.2800 64.5600 L
  34.0800 64.3200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 34.5600 67.4400 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(have\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  53.0400 86.7600 m
  84.6000 86.7600 L
  86.2800 87.0000 L
  87.9600 87.7200 L
  89.4000 88.8000 L
  90.3600 90.1200 L
  91.0800 91.8000 L
  91.3200 93.4800 L
  91.0800 95.2800 L
  90.3600 96.9600 L
  89.4000 98.2800 L
  87.9600 99.3600 L
  86.2800 100.0800 L
  84.6000 100.3200 L
  53.0400 100.3200 L
  51.3600 100.0800 L
  49.6800 99.3600 L
  48.2400 98.2800 L
  47.2800 96.9600 L
  46.5600 95.2800 L
  46.3200 93.4800 L
  46.5600 91.8000 L
  47.2800 90.1200 L
  48.2400 88.8000 L
  49.6800 87.7200 L
  51.3600 87.0000 L
  53.0400 86.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 55.3200 89.8800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(been\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  124.9200 86.7600 m
  147.4800 86.7600 L
  149.1600 87.0000 L
  150.8400 87.7200 L
  152.2800 88.8000 L
  153.2400 90.1200 L
  153.9600 91.8000 L
  154.2000 93.4800 L
  153.9600 95.2800 L
  153.2400 96.9600 L
  152.2800 98.2800 L
  150.8400 99.3600 L
  149.1600 100.0800 L
  147.4800 100.3200 L
  124.9200 100.3200 L
  123.2400 100.0800 L
  121.5600 99.3600 L
  120.1200 98.2800 L
  119.1600 96.9600 L
  118.4400 95.2800 L
  118.2000 93.4800 L
  118.4400 91.8000 L
  119.1600 90.1200 L
  120.1200 88.8000 L
  121.5600 87.7200 L
  123.2400 87.0000 L
  124.9200 86.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 129.1200 89.8800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(for\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  98.0400 23.8800 m
  147.4800 23.8800 L
  149.1600 24.1200 L
  150.8400 24.8400 L
  152.2800 25.9200 L
  153.2400 27.2400 L
  153.9600 28.9200 L
  154.2000 30.6000 L
  153.9600 32.4000 L
  153.2400 34.0800 L
  152.2800 35.4000 L
  150.8400 36.3600 L
  149.1600 37.0800 L
  147.4800 37.3200 L
  98.0400 37.3200 L
  96.3600 37.0800 L
  94.6800 36.3600 L
  93.2400 35.4000 L
  92.2800 34.0800 L
  91.5600 32.4000 L
  91.3200 30.6000 L
  91.5600 28.9200 L
  92.2800 27.2400 L
  93.2400 25.9200 L
  94.6800 24.8400 L
  96.3600 24.1200 L
  98.0400 23.8800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 99.1200 27.0000 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(objective\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  89.0400 41.7600 m
  111.4800 41.7600 L
  113.1600 42.0000 L
  114.8400 42.7200 L
  116.2800 43.8000 L
  117.2400 45.1200 L
  117.9600 46.8000 L
  118.2000 48.4800 L
  117.9600 50.2800 L
  117.2400 51.9600 L
  116.2800 53.2800 L
  114.8400 54.3600 L
  113.1600 55.0800 L
  111.4800 55.3200 L
  89.0400 55.3200 L
  87.3600 55.0800 L
  85.6800 54.3600 L
  84.2400 53.2800 L
  83.2800 51.9600 L
  82.5600 50.2800 L
  82.3200 48.4800 L
  82.5600 46.8000 L
  83.2800 45.1200 L
  84.2400 43.8000 L
  85.6800 42.7200 L
  87.3600 42.0000 L
  89.0400 41.7600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 91.9200 44.8800 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(the\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  169.6800 21.6000 m
  210.0000 21.6000 L
  211.8000 21.8400 L
  213.3600 22.5600 L
  214.8000 23.6400 L
  215.8800 25.0800 L
  216.4800 26.6400 L
  216.7200 28.4400 L
  216.4800 30.1200 L
  215.8800 31.8000 L
  214.8000 33.2400 L
  213.3600 34.2000 L
  211.8000 34.9200 L
  210.0000 35.1600 L
  169.6800 35.1600 L
  167.8800 34.9200 L
  166.2000 34.2000 L
  164.8800 33.2400 L
  163.8000 31.8000 L
  163.0800 30.1200 L
  162.8400 28.4400 L
  163.0800 26.6400 L
  163.8000 25.0800 L
  164.8800 23.6400 L
  166.2000 22.5600 L
  167.8800 21.8400 L
  169.6800 21.6000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 168.8400 24.8400 0 Tp
TP
93.461640 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(retrieval\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  102.6000 107.0400 m
  68.8800 100.3200 L
S
U
u
  109.2000 107.0400 m
  136.2000 100.3200 L
S
U
u
  68.8800 86.7600 m
  46.3200 77.7600 L
S
U
u
  46.3200 64.3200 m
  33.0000 55.3200 L
S
U
u
  33.0000 41.7600 m
  33.0000 30.6000 L
S
U
u
  136.2000 86.7600 m
  163.2000 77.7600 L
S
U
u
  163.2000 64.3200 m
  190.0800 55.3200 L
S
U
u
  190.0800 41.7600 m
  190.0800 35.1600 L
S
U
u
  190.0800 21.6000 m
  190.0800 14.8800 L
S
U
u
  149.7600 64.3200 m
  100.3200 55.3200 L
S
U
u
  156.4800 64.3200 m
  122.7600 37.3200 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
@endspecial 2120 3736 a(\(b\)) i(Query) g(sen) n(tence) g(parse) h
(tree.) p Fm 749 3990 a(Fig.) 15 b(5.) p Fn 25 w(P) n(arse) 27
b(trees) f(of) g(sample) g(sen) n(tences) g(from) f(do) r(cumen) n(t) f
(27) j(and) e(query) g(13.) p Fo 648 4283 a(Both) d(query) g(13) f(and)
h(do) r(cumen) n(t) h(27) f(in) g(the) h(ADI) h(text) e(collection) g
(ha) n(v) n(e) g(a) g(substan) n(tial) 523 4383 y(k) n(eyw) n(ord) h(o)
n(v) n(erlap) p Fe 1111 4353 a(4) p Fo 1172 4383 a(,) i(ho) n(w) n(ev) n
(er,) e(a) i(con) n(v) n(en) n(tional) e(k) n(eyw) n(ord-based) f
(information) j(retriev) -5 b(al) 523 4482 y(system) 34
b(do) r(es) g(not) g(recognize) e(this) i(pair) g(as) f(the) i(b) r
(est) f(matc) n(h.) g(Instead) g(suc) n(h) g(a) f(system) 523
4582 y(ranks) 24 b(high) h(some) g(other) f(\\relev) -5
b(an) n(t") 23 b(do) r(cumen) n(ts) j(whic) n(h) f(share) f(a) g(lot) h
(of) h(k) n(eyw) n(ords) c(with) 523 4682 y(the) 33 b(query) -7
b(,) 31 b(ev) n(en) h(though) g(these) g(common) g(k) n(eyw) n(ords) e
(are) h(quite) h(inappropriate) f(if) h(one) p 523 4748
473 4 v Fc 546 4801 a(4) p Fn 606 4833 a(The) j(sample) g(sen) n
(tences) g(considered) g(are:) p Fa 36 w(\\What) i(criteria) f(have) h
(b) l(e) l(en) g(develop) l(e) l(d) h(for) e(the) 606
4924 y(obje) l(ctive) d(evaluation) f(of) g(information) f(r) l
(etrieval) i(and) f(dissemination) g(systems?") p Fn(,) h(and) p
Fa 30 w(\\Is) 606 5016 y(r) l(elevanc) l(e) c(an) f(ade) l(quate) i
(criterion) e(in) f(r) l(etrieval) i(system) g(evaluation?") p
Fn(.) p 90 rotate dyy eop
%%Page: 9 9
9 8 bop Fo 523 540 a(considers) 24 b(their) i(con) n(text) f(con) n(v) n
(ey) n(ed) f(b) n(y) i(the) g(sen) n(tence) f(syn) n(tactic) g
(structure.) h(The) f(use) h(of) 523 639 y(the) e(prop) r(osed) e
(eigen) n(v) n(ector) f(subspace) i(pro) 5 b(jection) 22
b(metho) r(d) i(allo) n(w) n(ed) e(us) h(to) g(tak) n(e) g(in) n(to) g
(ac-) 523 739 y(coun) n(t) d(the) h(parse) f(tree) g(structure) g(in) h
(addition) g(to) f(the) h(k) n(eyw) n(ord) e(information,) h(whic) n(h)
g(lead) 523 839 y(to) 36 b(impro) n(v) n(ed) f(results.) h(The) g
(parse) f(trees) g(\(after) h(conjunction) h(expansion) e(and) h(prep) r
(o-) 523 938 y(sitional) i(p) r(ost-mo) r(di\014er) g(normalization\)) g
(of) g(the) i(sample) e(sen) n(tences) g(from) g(the) h(ab) r(o) n(v) n
(e) 523 1038 y(do) r(cumen) n(t) 28 b(and) g(query) f(are) g(depicted) h
(in) g(Figure) f(5;) h(their) f(pro) 5 b(jections,) 27
b(that) h(w) n(ere) f(used) 523 1137 y(to) i(estimate) g(syn) n(tactic)
g(structural) f(similarit) n(y) g(of) i(individual) f(k) n(eyw) n
(ords,) e(are) h(sho) n(wn) h(in) 523 1237 y(Figure) e(6.) 523
3542 y @beginspecial 50 @llx 50 @lly 410 @urx 302 @ury
3600 @rwi @setspecial
%%BeginDocument: parses.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: parses.eps
%%Creator: gnuplot 3.7 patchlevel 1
%%CreationDate: Tue Jan  8 17:45:40 2002
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -53 def
/dl {10 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth } def
/AL { stroke userlinewidth 2 div setlinewidth } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times Roman) findfont 160 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
560 773 M
197 0 V
1533 0 R
4638 0 V
1.000 UL
LTb
560 773 M
63 0 V
6305 0 R
-63 0 V
464 773 M
(0) Rshow
1.000 UL
LTa
560 1678 M
6368 0 V
1.000 UL
LTb
560 1678 M
63 0 V
6305 0 R
-63 0 V
-6401 0 R
(0.2) Rshow
1.000 UL
LTa
560 2584 M
6368 0 V
1.000 UL
LTb
560 2584 M
63 0 V
6305 0 R
-63 0 V
-6401 0 R
(0.4) Rshow
1.000 UL
LTa
560 3490 M
6368 0 V
1.000 UL
LTb
560 3490 M
63 0 V
6305 0 R
-63 0 V
-6401 0 R
(0.6) Rshow
1.000 UL
LTa
560 4395 M
6368 0 V
1.000 UL
LTb
560 4395 M
63 0 V
6305 0 R
-63 0 V
-6401 0 R
(0.8) Rshow
1.000 UL
LTa
560 320 M
0 4528 V
1.000 UL
LTb
560 320 M
0 63 V
0 4465 R
0 -63 V
560 160 M
(-0.4) Cshow
1.000 UL
LTa
1621 320 M
0 99 V
0 472 R
0 3957 V
1.000 UL
LTb
1621 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(-0.2) Cshow
1.000 UL
LTa
2683 320 M
0 4528 V
1.000 UL
LTb
2683 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(0) Cshow
1.000 UL
LTa
3744 320 M
0 4528 V
1.000 UL
LTb
3744 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(0.2) Cshow
1.000 UL
LTa
4805 320 M
0 4528 V
1.000 UL
LTb
4805 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(0.4) Cshow
1.000 UL
LTa
5867 320 M
0 4528 V
1.000 UL
LTb
5867 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(0.6) Cshow
1.000 UL
LTa
6928 320 M
0 4528 V
1.000 UL
LTb
6928 320 M
0 63 V
0 4465 R
0 -63 V
0 -4625 R
(0.8) Cshow
1.000 UL
LTb
560 320 M
6368 0 V
0 4528 V
-6368 0 V
560 320 L
5873 1405 M
(ROOT) Lshow
5834 1627 M
(IS) Lshow
4548 3797 M
(IN) Lshow
2708 4700 M
(EVALUATION) Lshow
1621 4682 M
(SYSTEM) Lshow
1085 4456 M
(RETRIEVAL) Lshow
4854 1140 M
(CRITERION) Lshow
5279 975 M
(AN) Lshow
4748 799 M
(ADEQUATE) Lshow
4748 1405 M
(RELEVANCE) Lshow
5810 1975 M
(root) Lshow
5694 2297 M
(developed) Lshow
3566 4274 M
(for) Lshow
2929 4100 M
(evaluation) Lshow
2492 4290 M
(system) Lshow
2232 4141 M
(retrieval) Lshow
1768 4039 M
(information) Lshow
3007 3956 M
(the) Lshow
3087 3775 M
(objective) Lshow
5990 1023 M
(been) Lshow
5993 811 M
(have) Lshow
5993 618 M
(criteria) Lshow
5993 441 M
(what) Lshow
3.000 UP
1.000 UL
LT5
1525 773 M
(DOCUMENT) Rshow
5767 1405 Circle
5728 1627 Circle
4442 3797 Circle
2708 4428 Circle
2103 4365 Circle
1902 4313 Circle
5805 1049 Circle
5809 975 Circle
5809 975 Circle
5767 1405 Circle
1907 773 Circle
3.000 UP
1.000 UL
LT8
1525 537 M
(query) Rshow
5704 1975 TriUF
5588 2297 TriUF
3461 4274 TriUF
2929 4371 TriUF
2598 4381 TriUF
2391 4367 TriUF
2299 4356 TriUF
3007 4364 TriUF
3007 4364 TriUF
5884 932 TriUF
5887 811 TriUF
5887 792 TriUF
5887 787 TriUF
1907 537 TriUF
stroke
grestore
end
showpage
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           %%Trailer
%%DocumentFonts: Times Roman

%%EndDocument
@endspecial Fm 523 3716 a(Fig.) 15 b(6.) p Fn 30 w(Comparison) 30
b(of) i(t) n(w) n(o) e(sen) n(tence) g(parse) h(tree) g(pro) t
(jections:) h(an) e(application) h(in) g(natural) 523
3808 y(language) c(pro) r(cessing.) p Fk 523 4235 a(4) 112
b(Conclusion) p Fo 523 4418 a(In) 27 b(this) f(pap) r(er,) g(w) n(e) h
(ha) n(v) n(e) e(describ) r(ed) h(an) g(approac) n(h) f(for) h(inexact)
g(m) n(ultisubgraph) g(matc) n(h-) 523 4518 y(ing) 33
b(using) h(the) g(tec) n(hnique) f(of) h(pro) 5 b(jection) 33
b(of) g(graph) g(v) n(ertices) f(in) n(to) i(the) g(eigenspaces) e(of)
523 4617 y(graphs) c(in) i(conjunction) g(with) g(standard) f
(clustering) g(metho) r(ds.) h(The) g(t) n(w) n(o) f(most) h(imp) r
(or-) 523 4717 y(tan) n(t) h(prop) r(erties) f(of) h(the) h(prop) r
(osed) e(approac) n(h) f(are,) h(\014rst,) h(its) g(abilit) n(y) g(to) g
(matc) n(h) f(graphs) 523 4816 y(of) 24 b(considerably) f(di\013eren) n
(t) h(sizes,) f(and,) h(second,) g(its) g(p) r(o) n(w) n(er) f(to) h
(disco) n(v) n(er) e(corresp) r(ondence) 523 4916 y(relationships) 29
b(among) g(subgraphs) f(and) i(groups) e(of) i(v) n(ertices,) f(in) h
(addition) g(to) g(the) g(\\one-) 523 5016 y(to-one") 22
b(t) n(yp) r(e) j(of) e(v) n(ertex) g(corresp) r(ondence) f(that) i
(the) h(ma) 5 b(jorit) n(y) 22 b(of) i(previously) e(dev) n(elop) r(ed)
p 90 rotate dyy eop
%%Page: 10 10
10 9 bop Fo 523 540 a(solutions) 24 b(of) h(the) g(graph) e(matc) n
(hing) h(problem) g(mostly) h(fo) r(cused) f(on.) h(In) g(addition) f
(to) h(that,) 523 639 y(w) n(e) 33 b(ha) n(v) n(e) f(also) g(explored) h
(t) n(w) n(o) f(p) r(oten) n(tial) h(areas) f(for) h(practical) f
(application) h(for) g(the) g(de-) 523 739 y(scrib) r(ed) f(approac) n
(h) f(-) h(matc) n(hing) g(of) g(shap) r(es) g(represen) n(ted) f(b) n
(y) h(sho) r(c) n(k) g(trees) g(and) g(natural) 523 839
y(language) i(pro) r(cessing,) h(and) g(obtained) h(results) f
(encouraging) f(further) h(researc) n(h) f(of) i(the) 523
938 y(metho) r(d.) p Fk 523 1204 a(References) p Fn 561
1395 a(1.) 43 b(H.) 28 b(Bunk) n(e.) 43 b(Recen) n(t) 29
b(adv) l(ances) f(in) h(structural) g(pattern) g(recognition) h(with) f
(application) h(to) 663 1486 y(visual) c(form) f(analysis.) p
Fa 36 w(IWVF4,) h(LNCS) p Fn(,) g(2059:11{23,) k(2001.) 561
1577 y(2.) 43 b(L.) 27 b(Collatz) i(and) e(U.) g(Sinogo) n(witz.) 40
b(Sp) r(ektren) 26 b(endlic) n(her) h(grafen.) p Fa 39
w(A) n(bh.) i(Math.) g(Sem.) f(Univ.) 663 1669 y(Hambur) l(g) p
Fn(,) f(21:63{77,) i(1957.) 561 1760 y(3.) 43 b(L.) 25
b(Dice.) 33 b(Measures) 27 b(of) e(the) g(amoun) n(t) f(of) i(ecologic)
h(asso) r(ciation) g(b) r(et) n(w) n(een) e(sp) r(ecies.) p
Fa 35 w(Ec) l(olo) l(gy) p Fn(,) 663 1851 y(26:297{302,) 30
b(1945.) 561 1943 y(4.) 43 b(P) -6 b(.) 36 b(Dimitro) n(v,) g(C.) h
(Phillips,) g(and) f(K.) h(Siddiqi.) 65 b(Robust) 36
b(and) g(e\016cien) n(t) g(sk) n(eletal) h(graphs.) p
Fa 663 2034 a(Confer) l(enc) l(e) 29 b(on) e(Computer) i(Vision) e(and)
h(Pattern) i(R) l(e) l(c) l(o) l(gnition) p Fn(,) d(june) f(2000.) 561
2125 y(5.) 43 b(X.) 29 b(Jiang,) j(A.) d(Munger,) i(and) e(H.) h(Bunk) n
(e.) 46 b(On) 29 b(median) g(graphs:) i(prop) r(erties,) g(algorithms,)
663 2217 y(and) 25 b(applications.) p Fa 36 w(IEEE) i(T) -6
b(r) l(ans.) 28 b(P) -6 b(AMI) p Fn(,) 25 b(23\(10\):1144{1151,) 32
b(Octob) r(er) 25 b(2001.) 561 2308 y(6.) 43 b(B.) 19
b(Luo) f(and) g(E.) h(Hanco) r(c) n(k.) j(Structural) c(graph) h(matc) n
(hing) e(using) i(the) f(em) f(algorithm) i(and) f(sin-) 663
2399 y(gular) 26 b(v) l(alue) g(decomp) r(osition.) p
Fa 34 w(IEEE) h(T) -6 b(r) l(ans.) 29 b(P) -6 b(AMI) p
Fn(,) 25 b(23\(10\):1120{1136,) 31 b(Octob) r(er) 26
b(2001.) 561 2491 y(7.) 43 b(N.) 21 b(Malo) n(y) -6 b(.) 29
b(Successor) 23 b(v) l(ariet) n(y) e(stemming:) g(v) l(ariations) i(on)
f(a) g(theme.) 27 b(2000.) j(pro) t(ject) 23 b(rep) r(ort) 663
2582 y(\(unpublished\).) 561 2673 y(8.) 43 b(M.) 25 b(P) n(elillo,) i
(K.) e(Siddiqi,) f(and) g(S.) h(Zuc) n(k) n(er.) 32 b(Matc) n(hing) 25
b(hierarc) n(hical) h(structures) f(using) g(asso-) 663
2765 y(ciation) h(graphs.) p Fa 35 w(IEEE) h(T) -6 b(r) l(ans.) 28
b(P) -6 b(AMI) p Fn(,) 26 b(21\(11\),) h(No) n(v) n(em) n(b) r(er) d
(1999.) 561 2856 y(9.) 43 b(A.) 24 b(Sc) n(h) n(w) n(enk.) p
Fa 31 w(A) n(lmost) j(al) t(l) f(tr) l(e) l(es) i(ar) l(e) f(c) l(osp) l
(e) l(ctr) l(al) p Fn(.) 35 b(Academic) 24 b(Press,) i(New) e(Y) -6
b(ork) 24 b(-) g(London,) 663 2947 y(1973.) 523 3039
y(10.) 43 b(L.) 22 b(Shapiro) g(and) g(J.) h(Brady) -6
b(.) 28 b(F) -6 b(eature-based) 22 b(corresp) r(ondence) h(-) f(an) g
(eigen) n(v) n(ector) g(approac) n(h.) p Fa 663 3130
a(Image) 27 b(and) h(Vision) f(Computing) p Fn(,) g(10:268{281,) j
(1992.) 523 3221 y(11.) 43 b(A.) 31 b(Shok) n(oufandeh) g(and) h(S.) g
(Dic) n(kinson.) 52 b(A) 31 b(uni\014ed) g(framew) n(ork) h(for) h
(indexing) f(matc) n(hing) 663 3313 y(hierarc) n(hical) 27
b(shap) r(e) f(structures.) p Fa 34 w(IWVF4,) g(LNCS) p
Fn(,) h(2059:67{84,) i(2001.) 523 3404 y(12.) 43 b(K.) 21
b(Siddiqi,) h(S.) f(Bouix,) i(A.) e(T) -6 b(annebaum,) 21
b(and) g(S.) h(Zuc) n(k) n(er.) 27 b(Hamilton-jacobi) 22
b(sk) n(eletons.) p Fa 29 w(T) -6 b(o) 663 3495 y(app) l(e) l(ar) 29
b(in) e(International) i(Journal) f(of) f(Computer) i(Vision) p
Fn(.) 523 3587 y(13.) 43 b(K.) 21 b(Siddiqi,) g(A.) g(Shok) n
(oufandeh,) f(S.) h(Dic) n(kinson,) h(and) f(S.) g(Zuc) n(k) n(er.) 26
b(Sho) r(c) n(k) 20 b(graphs) i(and) f(shap) r(e) 663
3678 y(matc) n(hing.) p Fa 33 w(International) 29 b(Journal) f(of) g
(Computer) g(Vision) p Fn(,) e(30:1{24,) j(1999.) 523
3769 y(14.) 43 b(S.) e(Tirthapura,) h(D.) f(Sharvit,) g(P) -6
b(.) 41 b(Klein,) h(and) e(B.) i(Kimia.) 81 b(Indexing) 40
b(based) h(on) g(edit-) 663 3861 y(distance) 34 b(matc) n(hing) g(of) g
(shap) r(e) h(graphs.) p Fa 60 w(Multime) l(dia) g(Stor) l(age) i(and) e
(A) n(r) l(chiving) h(Systems) 663 3952 y(III) p Fn(,) 24
b(3527\(2\):25{36,) 30 b(1998.) 523 4043 y(15.) 43 b(S.) 21
b(Umey) n(ama.) 26 b(An) 21 b(eigen) h(decomp) r(osition) g(approac) n
(h) g(to) g(w) n(eigh) n(ted) g(graph) g(matc) n(hing) f(prob-) 663
4134 y(lems.) p Fa 34 w(IEEE) 27 b(T) -6 b(r) l(ans.) 28
b(P) -6 b(AMI) p Fn(,) 25 b(10:695{703,) 30 b(1998.) 523
4226 y(16.) 43 b(URL.) 33 b(Adi,) 26 b(cisi,) h(med) d(test) i
(collections.) p Fa 663 4317 a(ftp://ftp.cs.c) l(ornel) t(l.e) l
(du/pub/smart/) p Fn(.) p 90 rotate dyy eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
